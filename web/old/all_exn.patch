1 patch for repository http://ocsigen.org/darcs/js_of_ocaml:

Tue Aug  2 21:42:42 CEST 2011  gregoire.henry@pps.jussieu.fr
  * TMP: try to conserve stack trace in exception (tested with Firefox)

New patches:

[TMP: try to conserve stack trace in exception (tested with Firefox)
gregoire.henry@pps.jussieu.fr**20110802194242
 Ignore-this: fade406d041a1417b6b0255c1f522b47
] hunk ./compiler/generate.ml 622
   register_bin_prim "caml_js_instanceof" `Pure
     (fun cx cy -> bool (J.EBin(J.InstanceOf, cx, cy)));
   register_un_prim "caml_js_typeof" `Pure
-    (fun cx -> J.EUn(J.Typeof, cx))
+    (fun cx -> J.EUn(J.Typeof, cx));
+  Primitive.mark_used "CamlException"
 
 (****)
 
hunk ./compiler/js_output.ml 34
 
 open Javascript
 
+let trace_exception = ref true
+
 let opt_identifier f i =
   match i with
     None   -> ()
hunk ./compiler/js_output.ml 422
       end;
       Format.fprintf f "}@]"
   | Throw_statement e ->
-      Format.fprintf f "@[<1>throw @[%a;@]@]" (expression 0) e
+      if !trace_exception then
+	Format.fprintf f "@[<1> { var __a = @[%a;@] if (__a.exn != undefined) { __a = __a.exn } else if (!(__a instanceof Error)) { __a = new CamlException(__a, new Error()); }; throw __a; }@]" (expression 0) e
+      else
+	Format.fprintf f "@[<1>throw @[%a;@]@]" (expression 0) e
       (* There must be a space between the return and its
          argument. A line return would not work *)
   | Try_statement (b, ctch, fin) ->
hunk ./compiler/js_output.ml 432
       Format.fprintf f "@[<1>try@ %a" block b;
       begin match ctch with
         None        -> ()
-      | Some (i, b) -> Format.fprintf f "@;<0 -1>@[<1>catch(%s)@,%a@]" i block b
+      | Some (i, b) ->
+	if !trace_exception then
+	  Format.fprintf f "@;<0 -1>@[<1>catch(%s)@,{ if (%s.exn != undefined) { %s = %s.exn; %a } else { throw %s; } }@]" i i i i block b i
+	else
+	  Format.fprintf f "@;<0 -1>@[<1>catch(%s)@,%a@]" i block b
       end;
       begin match fin with
         None   -> ()
hunk ./compiler/js_output.ml 467
   | [s]    -> source_element f s
   | s :: r -> Format.fprintf f "%a@,%a" source_element s source_elements r
 
-let program f se = Format.fprintf f "@[%a@]@." source_elements se
+let program f se = Format.fprintf f "try {@.@[%a@]@.} catch (e) { window.console.error(e); }@." source_elements se
hunk ./runtime/jslib_js_of_ocaml.js 78
 function caml_js_wrap_callback(f) {
   var toArray = Array.prototype.slice;
   return function () {
-    var args = (arguments.length > 0)?toArray.call (arguments):[undefined];
-    return caml_call_gen(f, args);
+      try {
+        var args = (arguments.length > 0)?toArray.call (arguments):[undefined];
+        return caml_call_gen(f, args);
+      } catch (e) { window.console.error(e); }
   }
 }
 //Provides: caml_js_wrap_meth_callback const
hunk ./runtime/jslib_js_of_ocaml.js 105
 function caml_js_eval () {return eval(arguments[0]);}
 //Provides: caml_js_eval_string
 function caml_js_eval_string () {return eval(arguments[0].toString());}
+
+//Provides: CamlException
+function CamlException(object,err) {
+    if (Error.captureStackTrace != undefined) {
+	Error.captureStackTrace(this, CamlException);
+    } else if (err.stack != undefined) {
+	this.stack = err.stack;
+    }
+    this.name = "CamlException";
+    this.message = object.toString();
+    this.exn = object;
+    object.exn = this;
+};
+CamlException.prototype = Error.prototype;
+

Context:

[TAG 1.0.3
gregoire.henry@pps.jussieu.fr**20110715143409
 Ignore-this: edf8f46d1e7b629f53c4da8545fcf14f
] 
Patch bundle hash:
321fa542cc4619837e83fb847e013ddff0b79684
