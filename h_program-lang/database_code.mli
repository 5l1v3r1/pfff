
type entity_kind = 
  | Function | Class | Module | Type | Constant | Global
  | Method | StaticMethod
  | File | Dir | MultiDirs

type entity_id = int

type entity = {
  e_kind: entity_kind;
  e_name: string;
  e_fullname: string; (* can be empty *)
  e_file: Common.filename;
  e_pos: Common.filepos;
  mutable e_number_external_users: int;
  mutable e_good_examples_of_use: entity_id list;
}

(* The dirs and filenames in this database are in readable format
 * so one can use the database generated by another user on
 * its own repository (this also saves some space in the generated
 * JSON file. Only root is in absolute path format.
 *)
type database = {
  root: Common.dirname;

  dirs: (Common.filename * int) list;
  files: (Common.filename * int) list;

  entities: entity array;
}

val empty_database: unit -> database

(* classic load/save *)
val load_database: 
  Common.filename -> database
val save_database: 
  ?readable_db:bool ->
  database -> Common.filename -> unit

(* when we want to analyze multi-languages projets *)
val merge_databases: database -> database -> database

val alldirs_and_parent_dirs_of_relative_dirs: 
  Common.dirname list -> Common.dirname list

(* for displaying a summary of the important functions in a file *)
val build_top_k_sorted_entities_per_file:
  k:int -> entity array -> (Common.filename, entity list) Hashtbl.t

val files_and_dirs_and_sorted_entities_for_completion:
  threshold_too_many_entities:int -> database -> entity list

val adjust_method_external_users: 
  entity array -> unit

val entity_kind_of_highlight_category: 
  Highlight_code.category -> entity_kind

val string_of_entity_kind: entity_kind -> string

val json_of_entity: entity -> Json_type.t

