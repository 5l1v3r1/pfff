{
(* Yoann Padioleau
 *
 * Copyright (C) 2010 Facebook
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file license.txt.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * license.txt for more details.
 *)

open Common 

open Archi_code

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)

(* This code assumes we are called with a string enclosed by "/"
 * as in /foo.php/ so it's easy to specify the beginning or
 * end of a string (ocamllex does not handle ^ or $).
 * 
 * It also assumes the string has been lowercased. Note also that
 * the filenames has been reversed, for instance a/b/foo.php become
 * /foo.php/b/a/ because we want to return the most specialized category.
 * 
 * Note that ocamllex will try the longest match and we will return
 * the leftmost match so on "common.mli" for instance the
 * "common" rule will be applied before the .mli rule.
 *)

}

(*****************************************************************************)

rule category = parse
  | ".vcproj/" { Building }
  | ".thrift/" { Ffi }

  (* pad specific, noweb *)
  | ".nw/" 
  | ".pdf/" 
  | ".rtf/"
      { Doc }

  | ".sql/"
      { Storage }

  | ".mli/"
  | ".h/"
      { Interface }
  

  (* ml specific ? *)
  | ".depend" { Building }
  | "ocamlmakefile" { BoilerPlate }

  | "makefile" 
  | "/configure" 
      { Building }

  (* linux specific ? *)
  | "kconfig" { Building }

  | "/changes" 
      { Doc }

  | "/license" 
  | "/copyright" 
      { BoilerPlate }

  (* gnu software boilerplate *)
  | "/copying/" 
  | "/about-nls/" 
  | "/shtool/"
      { BoilerPlate }



  (* pad specific ? *)
  | "/main_" { Main }
  | "flag_" { Configuration }
  | "test_" { Test }


  | "/main." { Main }
  | "/init." { Init }

  (* facebook specific *)
  | "/home.php" { Main }
  | "/profile.php" { Main }


  | "core" { Core }
  | "/base" { Core }

  | "mysql" { Storage }
  | "database" { Storage }

  | "security" { Security }

  | "lite" { MiniLite }
  | "mini" { MiniLite }

  | "/tests/" 
  | "/test/" 
  | "/t/" 
  | "/testsuite/" 
      { Test }

  (* facebook specific a little *)
  | "/__tests__/" { Test }

  (* pad specific *)
  | "pleac" { Test }

  | "/docs/"
  | "/doc/" 
      { Doc }

  | "unittest" { Unittester }
  (* can not just say "profil" because at facebook profile means
   * something else
   *)
  | "profiling" { Profiler }

  | "stdlib" { Core }
  | "util" { Utils }
  | "/base" { Utils }
  | "common" { Utils }
  (* Exact "lib", Utils; *)

  (* Can not say just thrift here because we could also want
   * to look at the thrift source itself. So really just
   * want to hide all generated code.
   * 
   * The code is actually in thrift/packages but because the filename
   * is reverse, it's /packages/thrift/ here
   *)
 | "/packages/thrift/" { AutoGenerated }

 | "/thriftdoc/" { AutoGenerated }

  (* thrift auto generated files *)
 | "/gen-" { AutoGenerated }
  (* for some projects I don't remember *)
 | "/gen/" { AutoGenerated }


  | "storage" 
  | "/db/"
  | "/fs/"
  | "/database/"

  (* pad specific ... *)
  | "bdb/"
      { Storage }

  (* Exact "data", Storage; *)
  | "constants" { Constants }
  | "mutators"
  | "accessors"
      { GetSet }

  | "logging" { Logging }

  | "third-party"
  | "third_party" 
      { ThirdParty }

  | "external" { ThirdParty }
  | "legacy" { ThirdParty }
  | "deprecated" { Legacy }

  (* pad specfic *)
  | "ocamlextra" { ThirdParty }
  | "/score_parsing" { Data }
  | "/score_tests" { Data }

  | "/data/" { Data }

  (* facebook specific ? *)
  | "/si/"
  | "site_integrity" 
      { Security }

  (* as in OCaml asmcomp/ directory *)
  | "x86"
  | "i386"
  | "ia64"
  | "mips"
  | "m68k"
  | "sparc"
  | "amd64"
  | "arm"
  | "hppa"
  (* linux source *)
  | "parisc"
  | "s390"
  | "blackfin"
  | "/ppc/"
  | "power"
  | "alpha" 
      { Architecture }

  | "/ui/"
  | "/gui/" 
  | "visual"
  | "image"
  | "display"
  | "render"
  | "/video/"
  | "/media/"
      { Ui }

  | "intern" { Intern }
  (* as in Linux *)
  | "documentation" { Doc }
  (* tofix ? network ? memory ?  so mm/ and net/ are colored *)
  | "/net/" { Intern }

  | "/old/"
  | "/backup/"
      { Legacy }

  | "/tmp/"
      { Legacy }

  | _ { 
      category lexbuf
    }
  | eof { Regular }
