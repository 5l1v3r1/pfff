
%old: type phpfunction_type, but now closure so directly included

<<type_php.ml>>=
<<Facebook copyright>>

open Common
(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)

(* 
 * It would be more convenient to move this file elsewhere like in analyse_php/
 * but we want our AST to contain type annotations so it's convenient to 
 * have the type definition of PHP types here in parsing_php/. 
 * If later we decide to make a 'a expr, 'a stmt, and have a convenient 
 * mapper between some 'a expr to 'b expr, then maybe we can move
 * this file to a better place.
 * 
 * TODO? have a scalar supertype ? that enclose string/int/bool ?
 * after automatic string interpolation of basic types are useful.
 * Having to do those %s %d in ocaml sometimes sux.
 *)

(*****************************************************************************)
(* Types *)
(*****************************************************************************)
<<type phptype>>

exception BadType of string

(*****************************************************************************)
(* String of *)
(*****************************************************************************)

(* generated by ocamltarzan *)

let rec vof_phptype v = Ocaml.vof_list vof_phptypebis v
and vof_phptypebis =
  function
  | Basic v1 -> let v1 = vof_basictype v1 in Ocaml.VSum (("Basic", [ v1 ]))
  | ArrayFamily v1 ->
      let v1 = vof_arraytype v1 in Ocaml.VSum (("ArrayFamily", [ v1 ]))
  | Object v1 ->
      let v1 = Ocaml.vof_list Ocaml.vof_string v1
      in Ocaml.VSum (("Object", [ v1 ]))
  | Resource -> Ocaml.VSum (("Resource", []))
  | Function ((v1, v2)) ->
      let v1 = Ocaml.vof_list (Ocaml.vof_option vof_phptype) v1
      and v2 = vof_phptype v2
      in Ocaml.VSum (("Function", [ v1; v2 ]))
  | Null -> Ocaml.VSum (("Null", []))
  | TypeVar v1 ->
      let v1 = Ocaml.vof_string v1 in Ocaml.VSum (("TypeVar", [ v1 ]))
  | Unknown -> Ocaml.VSum (("Unknown", []))
  | Top -> Ocaml.VSum (("Top", []))
and vof_basictype =
  function
  | Bool -> Ocaml.VSum (("Bool", []))
  | Int -> Ocaml.VSum (("Int", []))
  | Float -> Ocaml.VSum (("Float", []))
  | String -> Ocaml.VSum (("String", []))
  | Unit -> Ocaml.VSum (("Unit", []))
and vof_arraytype =
  function
  | Array v1 -> let v1 = vof_phptype v1 in Ocaml.VSum (("Array", [ v1 ]))
  | Hash v1 -> let v1 = vof_phptype v1 in Ocaml.VSum (("Hash", [ v1 ]))
  | Record v1 ->
      let v1 =
        Ocaml.vof_list
          (fun (v1, v2) ->
             let v1 = Ocaml.vof_string v1
             and v2 = vof_phptype v2
             in Ocaml.VTuple [ v1; v2 ])
          v1
      in Ocaml.VSum (("Record", [ v1 ]))
  

let string_of_phptype t =
  let v = vof_phptype t in
  Ocaml.string_of_v v
@ 
