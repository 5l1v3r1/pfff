
<<ast_php.ml>>=
<<Facebook copyright>>

open Common

open Parse_info
(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)

(* 
 * COUPLING: 
 * 
 * Note that some programs in other languages (e.g. Python) may
 * use some of the pfff binding, or JSON/sexp exporters, so if you
 * change the name of constructors in this file, don't forget
 * to regenerate the JSON/sexp exporters, but also to modify the
 * dependent programs !!!! An easier solution is to not change this
 * file, or to only add new constructors.
 *)

(*****************************************************************************)
(* The AST related types *)
(*****************************************************************************)
(* ------------------------------------------------------------------------- *)
(* Token/info *)
(* ------------------------------------------------------------------------- *)
<<AST info>>
(* ------------------------------------------------------------------------- *)
(* Name. See also analyze_php/namespace_php.ml  *)
(* ------------------------------------------------------------------------- *)
<<AST name>>
(* ------------------------------------------------------------------------- *)
(* Type. This is used in Cast, but for type analysis see type_php.ml  *)
(* ------------------------------------------------------------------------- *)
<<AST type>>
(* ------------------------------------------------------------------------- *)
(* Expression *)
(* ------------------------------------------------------------------------- *)
<<AST expression>>
(* ------------------------------------------------------------------------- *)
(* Variable (which in fact also contains function calls) *)
(* ------------------------------------------------------------------------- *)
<<AST lvalue>>
(* ------------------------------------------------------------------------- *)
(* Statement *)
(* ------------------------------------------------------------------------- *)
<<AST statement>>
(* ------------------------------------------------------------------------- *)
(* Function definition *)
(* ------------------------------------------------------------------------- *)
<<AST function definition>>
<<AST lambda definition>>
(* ------------------------------------------------------------------------- *)
(* Class definition *)
(* ------------------------------------------------------------------------- *)
<<AST class definition>>
(* ------------------------------------------------------------------------- *)
(* Other declarations *)
(* ------------------------------------------------------------------------- *)
<<AST other declaration>>
(* ------------------------------------------------------------------------- *)
(* Stmt bis *)
(* ------------------------------------------------------------------------- *)
<<AST statement bis>>
(* ------------------------------------------------------------------------- *)
(* phpext: *)
(* ------------------------------------------------------------------------- *)
<<AST phpext>>
(* ------------------------------------------------------------------------- *)
(* The toplevels elements *)
(* ------------------------------------------------------------------------- *)
<<AST toplevel>>

(*****************************************************************************)
(* Comments *)
(*****************************************************************************)
@ 

<<ast_php.ml>>=
(*****************************************************************************)
(* Some constructors *)
(*****************************************************************************)
let noType () = ({ t = [Type_php.Unknown]})
let noTypeVar () = ({ tlval = [Type_php.Unknown]})
let noScope () = ref (Scope_php.NoScope)
let noFtype () = ([Type_php.Unknown])

let fakeInfo ?(next_to=None) str = 
  { 
    pinfo = FakeTokStr (str, next_to);
    transfo = NoTransfo;
    comments = ();
  }
@ 

<<ast_php.ml>>=
(*****************************************************************************)
(* Wrappers *)
(*****************************************************************************)

let unwrap = fst

let unparen (a,b,c) = b
let unbrace = unparen
let unbracket = unparen

let uncomma xs = Common.map_filter (function
  | Left e -> Some e
  | Right info -> None
  ) xs

let map_paren f (lp, x, rp) = (lp, f x, rp)
let map_comma_list f xs = List.map (fun x ->
  match x with
  | Left e -> Left (f e)
  | Right tok -> Right tok
  )
  xs

let unarg arg = 
  match arg with
  | Arg e -> e
  | ArgRef _ -> failwith "Found a ArgRef"

let unmodifiers class_vars = 
  match class_vars with
  | NoModifiers _ -> []
  | VModifiers xs -> List.map unwrap xs

@ 


<<ast_php.ml>>=
let untype (e, xinfo) = e
@ 

<<ast_php.ml>>=
let parse_info_of_info ii = 
  match ii.pinfo with
  | OriginTok pinfo -> pinfo
  (* TODO ? dangerous ? *)
  | ExpandedTok (pinfo_pp, pinfo_orig, offset) -> pinfo_pp
  | FakeTokStr _
  | Ab 
    -> failwith "parse_info_of_info: no OriginTok"
@ 

<<ast_php.ml>>=
(* todo: return a Real | Virt position ? *)
let pos_of_info  ii = (parse_info_of_info ii).Common.charpos

let str_of_info  ii = (parse_info_of_info ii).Common.str 
let file_of_info ii = (parse_info_of_info ii).Common.file
let line_of_info ii = (parse_info_of_info ii).Common.line
let col_of_info  ii = (parse_info_of_info ii).Common.column
@ 

<<ast_php.ml>>=
let pinfo_of_info ii = ii.pinfo
@ 

<<ast_php.ml>>=
let rewrap_str s ii =  
  {ii with pinfo =
    (match ii.pinfo with
    | OriginTok pi -> 
        OriginTok { pi with Common.str = s;}
    | FakeTokStr (s, next_to) -> 
        FakeTokStr (s, next_to)
    | Ab -> Ab
    | ExpandedTok _ -> 
        failwith "rewrap_str: ExpandedTok not allowed here"
    )
  }
let rewrap_parse_info pi ii =  
  {ii with pinfo =
    (match ii.pinfo with
    | OriginTok _oldpi -> OriginTok pi
    | FakeTokStr _  | Ab | ExpandedTok _ -> 
        failwith "rewrap_parseinfo: no OriginTok"
    )
  }
@ 

<<ast_php.ml>>=
(* for error reporting *) 
let string_of_info ii = 
  Common.string_of_parse_info (parse_info_of_info ii)

let is_origintok ii = 
  match ii.pinfo with
  | OriginTok pi -> true
  | FakeTokStr _ | Ab | ExpandedTok _ -> false


type posrv = 
  | Real of Common.parse_info 
  | Virt of 
      Common.parse_info (* last real info before expanded tok *) * 
      int (* virtual offset *)

let compare_pos ii1 ii2 =
  let get_pos = function
    | OriginTok pi -> Real pi
    | FakeTokStr (s, Some (pi_orig, offset)) ->
        Virt (pi_orig, offset)
    | FakeTokStr _
    | Ab  
      -> failwith "get_pos: Ab or FakeTok"
    | ExpandedTok (pi_pp, pi_orig, offset) ->
        Virt (pi_orig, offset)
  in
  let pos1 = get_pos (pinfo_of_info ii1) in
  let pos2 = get_pos (pinfo_of_info ii2) in
  match (pos1,pos2) with
  | (Real p1, Real p2) ->
      compare p1.Common.charpos p2.Common.charpos
  | (Virt (p1,_), Real p2) ->
      if (compare p1.Common.charpos p2.Common.charpos) =|= (-1) 
      then (-1) 
      else 1
  | (Real p1, Virt (p2,_)) ->
      if (compare p1.Common.charpos p2.Common.charpos) =|= 1 
      then 1 
      else (-1)
  | (Virt (p1,o1), Virt (p2,o2)) ->
      let poi1 = p1.Common.charpos in
      let poi2 = p2.Common.charpos in
      match compare poi1 poi2 with
      |	-1 -> -1
      |	0 -> compare o1 o2
      |	1 -> 1
      | _ -> raise Impossible

@ 

<<ast_php.ml>>=
let get_type (e: expr) = (snd e).t
let set_type (e: expr) (ty: Type_php.phptype) = 
  (snd e).t <- ty
@ 

<<ast_php.ml>>=
(*****************************************************************************)
(* Abstract line *)
(*****************************************************************************)

(* When we have extended the AST to add some info about the tokens,
 * such as its line number in the file, we can not use anymore the
 * ocaml '=' to compare Ast elements. To overcome this problem, to be
 * able to use again '=', we just have to get rid of all those extra
 * information, to "abstract those line" (al) information.
 *)

let al_info x = 
  { x with pinfo = Ab }
@ 

<<ast_php.ml>>=
(*****************************************************************************)
(* Views *)
(*****************************************************************************)

(* examples: 
 * inline more static funcall in expr type or variable type
 * 
 *)
@ 

<<ast_php.ml>>=
(*****************************************************************************)
(* Helpers, could also be put in lib_parsing.ml instead *)
(*****************************************************************************)
let name e = 
  match e with
  | Name x -> unwrap x
  | XhpName (xs, _tok) -> 
      ":" ^ (Common.join ":" xs)

let dname (DName x) = unwrap x
@ 

<<ast_php.ml>>=
let info_of_name e = 
  match e with 
  | (Name (x,y)) -> y
  | (XhpName (x,y)) -> y
let info_of_dname (DName (x,y)) = y
@

