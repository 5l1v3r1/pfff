<<dataflow_php_array.ml>>=
<<Facebook copyright>>

open Common 

open Ast_php

module Ast = Ast_php

module Db = Database_php
module Cg = Callgraph_php

module CFG = Controlflow_pil

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)

(* The goal of this module is to help in tracking all the usage of 
 * certain values, e.g. values returned by a function. 
 * 
 * 'grep' can display the direct sites where a function is called but 
 * can not track then how the result of this function is further used. 
 * Knowing such information can help evaluate the effort it would take 
 * to refactor some functions.
 * 
 * For now we are mostly interested in functions returning arrays and
 * tracking the usages of this array.
 * 
 * todo: right now the assignement analysis is very coarse grained.
 * If you do $x['foo'] = foo() then we consider that $x depends
 * on foo() and we will then track every use of $x. We should be 
 * more precise and add dependencies only when the 'foo' field of
 * $x is used.
 *)

(*****************************************************************************)
(* Types *)
(*****************************************************************************)

(* position information about a token of the AST *)
type info = Entity_php.filepos

type usage = (node, leaf) Common.tree
 and leaf = 
   | Get of info
 and node = 
   | Assign of info
   | Return of info
   | Call of info
 (* with tarzan *)

(*****************************************************************************)
(* Extractors *)
(*****************************************************************************)

let filepos_of_info info = 
  let pinfo = Ast.parse_info_of_info info in
  Entity_php.filepos_of_parse_info pinfo

let vars_in_v v = 
  (* ugly hack using reflection
   * todo: generate visitors for Pil and Controlflow_pil
   *)
  let all_v_dnames = ref [] in
  let _ = v +> Ocaml.map_v ~f:(fun ~k v ->
    match v with
    | Ocaml.VSum (("Var", [v_dname])) ->
        Common.push2 v_dname all_v_dnames;
        v
    | _ -> k v
  )
  in
  let all_dnames = !all_v_dnames +> List.map Meta_ast_php.dname_ofv in
  all_dnames +> List.map Ast.dname
  
let vars_in_arguments args = 
  let v = Ocaml.vof_list Pil.vof_argument args in
  vars_in_v v

let vars_in_expr e = 
  let v = Pil.vof_expr e in
  vars_in_v v


let var_name_of_var var = 
  match var with
  | Pil.Var dname ->
      Ast.dname dname
  | Pil.This _ -> raise Todo


let var_name_of_lval lval = 
  match Ast.untype lval with
  | Pil.VVar var -> var_name_of_var var

  (* todo: this is too coarse grained. We whould be more precise when
   * tracking arrays or objects
   *)
  | Pil.ArrayAccess (var, _)
  | Pil.ObjAccess (var, _) ->
      var_name_of_var var

  | Pil.IndirectAccess (var, _) ->
      raise Todo

  | Pil.VQualifier _ -> raise Todo


(* The PIL does not correspond to the original file. Some fake 
 * intermediate variables are sometimes introduced. We want to 
 * extract relevant position, not fake position, so may have
 * to visit the node.
 *)
let info_of_node n = 
  let v = CFG.vof_node n in
  let all_infos = ref [] in
  (* ugly hack using reflection
   * todo: generate visitors for Pil and Controlflow_pil
   *)
  let _ = v +> Ocaml.map_v ~f:(fun ~k v ->
    match v with
    | Ocaml.VDict xs when xs +> List.exists (fun (s, _) -> s = "pinfo") ->
        Common.push2 v all_infos;
        v
    | _ -> k v
  )
  in
  let all_infos = !all_infos +> List.map Meta_ast_php.info_ofv in
  let origins = all_infos +> List.filter Ast_php.is_origintok in
  match origins with
  | x::xs -> filepos_of_info x
  | [] -> Entity_php.filepos_of_parse_info (Common.fake_parse_info)

(*****************************************************************************)
(* Helpers *)
(*****************************************************************************)

let node_contain_funcall func_name n = 
  match n.CFG.n with
  | CFG.Instr instr ->
      (match instr with
      | Pil.Call (lval, kind, args) ->
          (match kind with
          | Pil.SimpleCall name ->
              let s = Ast.name name in
              s = func_name
          | _ -> false
          )
      | Pil.Eval _ | Pil.Assign _ -> false
      )
  | _ -> false


let extract_var_name_assigned_of_node n = 
  match n.CFG.n with
  | CFG.Instr instr ->
      (match instr with
      | Pil.Call (lval, _, _)
      | Pil.Assign (lval, _, _) ->
          var_name_of_lval lval
      | Pil.Eval _ -> raise Todo
      )
  | _ -> 
      failwith "extract_var_name_assigned_of_node: not a instr"


let node_contain_variable_rhs var_name n = 
  let vars = 
    match n.CFG.n with
    | CFG.Instr instr ->
        (match instr with
        | Pil.Call (_lval, _kind, args) ->
            vars_in_arguments args
        | Pil.Assign (lval, _kind, e) ->
            vars_in_expr e
        | Pil.Eval _ ->
            raise Todo
        )
    | CFG.Echo es -> es +> List.map vars_in_expr +> List.flatten
    | CFG.Return eopt -> 
        (match eopt with | None -> [] | Some e -> vars_in_expr e)

    | CFG.WhileHeader e
    | CFG.IfHeader e
        ->
        vars_in_expr e

    | CFG.Throw|CFG.TryHeader|CFG.Jump ->
        raise Todo


    | CFG.Join
    | CFG.FalseNode | CFG.TrueNode 
    | CFG.Exit | CFG.Enter
        -> []
  in
  List.mem var_name vars
          

let node_has_variable_lhs n = 
  match n.CFG.n with
  | CFG.Instr instr ->
      (match instr with
      | Pil.Call (lval, _, _)
      | Pil.Assign (lval, _, _) ->
          Some (var_name_of_lval lval)
      | Pil.Eval _ -> raise Todo
      )
  | _ -> 
      None

(*****************************************************************************)
(* String of *)
(*****************************************************************************)

(* todo: should move it in commons/ *)

let rec vof_tree _of_a _of_b =
  function
  | Node ((v1, v2)) ->
      let v1 = _of_a v1
      and v2 = Ocaml.vof_list (vof_tree _of_a _of_b) v2
      in Ocaml.VSum (("Node", [ v1; v2 ]))
  | Leaf v1 -> let v1 = _of_b v1 in Ocaml.VSum (("Leaf", [ v1 ]))

let vof_info = Entity_php.vof_filepos

let rec vof_usage v = vof_tree vof_node vof_leaf v
and vof_leaf =
  function | Get v1 -> let v1 = vof_info v1 in Ocaml.VSum (("Get", [ v1 ]))
and vof_node =
  function
  | Assign v1 -> let v1 = vof_info v1 in Ocaml.VSum (("Assign", [ v1 ]))
  | Return v1 -> let v1 = vof_info v1 in Ocaml.VSum (("Return", [ v1 ]))
  | Call v1 -> let v1 = vof_info v1 in Ocaml.VSum (("Call", [ v1 ]))


let (string_of_usage: usage -> string) = fun usage ->
  usage +> vof_usage +> Ocaml.string_of_v

let (print_usage: usage -> unit) = fun usage ->
  pr2 (string_of_usage usage)


(*****************************************************************************)
(* Algorithm *)
(*****************************************************************************)

let rec (track_function_call: string -> Database_php.database -> usage) = 
 fun func_name db ->

   let func_id = Db.id_of_function func_name db in
   let info_func = db.Db.fullid_of_id#assoc func_id in

   let callers = Db.callers_of_id func_id db in
   (* The db stores every occurences of a call, but here we redo anyway
    * the search of the apropriate node, so we use uniq
    *)
   let callers = callers +> List.map Cg.id_of_callerinfo +> Common.uniq in

   let root = Return (info_func) in

   (* iterating over all callers *)
   let nodes = callers +> List.map (fun id ->

     let id_ast = Db.ast_of_id id db in

     match id_ast with
     | Ast_entity_php.Function def ->

         let pil = Pil_build.linearize_body (Ast.unbrace def.Ast.f_body) in
         let flow = Controlflow_build_pil.cfg_of_stmts pil in

         (* finding all calls *)
         let starting_nodes = 
           flow#nodes#tolist +> List.filter (fun (nodei, n) ->
             node_contain_funcall func_name n
           )
         in
         starting_nodes +> List.map (fun (nodei, n) ->
           (* todo: add in tree and recurse if was assigned to new var *)
           

           let info = info_of_node n in

           let var_name = extract_var_name_assigned_of_node n in
           let node = Assign info in
           let children = track_variable_in_cfg var_name flow nodei db in

           Common.Node (node, children)
         )


     | Ast_entity_php.Class _
     | Ast_entity_php.Interface _
     | Ast_entity_php.StmtList _
     | Ast_entity_php.Method _
     | Ast_entity_php.ClassConstant _
     | Ast_entity_php.ClassVariable _
     | Ast_entity_php.XhpDecl _
     | Ast_entity_php.Misc _
         -> raise Todo
   ) +> List.flatten
   in
   Common.Node (root, nodes)


and (track_variable_in_cfg: 
  string -> CFG.flow -> CFG.nodei (* starting point *) -> 
  Database_php.database -> usage list) = fun var_name flow starti db ->

  (* Right now we consider all successors nodes containing the 
   * var_name as a candidate for the dataflow tracking. This 
   * is better than nothing but some new assignements to this
   * variable should stop the analysis. Indeed in
   * 
   *  $x = foo ();
   *  echo $x;
   *  $x = 1;
   *  echo $x;
   * 
   * even if the last echo talks about $x, the assignement just before
   * should make it clear that there is no more dependencies towards
   * foo(). The new assignement "kills" the dependency while the
   * first one "gen"erates the dependency. This is classical
   * dataflow terminology and problems.
   * 
   * TODO: implement the kill/gen dataflow algorithm.
   *)
  let all_successors = ref [] in
  flow +> Ograph_extended.dfs_iter starti (fun nodei -> 
    Common.push2 nodei all_successors);
  
  !all_successors +> Common.map_filter (fun nodei ->
    let node = flow#nodes#assoc nodei in

    if node_contain_variable_rhs var_name node
    then
      let info = info_of_node node in
      Some (match node_has_variable_lhs node with
      | None ->
          Common.Leaf (Get info)
      | Some var_name2 ->
          let node = Assign info in
          (* let's recurse! *)
          let children = track_variable_in_cfg var_name2 flow nodei db in
          
          Common.Node (node, children)
      )
    else
      None
  )

(*****************************************************************************)
(* Main entry point *)
(*****************************************************************************)

let (track_function_result: string -> Database_php.database -> usage) = 
 fun func_name db ->
   track_function_call func_name db

@
