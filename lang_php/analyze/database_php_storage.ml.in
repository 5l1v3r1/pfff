(* Yoann Padioleau
 *
 * Copyright (C) 2010 Facebook
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file license.txt.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * license.txt for more details.
 *)

open Common

open Database_php

module Flag = Flag_analyze_php

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)

(*****************************************************************************)
(* Globals/constants *)
(*****************************************************************************)

(* note: this is not the oassoc_buffer size_buffer *)
let bdb_size_tables = 50000 


#if FEATURE_BDB==1

(*****************************************************************************)
(* Helpers persistency *)
(*****************************************************************************)

let create_bdb ?(size_buffer=800) metapath dbname env = 
  let transact () = None in
  let (fv, unv) = Common2.id, Common2.id in
  let flag_size_buffer_oassoc_buffer = size_buffer in

  Oassocbdb.create_bdb metapath dbname env transact (fv, unv) 
    flag_size_buffer_oassoc_buffer

let create_bdb_string metapath dbname env = 
  let transact () = None in
  let flag_size_buffer_oassoc_buffer = 800 in

  Oassocbdb_string.create_bdb metapath dbname env transact
    flag_size_buffer_oassoc_buffer



(* if use GDBM, but buggy: 
 *   let create_dbm metapath dbname = 
 *   Oassocdbm.create_dbm metapath dbname 
 *)


(*****************************************************************************)
(* Locking wrappers *)
(*****************************************************************************)

(* Berkeley DB and especially GDBM dont like when there is a concurrent
 * access to the same database. 
 * todo: could move in h_program-lang/ ?
 *)

exception DatabaseAlreadyLocked

let lockfile metapath = Filename.concat metapath "lockfile.lock" 

let acquire_lock metapath = 
  try Common2.acquire_file_lock (lockfile metapath)
  with Common2.FileAlreadyLocked -> raise DatabaseAlreadyLocked

let release_lock metapath = 
  Common2.release_file_lock (lockfile metapath)

(*****************************************************************************)
(* Main entry point *)
(*****************************************************************************)

let open_db metapath = 
  let metapath = Common2.chop_dirsymbol metapath in
  check_is_database_dir metapath;

  let prj = Common2.read_value (metapath ^ "/prj.raw") in
  acquire_lock metapath;
  
  (* assert (default_metapath_of_project prj = metapath); 
     pr2_gen (metapath_of_project prj,metapath);
     let metapath = metapath_of_project prj in
  *)

  (* For the moment bdb seems 2x times faster than gdbm on linux/fs/. Maybe
   * because oassocbdb also use by default the oassoc_buffer cache.
   * And for the size ? bigger ?
   *)
    let env = Bdb.Env.create []  in
    
    Bdb.env_set_max_stuff env bdb_size_tables;
    Bdb.Env.env_open env metapath 
      [Bdb.Env.DB_CREATE;Bdb.Env.DB_INIT_LOG;Bdb.Env.DB_INIT_LOCK;
       Bdb.Env.DB_INIT_MPOOL;
       (* does it help to comment that ? real opti? *)
       Bdb.Env.DB_INIT_TXN;Bdb.Env.DB_RECOVER;
      ] 
      (Int32.of_int 0);  

    if !Flag.debug_bdb then pr2 "env opened";

    (* coupling: if add new table, dont forget to add the code that 
     * close the associated bdb table !!!! and code in flush_db() !!!!!
     *)

    let toplevels_db, toplevels_info = create_bdb metapath "/toplevels" env in
    let asts_db, asts_info = create_bdb metapath "/asts" env in

    let file_to_ids_db, file_to_ids_info  = create_bdb metapath "/file_to_ids" env in
    let file_info_db, file_info_info  = create_bdb metapath "/file_info" env in

    let fullid_db, fullid_info   = 
      create_bdb ~size_buffer:5000 metapath "/fullid" env in
    let id_of_fullid_db, id_of_fullid_info   = 
      create_bdb metapath "/id_of_fullid" env in
    let enclosing_db, enclosing_info   = 
      create_bdb metapath "/enclosing" env in
    let children_db, children_info   = 
      create_bdb metapath "/children_ids" env in

    (* opti: important to have bigger buffer for the very randomly 
     * accessed callers_info table, especially in add_callees_of_f *)
    let callers_db, callers_info = 
      create_bdb ~size_buffer:50000 metapath "/callers" env in
    (* this one is less randomly accessed *)
    let callees_db, callees_info = 
      create_bdb ~size_buffer:10000 metapath "/callees" env in

    let class_users_db, class_users_info = 
      create_bdb metapath "/class_users" env in
    let define_users_db, define_users_info = 
      create_bdb metapath "/define_users" env in

    let extenders_db, extenders_info = 
      create_bdb metapath "/extenders_of_class" env in
    let implementers_db, implementers_info = 
      create_bdb metapath "/implementers_of_interface" env in

    let includers_db, includers_info = 
      create_bdb metapath "/includers_of_file" env in
    let includees_db, includees_info = 
      create_bdb metapath "/includees_of_file" env in


    (* opti: important to have bigger buffer for tables used in 
     * function ids_with_kinds__of_string *)
    let fdef_db, fdef_info = 
      create_bdb ~size_buffer:30000 metapath "/name_defs" env in

    let kinds_db, kinds_info = 
      create_bdb ~size_buffer:30000 metapath "/id_kinds" env in

    let types_db, types_info = 
      create_bdb ~size_buffer:3000 metapath "/types" env in

    let names_db, names_info = create_bdb metapath "/names" env in

    let phpnames_db, phpnames_info = create_bdb metapath "/phpnames" env in

    let symbols_db, symbols_info = 
      create_bdb_string metapath "/symbols" env in

    let cststrings_db, cststrings_info = 
      create_bdb_string metapath "/strings" env in

    let str_objects_db, str_objects_info       = create_bdb metapath "/str_objects" env in
    let tokens_objects_db, tokens_objects_info = create_bdb metapath "/tokens_objects" env in
    let range_objects_db, range_objects_info   = create_bdb metapath "/range_objects" env in

    let extra_db, extra_info = 
      create_bdb ~size_buffer:10000 metapath "/extra" env in

(*
    let comments_db, comments_info = create_bdb metapath "/comments" env in

    let word_idx_db, word_idx_info = 
      create_bdb ~size_buffer:30000 metapath "/words_idx" env in



    (* opti, like callers_db, quite randomly accessed *)
    let globals_db, globals_info = 
      create_bdb ~size_buffer:1000 metapath "/globals" env in


    let structs_db, structs_info = 
      create_bdb ~size_buffer:1000 metapath "/structs" env in
    let fields_db, fields_info = 
      create_bdb ~size_buffer:1000 metapath "/fields" env in
    let typedefs_db, typedefs_info = 
      create_bdb ~size_buffer:1000 metapath "/typedefs" env in

*)

    if !Flag.debug_bdb then pr2 "finished opened individual dbs";

    let flush_db () =
      
      toplevels_info#misc_op_hook2;
      asts_info#misc_op_hook2;

      file_to_ids_info#misc_op_hook2;
      file_info_info#misc_op_hook2;

      fullid_info#misc_op_hook2;
      id_of_fullid_info#misc_op_hook2;

      enclosing_info#misc_op_hook2;
      children_info#misc_op_hook2;

      callers_info#misc_op_hook2;
      callees_info#misc_op_hook2;

      class_users_info#misc_op_hook2;
      define_users_info#misc_op_hook2;

      extenders_info#misc_op_hook2;
      implementers_info#misc_op_hook2;

      includees_info#misc_op_hook2;
      includers_info#misc_op_hook2;

      fdef_info#misc_op_hook2;
      kinds_info#misc_op_hook2;
      types_info#misc_op_hook2;
      names_info#misc_op_hook2;
      phpnames_info#misc_op_hook2;

      symbols_info#misc_op_hook2;
      cststrings_info#misc_op_hook2;

      str_objects_info#misc_op_hook2;
      tokens_objects_info#misc_op_hook2;
      range_objects_info#misc_op_hook2;

      extra_info#misc_op_hook2;

(*
      comments_info#misc_op_hook2;
      word_idx_info#misc_op_hook2;


      globals_info#misc_op_hook2;
      structs_info#misc_op_hook2;
      fields_info#misc_op_hook2;
      typedefs_info#misc_op_hook2;
*)
    in

    let free_id = 1 in (* PPP *)

    { 
      db_support = Disk metapath;
      project = prj;

      next_free_id = free_id;

      fullid_of_id = fullid_info;
      id_of_fullid = id_of_fullid_info;
      enclosing_id = enclosing_info;
      children_ids = children_info;

      file_to_topids = file_to_ids_info;
      file_info = file_info_info;

      symbols = symbols_info;
      strings = cststrings_info;

      defs = {
        toplevels = toplevels_info;
        asts = asts_info;

        name_defs = fdef_info;
        id_kind = kinds_info;
        id_type = types_info;
        id_name = names_info;
        id_phpname = phpnames_info;

        str_of_topid = str_objects_info;
        tokens_of_topid = tokens_objects_info;
        range_of_topid = range_objects_info;

        extra = extra_info;

        (*
        comments_of_ast = comments_info;
        word_to_ids = word_idx_info;

          ftype = types_info;
        *)
      };
      
      uses = {
        callers_of_f = callers_info;
        callees_of_f = callees_info;

        users_of_class = class_users_info;
        users_of_define = define_users_info;

        extenders_of_class = extenders_info;
        implementers_of_interface = implementers_info;

        includers_of_file = includers_info;
        includees_of_file = includees_info;
      };
      (*
      user_of_global = globals_info;
      user_of_field = fields_info;
      *)

      flush_db = flush_db;
      close_hook = (fun () -> 
        flush_db();

        Bdb.Db.close toplevels_db [];
        Bdb.Db.close asts_db [];
        
        Bdb.Db.close file_to_ids_db [];
        Bdb.Db.close file_info_db [];

        Bdb.Db.close fullid_db [];
        Bdb.Db.close id_of_fullid_db [];
        Bdb.Db.close enclosing_db [];
        Bdb.Db.close children_db [];

        Bdb.Db.close callers_db [];
        Bdb.Db.close callees_db [];

        Bdb.Db.close class_users_db [];
        Bdb.Db.close define_users_db [];

        Bdb.Db.close extenders_db [];
        Bdb.Db.close implementers_db [];

        Bdb.Db.close includers_db [];
        Bdb.Db.close includees_db [];

        Bdb.Db.close fdef_db [];
        Bdb.Db.close kinds_db [];
        Bdb.Db.close types_db [];
        Bdb.Db.close names_db [];
        Bdb.Db.close phpnames_db [];

        Bdb.Db.close cststrings_db [];
        Bdb.Db.close symbols_db [];

        Bdb.Db.close str_objects_db [];
        Bdb.Db.close tokens_objects_db [];
        Bdb.Db.close range_objects_db [];
        Bdb.Db.close extra_db [];

        (*

        Bdb.Db.close comments_db [];
        Bdb.Db.close word_idx_db [];


        Bdb.Db.close globals_db [];

        Bdb.Db.close structs_db [];
        Bdb.Db.close fields_db [];
        Bdb.Db.close typedefs_db [];
        *)

        Bdb.Env.close env [];

        release_lock metapath;

      );
    }




let set_link () = 
  Database_php._current_open_db_backend := open_db

#else 

let open_db dir =
  failwith "use configure -bdb"

let set_link () = 
  ()

#endif

