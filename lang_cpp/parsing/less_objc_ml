 /*(* objcext: *)*/
 | message_expression  { mk_e(ExprTodo) noii }
 | protocol_expression { mk_e(ExprTodo) noii }
 | selector_expression { mk_e(ExprTodo) noii }
 | encode_expression   { mk_e(ExprTodo) noii }

/*(*----------------------------*)*/
/*(*2 objcext: *)*/
/*(*----------------------------*)*/

message_expression: TOCro receiver message_selector TCCro { }

receiver: 
 | expr { }
 | enum_name_or_typedef_name_or_simple_class_name { }
 /*TODO super */

message_selector:
 | selector { }
 | keyword_argument_list { }

keyword_argument_list:
 | keyword_argument { }
 | keyword_argument_list keyword_argument { }

keyword_argument:
 | selector TCol expr { }
 /*(* TODO added cos wrong typedef detection *)*/
 | selector TCol type_id { }
 | TCol expr { } 

protocol_expression: TAt_protocol TOPar protocol_name TCPar { }

selector_expression: TAt_selector TOPar selector_name TCPar { }

selector_name:
 | selector { }
 | keyword_name_list { }

keyword_name_list:
 | keyword_name { }
 | keyword_name_list keyword_name { }

keyword_name:
 | selector TCol { }
 | TCol { }

encode_expression: TAt_encode TOPar encode_name TCPar { }

/*(* TODO: should be just type_name *)*/
encode_name: ident { }



/*(*************************************************************************)*/
/*(*1 Class, Objective C *)*/
/*(*************************************************************************)*/

class_interface:
 TAt_interface TIdent super_opt  protocol_reference_list_opt 
 instance_variables_opt
 interface_declaration_list_opt
 TAt_end 
  { }

class_implementation:
 TAt_implementation TIdent super_opt
 instance_variables_opt
 implementation_definition_list_opt
 TAt_end
  { }

category_interface:
 TAt_interface TIdent TOPar TIdent TCPar protocol_reference_list_opt 
 interface_declaration_list_opt
 TAt_end
  { }

category_implementation:
 TAt_implementation TIdent TOPar TIdent TCPar
 implementation_definition_list_opt
 TAt_end
 { }

protocol_declaration:
 TAt_protocol TIdent protocol_reference_list_opt 
 interface_declaration_list_opt
 TAt_end
 { }

/*(* not in official grammar *)*/
protocol_small_declaration:
 TAt_protocol ident TPtVirg { }

class_declaration_list:
 TAt_class class_list TPtVirg { }

class_list:
 | ident { }
 | class_list TComma ident { }

super_opt:
 | TCol TIdent { }
 | /*(*empty*)*/ { }

protocol_reference: TInf protocol_list TSup { }

protocol_list:
 | protocol_name { }
 | protocol_list TComma protocol_name { }

protocol_name: ident { }
                     

interface_declaration: 
 | declaration { }
 | method_declaration { }
 | property_declaration { }

method_declaration:
 | class_method_declaration { }
 | instance_method_declaration { }

property_declaration: 
 TAt_property TOPar property_list TCPar 
  decl_spec declarator TPtVirg { }

property_list:
 | property_name { }
 | property_list TComma property_name { }

property_name: ident { }

class_method_declaration: TPlus method_type_opt method_selector TPtVirg 
  { }

instance_method_declaration: TMinus method_type_opt method_selector TPtVirg
  { }

method_type: TOPar type_id TCPar { }

method_selector: 
 | unary_selector { }
 | keyword_selector { }

unary_selector: selector { }

keyword_selector: 
 | keyword_declarator { }
 | keyword_selector keyword_declarator { }

/*(* we put ident here, not TIdent, because the typedef heuristic
   * will flag many idents as typedefs
   * TODO: fix the heuristic to not be applied on objective C region?
   *)*/
keyword_declarator:
 | TCol method_type_opt ident { }
 | selector TCol method_type_opt ident { }

selector: TIdent { }

method_type_opt:
 | method_type { }
 | /*(*empty*)*/ { }


protocol_reference_list_opt:
 | protocol_reference_list { }
 | /*(*empty*)*/ { }

protocol_reference_list:
 | protocol_reference                         { }
 | protocol_reference_list protocol_reference { }



interface_declaration_list_opt:
 | interface_declaration_list { }
 | /*(*empty*)*/ { }

interface_declaration_list:
 | interface_declaration                         { }
 | interface_declaration_list interface_declaration { }

implementation_definition_list_opt:
 | implementation_definition_list { }
 | /*(*empty*)*/ { }

implementation_definition_list:
 | implementation_definition                         { }
 | implementation_definition_list implementation_definition { }

implementation_definition:
 /*(* covers also function_definition in C++ *)*/
 | declaration { }
 | method_definition { }

method_definition:
 | class_method_definition { }
 | instance_method_definition { }

class_method_definition: 
 TPlus method_type_opt method_selector declaration_list_opt 
 compound { }

instance_method_definition: 
 TMinus method_type_opt method_selector declaration_list_opt 
 compound { }

instance_variables_opt:
 | instance_variables { }
 | /*(*empty*)*/ { }

instance_variables: TOBrace instance_variable_declaration_list TCBrace { }

instance_variable_declaration_list:
 | instance_variable_declaration                         { }
 | instance_variable_declaration_list instance_variable_declaration { }

instance_variable_declaration:
 visibility_specification_opt struct_declaration { }

struct_declaration: decl_spec declarator TPtVirg { }

visibility_specification_opt:
 | visibility_specification { }
 | /*(*empty*)*/ { }

visibility_specification:
 | TAt_public { }
 | TAt_private { }
 | TAt_protected { }


celem_aux:
 /*(* objcext: *)*/
 | class_interface      { DeclTodo }
 | class_implementation { DeclTodo }
 | category_interface   { DeclTodo }
 | category_implementation { DeclTodo }
 | protocol_declaration { DeclTodo }
 | class_declaration_list { DeclTodo }
 | protocol_small_declaration { DeclTodo }
