<?php
/*
 * Purpose: Quote string with slashes in a C style
 * Example:   
 *   <?php
 *   echo addcslashes('foo[ ]', 'A..z');
 *   // output:  \f\o\o\[ \]
 *   // All upper and lower-case letters will be escaped
 *   // ... but so will the [\]^_`
 *   ?>
 * 
 * Output: 
 */
function addcslashes(String $str, String $charlist) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Un-quote string quoted with  <function>addcslashes</function>
 * Example: 
 * 
 * Output: 
 */
function stripcslashes(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Quote string with slashes
 * Example:   
 *   <?php
 *   $str = "Is your name O'reilly?";
 *   
 *   // Outputs: Is your name O\'reilly?
 *   echo addslashes($str);
 *   ?>
 * 
 * Output: 
 */
function addslashes(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Un-quotes a quoted string
 * Example:   
 *   <?php
 *   $str = "Is your name O\'reilly?";
 *   
 *   // Outputs: Is your name O'reilly?
 *   echo stripslashes($str);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => f'oo
 *       [1] => b'ar
 *       [2] => Array
 *           (
 *               [0] => fo'o
 *               [1] => b'ar
 *           )
 *   
 *   )
 */
function stripslashes(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert binary data into hexadecimal representation
 * Example: 
 * 
 * Output: 
 */
function bin2hex(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Inserts HTML line breaks before all newlines in a string
 * Example:   
 *   <?php
 *   echo nl2br("foo isn't\n bar");
 *   ?>
 * 
 * Output:   
 *   foo isn't<br />
 *    bar
 */
function nl2br(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Quote meta characters
 * Example: 
 * 
 * Output:   . \ + * ? [ ^ ] ( $ )
 */
function quotemeta(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Randomly shuffles a string
 * Example:   
 *   <?php
 *   $str = 'abcdef';
 *   $shuffled = str_shuffle($str);
 *   
 *   // This will echo something like: bfdaec
 *   echo $shuffled;
 *   ?>
 * 
 * Output: 
 */
function str_shuffle(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Reverse a string
 * Example:   
 *   <?php
 *   echo strrev("Hello world!"); // outputs "!dlrow olleH"
 *   ?>
 * 
 * Output: 
 */
function strrev(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Make a string lowercase
 * Example:   
 *   <?php
 *   $str = "Mary Had A Little Lamb and She LOVED It So";
 *   $str = strtolower($str);
 *   echo $str; // Prints mary had a little lamb and she loved it so
 *   ?>
 * 
 * Output: 
 */
function strtolower(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Make a string uppercase
 * Example:   
 *   <?php
 *   $str = "Mary Had A Little Lamb and She LOVED It So";
 *   $str = strtoupper($str);
 *   echo $str; // Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO
 *   ?>
 * 
 * Output: 
 */
function strtoupper(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Make a string's first character uppercase
 * Example:   
 *   <?php
 *   $foo = 'hello world!';
 *   $foo = ucfirst($foo);             // Hello world!
 *   
 *   $bar = 'HELLO WORLD!';
 *   $bar = ucfirst($bar);             // HELLO WORLD!
 *   $bar = ucfirst(strtolower($bar)); // Hello world!
 *   ?>
 * 
 * Output: 
 */
function ucfirst(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Uppercase the first character of each word in a string
 * Example:   
 *   <?php
 *   $foo = 'hello world!';
 *   $foo = ucwords($foo);             // Hello World!
 *   
 *   $bar = 'HELLO WORLD!';
 *   $bar = ucwords($bar);             // HELLO WORLD!
 *   $bar = ucwords(strtolower($bar)); // Hello World!
 *   ?>
 * 
 * Output: 
 */
function ucwords(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Strip HTML and PHP tags from a string
 * Example:   
 *   <?php
 *   $text = '<p>Test paragraph.</p><!-- Comment --> <a href="#fragment">Other text</a>';
 *   echo strip_tags($text);
 *   echo "\n";
 *   
 *   // Allow <p> and <a>
 *   echo strip_tags($text, '<p><a>');
 *   ?>
 * 
 * Output:   
 *   Test paragraph. Other text
 *   <p>Test paragraph.</p> <a href="#fragment">Other text</a>
 */
function strip_tags(String $str, String $allowable_tags = "") {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Strip whitespace (or other characters) from the beginning and end of a string
 * Example:   
 *   <?php
 *   
 *   $text   = "\t\tThese are a few words :) ...  ";
 *   $binary = "\x09Example string\x0A";
 *   $hello  = "Hello World";
 *   var_dump($text, $binary, $hello);
 *   
 *   print "\n";
 *   
 *   $trimmed = trim($text);
 *   var_dump($trimmed);
 *   
 *   $trimmed = trim($text, " \t.");
 *   var_dump($trimmed);
 *   
 *   $trimmed = trim($hello, "Hdle");
 *   var_dump($trimmed);
 *   
 *   // trim the ASCII control characters at the beginning and end of $binary
 *   // (from 0 to 31 inclusive)
 *   $clean = trim($binary, "\x00..\x1F");
 *   var_dump($clean);
 *   
 *   ?>
 * 
 * Output:   
 *   string(32) "        These are a few words :) ...  "
 *   string(16) "    Example string
 *   "
 *   string(11) "Hello World"
 *   
 *   string(28) "These are a few words :) ..."
 *   string(24) "These are a few words :)"
 *   string(5) "o Wor"
 *   string(14) "Example string"
 */
function trim(String $str, String $charlist = k_HPHP_TRIM_CHARLIST) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Strip whitespace (or other characters) from the beginning of a string
 * Example:   
 *   <?php
 *   
 *   $text = "\t\tThese are a few words :) ...  ";
 *   $binary = "\x09Example string\x0A";
 *   $hello  = "Hello World";
 *   var_dump($text, $binary, $hello);
 *   
 *   print "\n";
 *   
 *   
 *   $trimmed = ltrim($text);
 *   var_dump($trimmed);
 *   
 *   $trimmed = ltrim($text, " \t.");
 *   var_dump($trimmed);
 *   
 *   $trimmed = ltrim($hello, "Hdle");
 *   var_dump($trimmed);
 *   
 *   // trim the ASCII control characters at the beginning of $binary
 *   // (from 0 to 31 inclusive)
 *   $clean = ltrim($binary, "\x00..\x1F");
 *   var_dump($clean);
 *   
 *   ?>
 * 
 * Output:   
 *   string(32) "        These are a few words :) ...  "
 *   string(16) "    Example string
 *   "
 *   string(11) "Hello World"
 *   
 *   string(30) "These are a few words :) ...  "
 *   string(30) "These are a few words :) ...  "
 *   string(7) "o World"
 *   string(15) "Example string
 *   "
 */
function ltrim(String $str, String $charlist = k_HPHP_TRIM_CHARLIST) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Strip whitespace (or other characters) from the end of a string
 * Example:   
 *   <?php
 *   
 *   $text = "\t\tThese are a few words :) ...  ";
 *   $binary = "\x09Example string\x0A";
 *   $hello  = "Hello World";
 *   var_dump($text, $binary, $hello);
 *   
 *   print "\n";
 *   
 *   $trimmed = rtrim($text);
 *   var_dump($trimmed);
 *   
 *   $trimmed = rtrim($text, " \t.");
 *   var_dump($trimmed);
 *   
 *   $trimmed = rtrim($hello, "Hdle");
 *   var_dump($trimmed);
 *   
 *   // trim the ASCII control characters at the end of $binary
 *   // (from 0 to 31 inclusive)
 *   $clean = rtrim($binary, "\x00..\x1F");
 *   var_dump($clean);
 *   
 *   ?>
 * 
 * Output:   
 *   string(32) "        These are a few words :) ...  "
 *   string(16) "    Example string
 *   "
 *   string(11) "Hello World"
 *   
 *   string(30) "        These are a few words :) ..."
 *   string(26) "        These are a few words :)"
 *   string(9) "Hello Wor"
 *   string(15) "    Example string"
 */
function rtrim(String $str, String $charlist = k_HPHP_TRIM_CHARLIST) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>rtrim</function>
 * Example: 
 * 
 * Output: 
 */
function chop(String $str, String $charlist = k_HPHP_TRIM_CHARLIST) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Split a string by string
 * Example:   
 *   <?php
 *   // Example 1
 *   $pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
 *   $pieces = explode(" ", $pizza);
 *   echo $pieces[0]; // piece1
 *   echo $pieces[1]; // piece2
 *   
 *   // Example 2
 *   $data = "foo:*:1023:1000::/home/foo:/bin/sh";
 *   list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
 *   echo $user; // foo
 *   echo $pass; // *
 *   
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => one
 *       [1] => two|three|four
 *   )
 *   Array
 *   (
 *       [0] => one
 *       [1] => two
 *       [2] => three
 *   )
 */
function explode(String $delimiter, String $str, Int32 $limit = 0x7FFFFFFF) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Join array elements with a string
 * Example:   
 *   <?php
 *   
 *   $array = array('lastname', 'email', 'phone');
 *   $comma_separated = implode(",", $array);
 *   
 *   echo $comma_separated; // lastname,email,phone
 *   
 *   // Empty string when using an empty array:
 *   var_dump(implode('hello', array())); // string(0) ""
 *   
 *   ?>
 * 
 * Output: 
 */
function implode(Variant $arg1, Variant $arg2 = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>implode</function>
 * Example: 
 * 
 * Output: 
 */
function join(Variant $glue, Variant $pieces = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert a string to an array
 * Example:   
 *   <?php
 *   
 *   $str = "Hello Friend";
 *   
 *   $arr1 = str_split($str);
 *   $arr2 = str_split($str, 3);
 *   
 *   print_r($arr1);
 *   print_r($arr2);
 *   
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => H
 *       [1] => e
 *       [2] => l
 *       [3] => l
 *       [4] => o
 *       [5] =>
 *       [6] => F
 *       [7] => r
 *       [8] => i
 *       [9] => e
 *       [10] => n
 *       [11] => d
 *   )
 *   
 *   Array
 *   (
 *       [0] => Hel
 *       [1] => lo
 *       [2] => Fri
 *       [3] => end
 *   )
 */
function str_split(String $str, Int32 $split_length = 1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Split a string into smaller chunks
 * Example:   
 *   <?php
 *   // format $data using RFC 2045 semantics
 *   $new_string = chunk_split(base64_encode($data));
 *   ?>
 * 
 * Output: 
 */
function chunk_split(String $body, Int32 $chunklen = 76, String $end = "\r\n") {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Tokenize string
 * Example:   
 *   <?php
 *   $string = "This is\tan example\nstring";
 *   /* Use tab and newline as tokenizing characters as well   * / 
 *   $tok = strtok($string, " \n\t");
 *   
 *   while ($tok !== false) {
 *       echo "Word=$tok<br />";
 *       $tok = strtok(" \n\t");
 *   }
 *   ?>
 * 
 * Output:   
 *       string(0) ""
 *       string(9) "something"
 */
function strtok(String $str, Variant $token = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Replace all occurrences of the search string with the replacement string
 * Example:   
 *   <?php
 *   // Provides: <body text='black'>
 *   $bodytag = str_replace("%body%", "black", "<body text='%body%'>");
 *   
 *   // Provides: Hll Wrld f PHP
 *   $vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
 *   $onlyconsonants = str_replace($vowels, "", "Hello World of PHP");
 *   
 *   // Provides: You should eat pizza, beer, and ice cream every day
 *   $phrase  = "You should eat fruits, vegetables, and fiber every day.";
 *   $healthy = array("fruits", "vegetables", "fiber");
 *   $yummy   = array("pizza", "beer", "ice cream");
 *   
 *   $newphrase = str_replace($healthy, $yummy, $phrase);
 *   
 *   // Provides: 2
 *   $str = str_replace("ll", "", "good golly miss molly!", $count);
 *   echo $count;
 *   ?>
 * 
 * Output: 
 */
function str_replace(Variant $search, Variant $replace, Variant $subject, Int32 &$count = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Case-insensitive version of  <function>str_replace</function> .
 * Example:   
 *   <?php
 *   $bodytag = str_ireplace("%body%", "black", "<body text=%BODY%>");
 *   ?>
 * 
 * Output: 
 */
function str_ireplace(Variant $search, Variant $replace, Variant $subject, Int32 &$count = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Replace text within a portion of a string
 * Example:   
 *   <?php
 *   $var = 'ABCDEFGH:/MNRPQR/';
 *   echo "Original: $var<hr />\n";
 *   
 *   /* These two examples replace all of $var with 'bob'.  * / 
 *   echo substr_replace($var, 'bob', 0) . "<br />\n";
 *   echo substr_replace($var, 'bob', 0, strlen($var)) . "<br />\n";
 *   
 *   /* Insert 'bob' right at the beginning of $var.  * / 
 *   echo substr_replace($var, 'bob', 0, 0) . "<br />\n";
 *   
 *   /* These next two replace 'MNRPQR' in $var with 'bob'.  * / 
 *   echo substr_replace($var, 'bob', 10, -1) . "<br />\n";
 *   echo substr_replace($var, 'bob', -7, -1) . "<br />\n";
 *   
 *   /* Delete 'MNRPQR' from $var.  * / 
 *   echo substr_replace($var, '', 10, -1) . "<br />\n";
 *   ?>
 * 
 * Output: 
 */
function substr_replace(Variant $str, Variant $replacement, Variant $start, Variant $length = 0x7FFFFFFF) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return part of a string
 * Example:   
 *   <?php
 *   $rest = substr("abcdef", -1);    // returns "f"
 *   $rest = substr("abcdef", -2);    // returns "ef"
 *   $rest = substr("abcdef", -3, 1); // returns "d"
 *   ?>
 * 
 * Output: 
 */
function substr(String $str, Int32 $start, Int32 $length = 0x7FFFFFFF) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Pad a string to a certain length with another string
 * Example:   
 *   <?php
 *   $input = "Alien";
 *   echo str_pad($input, 10);                      // produces "Alien     "
 *   echo str_pad($input, 10, "-=", STR_PAD_LEFT);  // produces "-=-=-Alien"
 *   echo str_pad($input, 10, "_", STR_PAD_BOTH);   // produces "__Alien___"
 *   echo str_pad($input, 6 , "___");               // produces "Alien_"
 *   ?>
 * 
 * Output: 
 */
function str_pad(String $input, Int32 $pad_length, String $pad_string = " ", Int32 $pad_type = k_STR_PAD_RIGHT) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Repeat a string
 * Example:   
 *   <?php
 *   echo str_repeat("-=", 10);
 *   ?>
 * 
 * Output:   
 *   -=-=-=-=-=-=-=-=-=-=
 */
function str_repeat(String $input, Int32 $multiplier) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Wraps a string to a given number of characters
 * Example:   
 *   <?php
 *   $text = "The quick brown fox jumped over the lazy dog.";
 *   $newtext = wordwrap($text, 20, "<br />\n");
 *   
 *   echo $newtext;
 *   ?>
 * 
 * Output:   
 *   The quick brown fox<br />
 *   jumped over the lazy<br />
 *   dog.
 */
function wordwrap(String $str, Int32 $width = 75, String $wordbreak = "\n", Boolean $cut = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert all HTML entities to their applicable characters
 * Example:   
 *   <?php
 *   $orig = "I'll \"walk\" the <b>dog</b> now";
 *   
 *   $a = htmlentities($orig);
 *   
 *   $b = html_entity_decode($a);
 *   
 *   echo $a; // I'll &quot;walk&quot; the &lt;b&gt;dog&lt;/b&gt; now
 *   
 *   echo $b; // I'll "walk" the <b>dog</b> now
 *   
 *   
 *   // For users prior to PHP 4.3.0 you may do this:
 *   function unhtmlentities($string)
 *   {
 *       // replace numeric entities
 *       $string = preg_replace('~&#x([0-9a-f]+);~ei', 'chr(hexdec("\\1"))', $string);
 *       $string = preg_replace('~&#([0-9]+);~e', 'chr("\\1")', $string);
 *       // replace literal entities
 *       $trans_tbl = get_html_translation_table(HTML_ENTITIES);
 *       $trans_tbl = array_flip($trans_tbl);
 *       return strtr($string, $trans_tbl);
 *   }
 *   
 *   $c = unhtmlentities($a);
 *   
 *   echo $c; // I'll "walk" the <b>dog</b> now
 *   
 *   ?>
 * 
 * Output: 
 */
function html_entity_decode(String $str, Int32 $quote_style = k_ENT_COMPAT, String $charset = "") {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert all applicable characters to HTML entities
 * Example:   
 *   <?php
 *   $str = "A 'quote' is <b>bold</b>";
 *   
 *   // Outputs: A 'quote' is &lt;b&gt;bold&lt;/b&gt;
 *   echo htmlentities($str);
 *   
 *   // Outputs: A &#039;quote&#039; is &lt;b&gt;bold&lt;/b&gt;
 *   echo htmlentities($str, ENT_QUOTES);
 *   ?>
 * 
 * Output: 
 */
function htmlentities(String $str, Int32 $quote_style = k_ENT_COMPAT, String $charset = "", Boolean $double_encode = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Convert special HTML entities back to characters
 * Example:   
 *   <?php
 *   $str = '<p>this -&gt; &quot;</p>';
 *   
 *   echo htmlspecialchars_decode($str);
 *   
 *   // note that here the quotes aren't converted
 *   echo htmlspecialchars_decode($str, ENT_NOQUOTES);
 *   ?>
 * 
 * Output:   
 *   <p>this -> "</p>
 *   <p>this -> &quot;</p>
 */
function htmlspecialchars_decode(String $str, Int32 $quote_style = k_ENT_COMPAT) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert special characters to HTML entities
 * Example:   
 *   <?php
 *   $new = htmlspecialchars("<a href='test'>Test</a>", ENT_QUOTES);
 *   echo $new; // &lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;
 *   ?>
 * 
 * Output: 
 */
function htmlspecialchars(String $str, Int32 $quote_style = k_ENT_COMPAT, String $charset = "", Boolean $double_encode = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert a 8 bit string to a quoted-printable string
 * Example: 
 * 
 * Output: 
 */
function quoted_printable_encode(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert a quoted-printable string to an 8 bit string
 * Example: 
 * 
 * Output: 
 */
function quoted_printable_decode(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decode a uuencoded string
 * Example:   
 *   <?php
 *   /* Can you imagine what this will print? :)  * / 
 *   echo convert_uudecode("+22!L;W9E(%!(4\"$`\n`");
 *   ?>
 * 
 * Output: 
 */
function convert_uudecode(String $data) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Uuencode a string
 * Example:   
 *   <?php
 *   $some_string = "test\ntext text\r\n";
 *   
 *   echo convert_uuencode($some_string);
 *   ?>
 * 
 * Output: 
 */
function convert_uuencode(String $data) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Perform the rot13 transform on a string
 * Example:   
 *   <?php
 *   
 *   echo str_rot13('PHP 4.3.0'); // CUC 4.3.0
 *   
 *   ?>
 * 
 * Output: 
 */
function str_rot13(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculates the crc32 polynomial of a string
 * Example:   
 *   <?php
 *   $checksum = crc32("The quick brown fox jumped over the lazy dog.");
 *   printf("%u\n", $checksum);
 *   ?>
 * 
 * Output: 
 */
function crc32(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: One-way string hashing
 * Example:   
 *   <?php
 *   $password = crypt('mypassword'); // let the salt be automatically generated
 *   
 *   /* You should pass the entire results of crypt() as the salt for comparing a
 *      password, to avoid problems when different hashing algorithms are used. (As
 *      it says above, standard DES-based password hashing uses a 2-character salt,
 *      but MD5-based hashing uses 12.)  * / 
 *   if (crypt($user_input, $password) == $password) {
 *      echo "Password verified!";
 *   }
 *   ?>
 * 
 * Output:   
 *   Standard DES: rl.3StKT.4T8M
 *   Extended DES: _J9..rasmBYk8r9AiWNc
 *   MD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0
 *   Blowfish:     $2a$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi
 *   SHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH/Tp.6
 *   SHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21
 */
function crypt(String $str, String $salt = "") {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculate the md5 hash of a string
 * Example:   
 *   <?php
 *   $str = 'apple';
 *   
 *   if (md5($str) === '1f3870be274f6c49b3e31a0c6728957f') {
 *       echo "Would you like a green or red apple?";
 *   }
 *   ?>
 * 
 * Output: 
 */
function md5(String $str, Boolean $raw_output = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculate the sha1 hash of a string
 * Example:   
 *   <?php
 *   $str = 'apple';
 *   
 *   if (sha1($str) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') {
 *       echo "Would you like a green or red apple?";
 *   }
 *   ?>
 * 
 * Output: 
 */
function sha1(String $str, Boolean $raw_output = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function strtr(String $str, Variant $from, Variant $to = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert from one Cyrillic character set to another
 * Example: 
 * 
 * Output: 
 */
function convert_cyr_string(String $str, String $from, String $to) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the translation table used by  <function>htmlspecialchars</function>  and  <function>htmlentities</function>
 * Example:   
 *   <?php
 *   $trans = get_html_translation_table(HTML_ENTITIES);
 *   $str = "Hallo & <Frau> & Krämer";
 *   $encoded = strtr($str, $trans);
 *   
 *   echo $encoded;
 *   ?>
 * 
 * Output:   
 *   Hallo &amp; &lt;Frau&gt; &amp; Kr&auml;mer
 */
function get_html_translation_table(Int32 $table = 0, Int32 $quote_style = k_ENT_COMPAT) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert logical Hebrew text to visual text
 * Example: 
 * 
 * Output: 
 */
function hebrev(String $hebrew_text, Int32 $max_chars_per_line = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert logical Hebrew text to visual text with newline conversion
 * Example: 
 * 
 * Output: 
 */
function hebrevc(String $hebrew_text, Int32 $max_chars_per_line = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set locale information
 * Example:   
 *   <?php
 *   /* Set locale to Dutch  * / 
 *   setlocale(LC_ALL, 'nl_NL');
 *   
 *   /* Output: vrijdag 22 december 1978  * / 
 *   echo strftime("%A %e %B %Y", mktime(0, 0, 0, 12, 22, 1978));
 *   
 *   /* try different possible locale names for german as of PHP 4.3.0  * / 
 *   $loc_de = setlocale(LC_ALL, 'de_DE@euro', 'de_DE', 'de', 'ge');
 *   echo "Preferred locale for german on this system is '$loc_de'";
 *   ?>
 * 
 * Output: 
 */
function setlocale(Int32 $category, Variant $locale) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Get numeric formatting information
 * Example:   
 *   <?php
 *   if (false !== setlocale(LC_ALL, 'nl_NL.UTF-8@euro')) {
 *       $locale_info = localeconv();
 *       print_r($locale_info);
 *   }
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [decimal_point] => .
 *       [thousands_sep] =>
 *       [int_curr_symbol] => EUR
 *       [currency_symbol] => €
 *       [mon_decimal_point] => ,
 *       [mon_thousands_sep] =>
 *       [positive_sign] =>
 *       [negative_sign] => -
 *       [int_frac_digits] => 2
 *       [frac_digits] => 2
 *       [p_cs_precedes] => 1
 *       [p_sep_by_space] => 1
 *       [n_cs_precedes] => 1
 *       [n_sep_by_space] => 1
 *       [p_sign_posn] => 1
 *       [n_sign_posn] => 2
 *       [grouping] => Array
 *           (
 *           )
 *   
 *       [mon_grouping] => Array
 *           (
 *               [0] => 3
 *               [1] => 3
 *           )
 *   
 *   )
 */
function localeconv() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Query language and locale information
 * Example: 
 * 
 * Output: 
 */
function nl_langinfo(Int32 $item) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output one or more strings
 * Example:   
 *   I have <?=$foo?> foo.
 * 
 * Output: 
 */

/*
 * Purpose: Output a string
 * Example:   
 *   <?php
 *   print("Hello World");
 *   
 *   print "print() also works without parentheses.";
 *   
 *   print "This spans
 *   multiple lines. The newlines will be
 *   output as well";
 *   
 *   print "This spans\nmultiple lines. The newlines will be\noutput as well.";
 *   
 *   print "escaping characters is done \"Like this\".";
 *   
 *   // You can use variables inside of a print statement
 *   $foo = "foobar";
 *   $bar = "barbaz";
 *   
 *   print "foo is $foo"; // foo is foobar
 *   
 *   // You can also use arrays
 *   $bar = array("value" => "foo");
 *   
 *   print "this is {$bar['value']} !"; // this is foo !
 *   
 *   // Using single quotes will print the variable name, not the value
 *   print 'foo is $foo'; // foo is $foo
 *   
 *   // If you are not using any other characters, you can just print variables
 *   print $foo;          // foobar
 *   
 *   print <<<END
 *   This uses the "here document" syntax to output
 *   multiple lines with $variable interpolation. Note
 *   that the here document terminator must appear on a
 *   line with just a semicolon no extra whitespace!
 *   END;
 *   ?>
 * 
 * Output: 
 */

/*
 * Purpose: Output a formatted string
 * Example: 
 * 
 * Output: 
 */
function printf(String $format) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Output a formatted string
 * Example:   
 *   <?php
 *   vprintf("%04d-%02d-%02d", explode('-', '1988-8-1')); // 1988-08-01
 *   ?>
 * 
 * Output: 
 */
function vprintf(String $format, VariantVec $args) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return a formatted string
 * Example:   
 *   <?php
 *   $format = 'There are %d monkeys in the %s';
 *   printf($format, $num, $location);
 *   ?>
 * 
 * Output:   
 *   %b = '10100111101010011010101101'
 *   %c = 'A'
 *   %d = '43951789'
 *   %e = '4.39518e+7'
 *   %u = '43951789'
 *   %u = '4251015507'
 *   %f = '43951789.000000'
 *   %o = '247523255'
 *   %s = '43951789'
 *   %x = '29ea6ad'
 *   %X = '29EA6AD'
 *   %+d = '+43951789'
 *   %+d = '-43951789'
 */
function sprintf(String $format) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Return a formatted string
 * Example:   
 *   <?php
 *   print vsprintf("%04d-%02d-%02d", explode('-', '1988-8-1')); // 1988-08-01
 *   ?>
 * 
 * Output: 
 */
function vsprintf(String $format, VariantVec $args) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parses input from a string according to a format
 * Example:   
 *   <?php
 *   // getting the serial number
 *   list($serial) = sscanf("SN/2350001", "SN/%d");
 *   // and the date of manufacturing
 *   $mandate = "January 01 2000";
 *   list($month, $day, $year) = sscanf($mandate, "%s %d %d");
 *   echo "Item $serial was manufactured on: $year-" . substr($month, 0, 3) . "-$day\n";
 *   ?>
 * 
 * Output: 
 */
function sscanf(String $str, String $format) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Return a specific character
 * Example:   
 *   <?php
 *   $str = "The string ends in escape: ";
 *   $str .= chr(27); /* add an escape character at the end of $str  * / 
 *   
 *   /* Often this is more useful  * / 
 *   
 *   $str = sprintf("The string ends in escape: %c", 27);
 *   ?>
 * 
 * Output: 
 */
function chr(Int64 $ascii) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return ASCII value of character
 * Example:   
 *   <?php
 *   $str = "\n";
 *   if (ord($str) == 10) {
 *       echo "The first character of \$str is a line feed.\n";
 *   }
 *   ?>
 * 
 * Output: 
 */
function ord(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Formats a number as a currency string
 * Example:   
 *   <?php
 *   
 *   $number = 1234.56;
 *   
 *   // let's print the international format for the en_US locale
 *   setlocale(LC_MONETARY, 'en_US');
 *   echo money_format('%i', $number) . "\n";
 *   // USD 1,234.56
 *   
 *   // Italian national format with 2 decimals`
 *   setlocale(LC_MONETARY, 'it_IT');
 *   echo money_format('%.2n', $number) . "\n";
 *   // Eu 1.234,56
 *   
 *   // Using a negative number
 *   $number = -1234.5672;
 *   
 *   // US national format, using () for negative numbers
 *   // and 10 digits for left precision
 *   setlocale(LC_MONETARY, 'en_US');
 *   echo money_format('%(#10n', $number) . "\n";
 *   // ($        1,234.57)
 *   
 *   // Similar format as above, adding the use of 2 digits of right
 *   // precision and '*' as a fill character
 *   echo money_format('%=*(#10.2n', $number) . "\n";
 *   // ($********1,234.57)
 *   
 *   // Let's justify to the left, with 14 positions of width, 8 digits of
 *   // left precision, 2 of right precision, withouth grouping character
 *   // and using the international format for the de_DE locale.
 *   setlocale(LC_MONETARY, 'de_DE');
 *   echo money_format('%=*^-14#8.2i', 1234.56) . "\n";
 *   // Eu 1234,56****
 *   
 *   // Let's add some blurb before and after the conversion specification
 *   setlocale(LC_MONETARY, 'en_GB');
 *   $fmt = 'The final value is %i (after a 10%% discount)';
 *   echo money_format($fmt, 1234.56) . "\n";
 *   // The final value is  GBP 1,234.56 (after a 10% discount)
 *   
 *   ?>
 * 
 * Output: 
 */
function money_format(String $format, Double $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Format a number with grouped thousands
 * Example:   
 *   <?php
 *   
 *   $number = 1234.56;
 *   
 *   // english notation (default)
 *   $english_format_number = number_format($number);
 *   // 1,235
 *   
 *   // French notation
 *   $nombre_format_francais = number_format($number, 2, ',', ' ');
 *   // 1 234,56
 *   
 *   $number = 1234.5678;
 *   
 *   // english notation without thousands seperator
 *   $english_format_number = number_format($number, 2, '.', '');
 *   // 1234.57
 *   
 *   ?>
 * 
 * Output: 
 */
function number_format(Double $number, Int32 $decimals = 0, String $dec_point = ".", String $thousands_sep = ",") {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binary safe string comparison
 * Example: 
 * 
 * Output: 
 */
function strcmp(String $str1, String $str2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binary safe string comparison of the first n characters
 * Example: 
 * 
 * Output: 
 */
function strncmp(String $str1, String $str2, Int32 $len) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: String comparisons using a "natural order" algorithm
 * Example:   
 *   <?php
 *   $arr1 = $arr2 = array("img12.png", "img10.png", "img2.png", "img1.png");
 *   echo "Standard string comparison\n";
 *   usort($arr1, "strcmp");
 *   print_r($arr1);
 *   echo "\nNatural order string comparison\n";
 *   usort($arr2, "strnatcmp");
 *   print_r($arr2);
 *   ?>
 * 
 * Output:   
 *   Standard string comparison
 *   Array
 *   (
 *       [0] => img1.png
 *       [1] => img10.png
 *       [2] => img12.png
 *       [3] => img2.png
 *   )
 *   
 *   Natural order string comparison
 *   Array
 *   (
 *       [0] => img1.png
 *       [1] => img2.png
 *       [2] => img10.png
 *       [3] => img12.png
 *   )
 */
function strnatcmp(String $str1, String $str2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binary safe case-insensitive string comparison
 * Example:   
 *   <?php
 *   $var1 = "Hello";
 *   $var2 = "hello";
 *   if (strcasecmp($var1, $var2) == 0) {
 *       echo '$var1 is equal to $var2 in a case-insensitive string comparison';
 *   }
 *   ?>
 * 
 * Output: 
 */
function strcasecmp(String $str1, String $str2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binary safe case-insensitive string comparison of the first n characters
 * Example: 
 * 
 * Output: 
 */
function strncasecmp(String $str1, String $str2, Int32 $len) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Case insensitive string comparisons using a "natural order" algorithm
 * Example: 
 * 
 * Output: 
 */
function strnatcasecmp(String $str1, String $str2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Locale based string comparison
 * Example: 
 * 
 * Output: 
 */
function strcoll(String $str1, String $str2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binary safe comparison of two strings from an offset, up to length characters
 * Example:   
 *   <?php
 *   echo substr_compare("abcde", "bc", 1, 2); // 0
 *   echo substr_compare("abcde", "de", -2, 2); // 0
 *   echo substr_compare("abcde", "bcg", 1, 2); // 0
 *   echo substr_compare("abcde", "BC", 1, 2, true); // 0
 *   echo substr_compare("abcde", "bc", 1, 3); // 1
 *   echo substr_compare("abcde", "cd", 1, 2); // -1
 *   echo substr_compare("abcde", "abc", 5, 1); // warning
 *   ?>
 * 
 * Output: 
 */
function substr_compare(String $main_str, String $str, Int32 $offset, Int32 $length = 0, Boolean $case_insensitivity = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>strstr</function>
 * Example: 
 * 
 * Output: 
 */
function strchr(String $haystack, Variant $needle) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find the last occurrence of a character in a string
 * Example:   
 *   <?php
 *   // get last directory in $PATH
 *   $dir = substr(strrchr($PATH, ":"), 1);
 *   
 *   // get everything after last newline
 *   $text = "Line 1\nLine 2\nLine 3";
 *   $last = substr(strrchr($text, 10), 1 );
 *   ?>
 * 
 * Output: 
 */
function strrchr(String $haystack, Variant $needle) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find first occurrence of a string
 * Example:   
 *   <?php
 *   $email  = 'name@example.com';
 *   $domain = strstr($email, '@');
 *   echo $domain; // prints @example.com
 *   
 *   $user = strstr($email, '@', true); // As of PHP 5.3.0
 *   echo $user; // prints name
 *   ?>
 * 
 * Output: 
 */
function strstr(String $haystack, Variant $needle) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Case-insensitive  <function>strstr</function>
 * Example:   
 *   <?php
 *     $email = 'USER@EXAMPLE.com';
 *     echo stristr($email, 'e'); // outputs ER@EXAMPLE.com
 *     echo stristr($email, 'e', true); // As of PHP 5.3.0, outputs US
 *   ?>
 * 
 * Output: 
 */
function stristr(String $haystack, Variant $needle) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Search a string for any of a set of characters
 * Example:   
 *   <?php
 *   
 *   $text = 'This is a Simple text.';
 *   
 *   // this echoes "is is a Simple text." because 'i' is matched first
 *   echo strpbrk($text, 'mi');
 *   
 *   // this echoes "Simple text." because chars are case sensitive
 *   echo strpbrk($text, 'S');
 *   ?>
 * 
 * Output: 
 */
function strpbrk(String $haystack, String $char_list) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find position of first occurrence of a string
 * Example:   
 *   <?php
 *   $mystring = 'abc';
 *   $findme   = 'a';
 *   $pos = strpos($mystring, $findme);
 *   
 *   // Note our use of ===.  Simply == would not work as expected
 *   // because the position of 'a' was the 0th (first) character.
 *   if ($pos === false) {
 *       echo "The string '$findme' was not found in the string '$mystring'";
 *   } else {
 *       echo "The string '$findme' was found in the string '$mystring'";
 *       echo " and exists at position $pos";
 *   }
 *   ?>
 * 
 * Output: 
 */
function strpos(String $haystack, Variant $needle, Int32 $offset = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find position of first occurrence of a case-insensitive string
 * Example:   
 *   <?php
 *   $findme    = 'a';
 *   $mystring1 = 'xyz';
 *   $mystring2 = 'ABC';
 *   
 *   $pos1 = stripos($mystring1, $findme);
 *   $pos2 = stripos($mystring2, $findme);
 *   
 *   // Nope, 'a' is certainly not in 'xyz'
 *   if ($pos1 === false) {
 *       echo "The string '$findme' was not found in the string '$mystring1'";
 *   }
 *   
 *   // Note our use of ===.  Simply == would not work as expected
 *   // because the position of 'a' is the 0th (first) character.
 *   if ($pos2 !== false) {
 *       echo "We found '$findme' in '$mystring2' at position $pos2";
 *   }
 *   ?>
 * 
 * Output: 
 */
function stripos(String $haystack, Variant $needle, Int32 $offset = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find position of last occurrence of a char in a string
 * Example:   
 *   <?php
 *   
 *   $pos = strrpos($mystring, "b");
 *   if ($pos === false) { // note: three equal signs
 *       // not found...
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function strrpos(String $haystack, Variant $needle, Int32 $offset = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find position of last occurrence of a case-insensitive string in a string
 * Example:   
 *   <?php
 *   $haystack = 'ababcd';
 *   $needle   = 'aB';
 *   
 *   $pos      = strripos($haystack, $needle);
 *   
 *   if ($pos === false) {
 *       echo "Sorry, we did not find ($needle) in ($haystack)";
 *   } else {
 *       echo "Congratulations!\n";
 *       echo "We found the last ($needle) in ($haystack) at position ($pos)";
 *   }
 *   ?>
 * 
 * Output:   
 *      Congratulations!
 *      We found the last (aB) in (ababcd) at position (2)
 */
function strripos(String $haystack, Variant $needle, Int32 $offset = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Count the number of substring occurrences
 * Example:   
 *   <?php
 *   $text = 'This is a test';
 *   echo strlen($text); // 14
 *   
 *   echo substr_count($text, 'is'); // 2
 *   
 *   // the string is reduced to 's is a test', so it prints 1
 *   echo substr_count($text, 'is', 3);
 *   
 *   // the text is reduced to 's i', so it prints 0
 *   echo substr_count($text, 'is', 3, 3);
 *   
 *   // generates a warning because 5+10 > 14
 *   echo substr_count($text, 'is', 5, 10);
 *   
 *   
 *   // prints only 1, because it doesn't count overlapped subtrings
 *   $text2 = 'gcdgcdgcd';
 *   echo substr_count($text2, 'gcdgcd');
 *   ?>
 * 
 * Output: 
 */
function substr_count(String $haystack, String $needle, Int32 $offset = 0, Int32 $length = 0x7FFFFFFF) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Finds the length of the first segment of a string consisting
 *    entirely of characters contained within a given mask.
 * Example:   
 *   <?php
 *   $var = strspn("42 is the answer to the 128th question.", "1234567890");
 *   ?>
 * 
 * Output: 
 */
function strspn(String $str1, String $str2, Int32 $start = 0, Int32 $length = 0x7FFFFFFF) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find length of initial segment not matching mask
 * Example:   
 *   <?php
 *   $a = strcspn('abcd',  'apple');
 *   $b = strcspn('abcd',  'banana');
 *   $c = strcspn('hello', 'l');
 *   $d = strcspn('hello', 'world');
 *   
 *   var_dump($a);
 *   var_dump($b);
 *   var_dump($c);
 *   var_dump($d);
 *   ?>
 * 
 * Output:   
 *   int(0)
 *   int(0)
 *   int(2)
 *   int(2)
 */
function strcspn(String $str1, String $str2, Int32 $start = 0, Int32 $length = 0x7FFFFFFF) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get string length
 * Example:   
 *   <?php
 *   $str = 'abcdef';
 *   echo strlen($str); // 6
 *   
 *   $str = ' ab cd ';
 *   echo strlen($str); // 7
 *   ?>
 * 
 * Output: 
 */
function strlen(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return information about characters used in a string
 * Example:   
 *   <?php
 *   $data = "Two Ts and one F.";
 *   
 *   foreach (count_chars($data, 1) as $i => $val) {
 *      echo "There were $val instance(s) of \"" , chr($i) , "\" in the string.\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   There were 4 instance(s) of " " in the string.
 *   There were 1 instance(s) of "." in the string.
 *   There were 1 instance(s) of "F" in the string.
 *   There were 2 instance(s) of "T" in the string.
 *   There were 1 instance(s) of "a" in the string.
 *   There were 1 instance(s) of "d" in the string.
 *   There were 1 instance(s) of "e" in the string.
 *   There were 2 instance(s) of "n" in the string.
 *   There were 2 instance(s) of "o" in the string.
 *   There were 1 instance(s) of "s" in the string.
 *   There were 1 instance(s) of "w" in the string.
 */
function count_chars(String $str, Int64 $mode = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Return information about words used in a string
 * Example:   
 *   <?php
 *   
 *   $str = "Hello fri3nd, you're
 *          looking          good today!";
 *   
 *   print_r(str_word_count($str, 1));
 *   print_r(str_word_count($str, 2));
 *   print_r(str_word_count($str, 1, 'àáãç3'));
 *   
 *   echo str_word_count($str);
 *   
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => Hello
 *       [1] => fri
 *       [2] => nd
 *       [3] => you're
 *       [4] => looking
 *       [5] => good
 *       [6] => today
 *   )
 *   
 *   Array
 *   (
 *       [0] => Hello
 *       [6] => fri
 *       [10] => nd
 *       [14] => you're
 *       [29] => looking
 *       [46] => good
 *       [51] => today
 *   )
 *   
 *   Array
 *   (
 *       [0] => Hello
 *       [1] => fri3nd
 *       [2] => you're
 *       [3] => looking
 *       [4] => good
 *       [5] => today
 *   )
 *   
 *   7
 */
function str_word_count(String $str, Int64 $format = 0, String $charlist = "") {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculate Levenshtein distance between two strings
 * Example:   
 *   <?php
 *   // input misspelled word
 *   $input = 'carrrot';
 *   
 *   // array of words to check against
 *   $words  = array('apple','pineapple','banana','orange',
 *                   'radish','carrot','pea','bean','potato');
 *   
 *   // no shortest distance found, yet
 *   $shortest = -1;
 *   
 *   // loop through words to find the closest
 *   foreach ($words as $word) {
 *   
 *       // calculate the distance between the input word,
 *       // and the current word
 *       $lev = levenshtein($input, $word);
 *   
 *       // check for an exact match
 *       if ($lev == 0) {
 *   
 *           // closest word is this one (exact match)
 *           $closest = $word;
 *           $shortest = 0;
 *   
 *           // break out of the loop; we've found an exact match
 *           break;
 *       }
 *   
 *       // if this distance is less than the next found shortest
 *       // distance, OR if a next shortest word has not yet been found
 *       if ($lev <= $shortest || $shortest < 0) {
 *           // set the closest match, and shortest distance
 *           $closest  = $word;
 *           $shortest = $lev;
 *       }
 *   }
 *   
 *   echo "Input word: $input\n";
 *   if ($shortest == 0) {
 *       echo "Exact match found: $closest\n";
 *   } else {
 *       echo "Did you mean: $closest?\n";
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   Input word: carrrot
 *   Did you mean: carrot?
 */
function levenshtein(String $str1, String $str2, Int32 $cost_ins = 1, Int32 $cost_rep = 1, Int32 $cost_del = 1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculate the similarity between two strings
 * Example: 
 * 
 * Output: 
 */
function similar_text(String $first, String $second, Double &$percent = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculate the soundex key of a string
 * Example:   
 *   <?php
 *   soundex("Euler")       == soundex("Ellery");    // E460
 *   soundex("Gauss")       == soundex("Ghosh");     // G200
 *   soundex("Hilbert")     == soundex("Heilbronn"); // H416
 *   soundex("Knuth")       == soundex("Kant");      // K530
 *   soundex("Lloyd")       == soundex("Ladd");      // L300
 *   soundex("Lukasiewicz") == soundex("Lissajous"); // L222
 *   ?>
 * 
 * Output: 
 */
function soundex(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function metaphone(String $str, Int32 $phones = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parses the string into variables
 * Example:   
 *   <?php
 *   $str = "first=value&arr[]=foo+bar&arr[]=baz";
 *   parse_str($str);
 *   echo $first;  // value
 *   echo $arr[0]; // foo bar
 *   echo $arr[1]; // baz
 *   
 *   parse_str($str, $output);
 *   echo $output['first'];  // value
 *   echo $output['arr'][0]; // foo bar
 *   echo $output['arr'][1]; // baz
 *   
 *   ?>
 * 
 * Output: 
 */
function parse_str(String $str, VariantMap &$arr = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

