<?php
/*
 * Purpose: Return array entries that match the pattern
 * Example:   
 *   <?php
 *   // return all array elements
 *   // containing floating point numbers
 *   $fl_array = preg_grep("/^(\d+)?\.\d+$/", $array);
 *   ?>
 * 
 * Output: 
 */
function preg_grep(String $pattern, VariantMap $input, Int32 $flags = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Perform a regular expression match
 * Example:   
 *   <?php
 *   $subject = "abcdef";
 *   $pattern = '/^def/';
 *   preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
 *   print_r($matches);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *   )
 */
function preg_match(String $pattern, String $subject, StringVec &$matches = null, Int32 $flags = 0, Int32 $offset = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Perform a global regular expression match
 * Example:   
 *   <?php
 *   preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
 *       "<b>example: </b><div align=left>this is a test</div>",
 *       $out, PREG_PATTERN_ORDER);
 *   echo $out[0][0] . ", " . $out[0][1] . "\n";
 *   echo $out[1][0] . ", " . $out[1][1] . "\n";
 *   ?>
 * 
 * Output:   
 *   <b>example: </b>, <div align=left>this is a test</div>
 *   example: , this is a test
 */
function preg_match_all(String $pattern, String $subject, StringVec &$matches, Int32 $flags = 0, Int32 $offset = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Perform a regular expression search and replace
 * Example:   
 *   <?php
 *   $string = 'April 15, 2003';
 *   $pattern = '/(\w+) (\d+), (\d+)/i';
 *   $replacement = '${1}1,$3';
 *   echo preg_replace($pattern, $replacement, $string);
 *   ?>
 * 
 * Output:   
 *   April1,2003
 */
function preg_replace(Variant $pattern, Variant $replacement, Variant $subject, Int32 $limit = -1, Int32 &$count = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Perform a regular expression search and replace using a callback
 * Example:   
 *   <?php
 *   /* a unix-style command line filter to convert uppercase
 *    * letters at the beginning of paragraphs to lowercase  * / 
 *   $fp = fopen("php://stdin", "r") or die("can't read stdin");
 *   while (!feof($fp)) {
 *       $line = fgets($fp);
 *       $line = preg_replace_callback(
 *           '|<p>\s*\w|',
 *           create_function(
 *               // single quotes are essential here,
 *               // or alternative escape all $ as \$
 *               '$matches',
 *               'return strtolower($matches[0]);'
 *           ),
 *           $line
 *       );
 *       echo $line;
 *   }
 *   fclose($fp);
 *   ?>
 * 
 * Output:   
 *   April fools day is 04/01/2003
 *   Last christmas was 12/24/2002
 */
function preg_replace_callback(Variant $pattern, Variant $callback, Variant $subject, Int32 $limit = -1, Int32 &$count = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Split string by a regular expression
 * Example:   
 *   <?php
 *   // split the phrase by any number of commas or space characters,
 *   // which include " ", \r, \t, \n and \f
 *   $keywords = preg_split("/[\s,]+/", "hypertext language, programming");
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => Array
 *           (
 *               [0] => hypertext
 *               [1] => 0
 *           )
 *   
 *       [1] => Array
 *           (
 *               [0] => language
 *               [1] => 10
 *           )
 *   
 *       [2] => Array
 *           (
 *               [0] => programming
 *               [1] => 19
 *           )
 *   
 *   )
 */
function preg_split(Variant $pattern, Variant $subject, Int32 $limit = -1, Int32 $flags = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Quote regular expression characters
 * Example:   
 *   <?php
 *   $keywords = '$40 for a g3/400';
 *   $keywords = preg_quote($keywords, '/');
 *   echo $keywords; // returns \$40 for a g3\/400
 *   ?>
 * 
 * Output: 
 */
function preg_quote(String $str, String $delimiter = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the error code of the last PCRE regex execution
 * Example:   
 *   <?php
 *   
 *   preg_match('/(?:\D+|<\d+>)*[!?]/', 'foobar foobar foobar');
 *   
 *   if (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {
 *       print 'Backtrack limit was exhausted!';
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   Backtrack limit was exhausted!
 */
function preg_last_error() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Replace regular expression
 * Example:   
 *   <?php
 *   
 *   $string = "This is a test";
 *   echo str_replace(" is", " was", $string);
 *   echo ereg_replace("( )is", "\\1was", $string);
 *   echo ereg_replace("(( )is)", "\\2was", $string);
 *   
 *   ?>
 * 
 * Output: 
 */
function ereg_replace(String $pattern, String $replacement, String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Replace regular expression case insensitive
 * Example:   
 *   <?php
 *   $pattern = '(>[^<]*)('. quotemeta($_GET['search']) .')';
 *   $replacement = '\\1<span class="search">\\2</span>';
 *   $body = eregi_replace($pattern, $replacement, $body);
 *   ?>
 * 
 * Output: 
 */
function eregi_replace(String $pattern, String $replacement, String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Regular expression match
 * Example:   
 *   <?php
 *   if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs)) {
 *       echo "$regs[3].$regs[2].$regs[1]";
 *   } else {
 *       echo "Invalid date format: $date";
 *   }
 *   ?>
 * 
 * Output: 
 */
function ereg(String $pattern, String $str, StringVec &$regs = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Case insensitive regular expression match
 * Example:   
 *   <?php
 *   $string = 'XYZ';
 *   if (eregi('z', $string)) {
 *       echo "'$string' contains a 'z' or 'Z'!";
 *   }
 *   ?>
 * 
 * Output: 
 */
function eregi(String $pattern, String $str, StringVec &$regs = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Split string into array by regular expression
 * Example:   
 *   <?php
 *   list($user, $pass, $uid, $gid, $extra) =
 *       split(":", $passwd_line, 5);
 *   ?>
 * 
 * Output: 
 */
function split(String $pattern, String $str, Int32 $limit = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Split string into array by regular expression case insensitive
 * Example:   
 *   <?php
 *   $string = "aBBBaCCCADDDaEEEaGGGA";
 *   $chunks = spliti ("a", $string, 5);
 *   print_r($chunks);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *     [0] =>
 *     [1] => BBB
 *     [2] => CCC
 *     [3] => DDD
 *     [4] => EEEaGGGA
 *   )
 */
function spliti(String $pattern, String $str, Int32 $limit = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Make regular expression for case insensitive match
 * Example:   
 *   <?php
 *   echo sql_regcase("Foo - bar.");
 *   ?>
 * 
 * Output:   
 *   [Ff][Oo][Oo] - [Bb][Aa][Rr].
 */
function sql_regcase(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

