<?php
function debug_backtrace() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:      Prints a backtrace
 * Example:   
 *   <?php
 *   // include.php file
 *   
 *   function a() {
 *       b();
 *   }
 *   
 *   function b() {
 *       c();
 *   }
 *   
 *   function c(){
 *       debug_print_backtrace();
 *   }
 *   
 *   a();
 *   
 *   ?>
 * 
 * Output:   
 *   #0  eval() called at [/tmp/include.php:5]
 *   #1  a() called at [/tmp/include.php:17]
 *   #2  include(/tmp/include.php) called at [/tmp/test.php:3]
 *   
 *   #0  c() called at [/tmp/include.php:10]
 *   #1  b() called at [/tmp/include.php:6]
 *   #2  a() called at [/tmp/include.php:17]
 *   #3  include(/tmp/include.php) called at [/tmp/test.php:3]
 */
function debug_print_backtrace() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the last occurred error
 * Example:   
 *   <?php
 *   echo $a;
 *   print_r(error_get_last());
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [type] => 8
 *       [message] => Undefined variable: a
 *       [file] => C:\WWW\index.php
 *       [line] => 2
 *   )
 */
function error_get_last() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Send an error message somewhere
 * Example:   
 *   <?php
 *   // Send notification through the server log if we can not
 *   // connect to the database.
 *   if (!Ora_Logon($username, $password)) {
 *       error_log("Oracle database not available!", 0);
 *   }
 *   
 *   // Notify administrator by email if we run out of FOO
 *   if (!($foo = allocate_new_foo())) {
 *       error_log("Big trouble, we're all out of FOOs!", 1,
 *                  "operator@example.com");
 *   }
 *   
 *   // another way to call error_log():
 *   error_log("You messed up!", 3, "/var/tmp/my-errors.log");
 *   ?>
 * 
 * Output: 
 */
function error_log(String $message, Int32 $message_type = 0, String $destination = null_string, String $extra_headers = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets which PHP errors are reported
 * Example:   
 *   <?php
 *   
 *   // Turn off all error reporting
 *   error_reporting(0);
 *   
 *   // Report simple running errors
 *   error_reporting(E_ERROR | E_WARNING | E_PARSE);
 *   
 *   // Reporting E_NOTICE can be good too (to report uninitialized
 *   // variables or catch variable name misspellings ...)
 *   error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);
 *   
 *   // Report all errors except E_NOTICE
 *   // This is the default value set in php.ini
 *   error_reporting(E_ALL ^ E_NOTICE);
 *   
 *   // Report all PHP errors (see changelog)
 *   error_reporting(E_ALL);
 *   
 *   // Report all PHP errors
 *   error_reporting(-1);
 *   
 *   // Same as error_reporting(E_ALL);
 *   ini_set('error_reporting', E_ALL);
 *   
 *   ?>
 * 
 * Output: 
 */
function error_reporting(Int32 $level = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Restores the previous error handler function
 * Example:   
 *   <?php
 *   function unserialize_handler($errno, $errstr)
 *   {
 *       echo "Invalid serialized value.\n";
 *   }
 *   
 *   $serialized = 'foo';
 *   set_error_handler('unserialize_handler');
 *   $original = unserialize($serialized);
 *   restore_error_handler();
 *   ?>
 * 
 * Output:   
 *   Invalid serialized value.
 */
function restore_error_handler() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Restores the previously defined exception handler function
 * Example:   
 *   <?php
 *       function exception_handler_1(Exception $e)
 *       {
 *           echo '[' . __FUNCTION__ . '] ' . $e->getMessage();
 *       }
 *   
 *       function exception_handler_2(Exception $e)
 *       {
 *           echo '[' . __FUNCTION__ . '] ' . $e->getMessage();
 *       }
 *   
 *       set_exception_handler('exception_handler_1');
 *       set_exception_handler('exception_handler_2');
 *   
 *       restore_exception_handler();
 *   
 *       throw new Exception('This triggers the first exception handler...');
 *   ?>
 * 
 * Output:   
 *   [exception_handler_1] This triggers the first exception handler...
 */
function restore_exception_handler() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets a user-defined error handler function
 * Example:   
 *   <?php
 *   // error handler function
 *   function myErrorHandler($errno, $errstr, $errfile, $errline)
 *   {
 *       if (!(error_reporting() & $errno)) {
 *           // This error code is not included in error_reporting
 *           return;
 *       }
 *   
 *       switch ($errno) {
 *       case E_USER_ERROR:
 *           echo "<b>My ERROR</b> [$errno] $errstr<br />\n";
 *           echo "  Fatal error on line $errline in file $errfile";
 *           echo ", PHP " . PHP_VERSION . " (" . PHP_OS . ")<br />\n";
 *           echo "Aborting...<br />\n";
 *           exit(1);
 *           break;
 *   
 *       case E_USER_WARNING:
 *           echo "<b>My WARNING</b> [$errno] $errstr<br />\n";
 *           break;
 *   
 *       case E_USER_NOTICE:
 *           echo "<b>My NOTICE</b> [$errno] $errstr<br />\n";
 *           break;
 *   
 *       default:
 *           echo "Unknown error type: [$errno] $errstr<br />\n";
 *           break;
 *       }
 *   
 *       /* Don't execute PHP internal error handler  * / 
 *       return true;
 *   }
 *   
 *   // function to test the error handling
 *   function scale_by_log($vect, $scale)
 *   {
 *       if (!is_numeric($scale) || $scale <= 0) {
 *           trigger_error("log(x) for x <= 0 is undefined, you used: scale = $scale", E_USER_ERROR);
 *       }
 *   
 *       if (!is_array($vect)) {
 *           trigger_error("Incorrect input vector, array of values expected", E_USER_WARNING);
 *           return null;
 *       }
 *   
 *       $temp = array();
 *       foreach($vect as $pos => $value) {
 *           if (!is_numeric($value)) {
 *               trigger_error("Value at position $pos is not a number, using 0 (zero)", E_USER_NOTICE);
 *               $value = 0;
 *           }
 *           $temp[$pos] = log($scale) * $value;
 *       }
 *   
 *       return $temp;
 *   }
 *   
 *   // set to the user defined error handler
 *   $old_error_handler = set_error_handler("myErrorHandler");
 *   
 *   // trigger some errors, first define a mixed array with a non-numeric item
 *   echo "vector a\n";
 *   $a = array(2, 3, "foo", 5.5, 43.3, 21.11);
 *   print_r($a);
 *   
 *   // now generate second array
 *   echo "----\nvector b - a notice (b = log(PI) * a)\n";
 *   /* Value at position $pos is not a number, using 0 (zero)  * / 
 *   $b = scale_by_log($a, M_PI);
 *   print_r($b);
 *   
 *   // this is trouble, we pass a string instead of an array
 *   echo "----\nvector c - a warning\n";
 *   /* Incorrect input vector, array of values expected  * / 
 *   $c = scale_by_log("not array", 2.3);
 *   var_dump($c); // NULL
 *   
 *   // this is a critical error, log of zero or negative number is undefined
 *   echo "----\nvector d - fatal error\n";
 *   /* log(x) for x <= 0 is undefined, you used: scale = $scale"  * / 
 *   $d = scale_by_log($a, -2.5);
 *   var_dump($d); // Never reached
 *   ?>
 * 
 * Output:   
 *   vector a
 *   Array
 *   (
 *       [0] => 2
 *       [1] => 3
 *       [2] => foo
 *       [3] => 5.5
 *       [4] => 43.3
 *       [5] => 21.11
 *   )
 *   ----
 *   vector b - a notice (b = log(PI) * a)
 *   <b>My NOTICE</b> [1024] Value at position 2 is not a number, using 0 (zero)<br />
 *   Array
 *   (
 *       [0] => 2.2894597716988
 *       [1] => 3.4341896575482
 *       [2] => 0
 *       [3] => 6.2960143721717
 *       [4] => 49.566804057279
 *       [5] => 24.165247890281
 *   )
 *   ----
 *   vector c - a warning
 *   <b>My WARNING</b> [512] Incorrect input vector, array of values expected<br />
 *   NULL
 *   ----
 *   vector d - fatal error
 *   <b>My ERROR</b> [256] log(x) for x <= 0 is undefined, you used: scale = -2.5<br />
 *     Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)<br />
 *   Aborting...<br />
 */
function set_error_handler(String $error_handler, Int32 $error_types = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Sets a user-defined exception handler function 
 * Example:   
 *   <?php
 *   function exception_handler($exception) {
 *     echo "Uncaught exception: " , $exception->getMessage(), "\n";
 *   }
 *   
 *   set_exception_handler('exception_handler');
 *   
 *   throw new Exception('Uncaught Exception');
 *   echo "Not Executed\n";
 *   ?>
 * 
 * Output: 
 */
function set_exception_handler(String $exception_handler) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Generates a user-level error/warning/notice message
 * Example:   
 *   <?php
 *   if ($divisor == 0) {
 *       trigger_error("Cannot divide by zero", E_USER_ERROR);
 *   }
 *   ?>
 * 
 * Output: 
 */
function trigger_error(String $error_msg, Int32 $error_type = k_E_USER_NOTICE) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Alias of  <function>trigger_error</function>
 * Example: 
 * 
 * Output: 
 */
function user_error(String $error_msg, Int32 $error_type = k_E_USER_NOTICE) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

