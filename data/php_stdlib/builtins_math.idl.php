<?php
/*
 * Purpose: Get value of pi
 * Example:   
 *   <?php
 *   echo pi(); // 3.1415926535898
 *   echo M_PI; // 3.1415926535898
 *   ?>
 * 
 * Output: 
 */
function pi() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find lowest value
 * Example:   
 *   <?php
 *   echo min(2, 3, 1, 6, 7);  // 1
 *   echo min(array(2, 4, 5)); // 2
 *   
 *   echo min(0, 'hello');     // 0
 *   echo min('hello', 0);     // hello
 *   echo min('hello', -1);    // -1
 *   
 *   // With multiple arrays, min compares from left to right
 *   // so in our example: 2 == 2, but 4 < 5
 *   $val = min(array(2, 4, 8), array(2, 5, 1)); // array(2, 4, 8)
 *   
 *   // If both an array and non-array are given, the array
 *   // is never returned as it's considered the largest
 *   $val = min('string', array(2, 5, 7), 42);   // string
 *   ?>
 * 
 * Output: 
 */
function min(Variant $value) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Find highest value
 * Example:   
 *   <?php
 *   echo max(1, 3, 5, 6, 7);  // 7
 *   echo max(array(2, 4, 5)); // 5
 *   
 *   // When 'hello' is cast as integer it will be 0. Both the parameters are equally
 *   // long, so the order they are given in determines the result
 *   echo max(0, 'hello');     // 0
 *   echo max('hello', 0);     // hello
 *   
 *   echo max('42', 3); // '42'
 *   
 *   // Here 0 > -1, so 'hello' is the return value.
 *   echo max(-1, 'hello');    // hello
 *   
 *   // With multiple arrays of different lengths, max returns the longest
 *   $val = max(array(2, 2, 2), array(1, 1, 1, 1)); // array(1, 1, 1, 1)
 *   
 *   // With multiple arrays of the same length, max compares from left to right
 *   // using lexicographic order, so in our example: 2 == 2, but 4 < 5
 *   $val = max(array(2, 4, 8), array(2, 5, 7)); // array(2, 5, 7)
 *   
 *   // If both an array and non-array are given, the array
 *   // is always returned as it's seen as the largest
 *   $val = max('string', array(2, 5, 7), 42);   // array(2, 5, 7)
 *   ?>
 * 
 * Output: 
 */
function max(Variant $value) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Absolute value
 * Example:   
 *   <?php
 *   $abs = abs(-4.2); // $abs = 4.2; (double/float)
 *   $abs2 = abs(5);   // $abs2 = 5; (integer)
 *   $abs3 = abs(-5);  // $abs3 = 5; (integer)
 *   ?>
 * 
 * Output: 
 */
function abs(Variant $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds whether a value is a legal finite number
 * Example: 
 * 
 * Output: 
 */
function is_finite(Double $val) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds whether a value is infinite
 * Example: 
 * 
 * Output: 
 */
function is_infinite(Double $val) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds whether a value is not a number
 * Example:   
 *   <?php
 *   // Invalid calculation, will return a 
 *   // NaN value
 *   $nan = acos(8);
 *   
 *   var_dump($nan, is_nan($nan));
 *   ?>
 * 
 * Output:   
 *   float(NAN)
 *   bool(true)
 */
function is_nan(Double $val) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Round fractions up
 * Example:   
 *   <?php
 *   echo ceil(4.3);    // 5
 *   echo ceil(9.999);  // 10
 *   echo ceil(-3.14);  // -3
 *   ?>
 * 
 * Output: 
 */
function ceil(Double $value) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Round fractions down
 * Example:   
 *   <?php
 *   echo floor(4.3);   // 4
 *   echo floor(9.999); // 9
 *   echo floor(-3.14); // -4
 *   ?>
 * 
 * Output: 
 */
function floor(Double $value) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Rounds a float
 * Example:   
 *   <?php
 *   echo round(3.4);         // 3
 *   echo round(3.5);         // 4
 *   echo round(3.6);         // 4
 *   echo round(3.6, 0);      // 4
 *   echo round(1.95583, 2);  // 1.96
 *   echo round(1241757, -3); // 1242000
 *   echo round(5.045, 2);    // 5.05
 *   echo round(5.055, 2);    // 5.06
 *   ?>
 * 
 * Output: 
 */
function round(Variant $val, Int64 $precision = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Converts the number in degrees to the radian equivalent
 * Example:   
 *   <?php
 *   
 *   echo deg2rad(45); // 0.785398163397
 *   var_dump(deg2rad(45) === M_PI_4); // bool(true)
 *   
 *   ?>
 * 
 * Output: 
 */
function deg2rad(Double $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Converts the radian number to the equivalent number in degrees
 * Example:   
 *   <?php
 *   
 *   echo rad2deg(M_PI_4); // 45
 *   
 *   ?>
 * 
 * Output: 
 */
function rad2deg(Double $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decimal to binary
 * Example:   
 *   <?php
 *   echo decbin(12) . "\n";
 *   echo decbin(26);
 *   ?>
 * 
 * Output:   
 *   1100
 *   11010
 */
function decbin(Int64 $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decimal to hexadecimal
 * Example:   
 *   <?php
 *   echo dechex(10) . "\n";
 *   echo dechex(47);
 *   ?>
 * 
 * Output:   
 *   a
 *   2f
 */
function dechex(Int64 $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decimal to octal
 * Example:   
 *   <?php
 *   echo decoct(15) . "\n";
 *   echo decoct(264);
 *   ?>
 * 
 * Output:   
 *   17
 *   410
 */
function decoct(Int64 $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binary to decimal
 * Example:   
 *   <?php
 *   echo bindec('110011') . "\n";
 *   echo bindec('000110011') . "\n";
 *   
 *   echo bindec('111');
 *   ?>
 * 
 * Output:   
 *   51
 *   51
 *   7
 */
function bindec(String $binary_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Hexadecimal to decimal
 * Example:   
 *   <?php
 *   var_dump(hexdec("See"));
 *   var_dump(hexdec("ee"));
 *   // both print "int(238)"
 *   
 *   var_dump(hexdec("that")); // print "int(10)"
 *   var_dump(hexdec("a0")); // print "int(160)"
 *   ?>
 * 
 * Output: 
 */
function hexdec(String $hex_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Octal to decimal
 * Example:   
 *   <?php
 *   echo octdec('77') . "\n";
 *   echo octdec(decoct(45));
 *   ?>
 * 
 * Output:   
 *   63
 *   45
 */
function octdec(String $octal_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert a number between arbitrary bases
 * Example:   
 *   <?php
 *   $hexadecimal = 'A37334';
 *   echo base_convert($hexadecimal, 16, 2);
 *   ?>
 * 
 * Output:   
 *   101000110111001100110100
 */
function base_convert(String $number, Int64 $frombase, Int64 $tobase) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Exponential expression
 * Example:   
 *   <?php
 *   
 *   var_dump(pow(2, 8)); // int(256)
 *   echo pow(-1, 20); // 1
 *   echo pow(0, 0); // 1
 *   
 *   echo pow(-1, 5.5); // PHP >4.0.6  NAN
 *   echo pow(-1, 5.5); // PHP <=4.0.6 1.#IND
 *   ?>
 * 
 * Output: 
 */
function pow(Variant $base, Variant $exp) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculates the exponent of  <constant>e</constant>
 * Example:   
 *   <?php
 *   echo exp(12) . "\n";
 *   echo exp(5.7);
 *   ?>
 * 
 * Output:   
 *   1.6275E+005
 *   298.87
 */
function exp(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Returns exp(number) - 1, computed in a way that is accurate even
 *    when the value of number is close to zero
 * Example: 
 * 
 * Output: 
 */
function expm1(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Base-10 logarithm
 * Example: 
 * 
 * Output: 
 */
function log10(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Returns log(1 + number), computed in a way that is accurate even when
 *    the value of number is close to zero
 * Example: 
 * 
 * Output: 
 */
function log1p(Double $number) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Natural logarithm
 * Example: 
 * 
 * Output: 
 */
function log(Double $arg, Double $base = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Cosine
 * Example:   
 *   <?php
 *   
 *   echo cos(M_PI); // -1
 *   
 *   ?>
 * 
 * Output: 
 */
function cos(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Hyperbolic cosine
 * Example: 
 * 
 * Output: 
 */
function cosh(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sine
 * Example:   
 *   <?php
 *   
 *   // Precision depends on your precision directive
 *   echo sin(deg2rad(60));  //  0.866025403 ...
 *   echo sin(60);           // -0.304810621 ...
 *   
 *   ?>
 * 
 * Output: 
 */
function sin(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Hyperbolic sine
 * Example: 
 * 
 * Output: 
 */
function sinh(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Tangent
 * Example:   
 *   <?php
 *   
 *   echo tan(M_PI_4); // 1
 *   
 *   ?>
 * 
 * Output: 
 */
function tan(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Hyperbolic tangent
 * Example: 
 * 
 * Output: 
 */
function tanh(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Arc cosine
 * Example: 
 * 
 * Output: 
 */
function acos(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Inverse hyperbolic cosine
 * Example: 
 * 
 * Output: 
 */
function acosh(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Arc sine
 * Example: 
 * 
 * Output: 
 */
function asin(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Inverse hyperbolic sine
 * Example: 
 * 
 * Output: 
 */
function asinh(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Arc tangent
 * Example: 
 * 
 * Output: 
 */
function atan(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Inverse hyperbolic tangent
 * Example: 
 * 
 * Output: 
 */
function atanh(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Arc tangent of two variables
 * Example: 
 * 
 * Output: 
 */
function atan2(Double $y, Double $x) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Calculate the length of the hypotenuse of a right-angle triangle
 * Example: 
 * 
 * Output: 
 */
function hypot(Double $x, Double $y) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the floating point remainder (modulo) of the division
 *   of the arguments
 * Example:   
 *   <?php
 *   $x = 5.7;
 *   $y = 1.3;
 *   $r = fmod($x, $y);
 *   // $r equals 0.5, because 4 * 1.3 + 0.5 = 5.7
 *   ?>
 * 
 * Output: 
 */
function fmod(Double $x, Double $y) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Square root
 * Example:   
 *   <?php
 *   // Precision depends on your precision directive
 *   echo sqrt(9); // 3
 *   echo sqrt(10); // 3.16227766 ...
 *   ?>
 * 
 * Output: 
 */
function sqrt(Double $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Show largest possible random value
 * Example: 
 * 
 * Output: 
 */
function getrandmax() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Seed the random number generator
 * Example:   
 *   <?php
 *   // seed with microseconds
 *   function make_seed()
 *   {
 *     list($usec, $sec) = explode(' ', microtime());
 *     return (float) $sec + ((float) $usec * 100000);
 *   }
 *   srand(make_seed());
 *   $randval = rand();
 *   ?>
 * 
 * Output: 
 */
function srand(Variant $seed = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Generate a random integer
 * Example:   
 *   <?php
 *   echo rand() . "\n";
 *   echo rand() . "\n";
 *   
 *   echo rand(5, 15);
 *   ?>
 * 
 * Output:   
 *   7771
 *   22264
 *   11
 */
function rand(Int64 $min = 0, Int64 $max = RAND_MAX) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Show largest possible random value
 * Example: 
 * 
 * Output: 
 */
function mt_getrandmax() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Seed the better random number generator
 * Example:   
 *   <?php
 *   // seed with microseconds
 *   function make_seed()
 *   {
 *     list($usec, $sec) = explode(' ', microtime());
 *     return (float) $sec + ((float) $usec * 100000);
 *   }
 *   mt_srand(make_seed());
 *   $randval = mt_rand();
 *   ?>
 * 
 * Output: 
 */
function mt_srand(Variant $seed = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Generate a better random value
 * Example:   
 *   <?php
 *   echo mt_rand() . "\n";
 *   echo mt_rand() . "\n";
 *   
 *   echo mt_rand(5, 15);
 *   ?>
 * 
 * Output:   
 *   1604716014
 *   1478613278
 *   6
 */
function mt_rand(Int64 $min = 0, Int64 $max = RAND_MAX) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Combined linear congruential generator
 * Example: 
 * 
 * Output: 
 */
function lcg_value() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

