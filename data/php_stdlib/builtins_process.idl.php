<?php
/*
 * Purpose: Set an alarm clock for delivery of a signal
 * Example: 
 * 
 * Output: 
 */
function pcntl_alarm(Int32 $seconds) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function pcntl_exec(String $path, StringVec $args = null_array, StringVec $envs = null_array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Forks the currently running process
 * Example:   
 *   <?php
 *   
 *   $pid = pcntl_fork();
 *   if ($pid == -1) {
 *        die('could not fork');
 *   } else if ($pid) {
 *        // we are the parent
 *        pcntl_wait($status); //Protect against Zombie children
 *   } else {
 *        // we are the child
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function pcntl_fork() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the priority of any process
 * Example: 
 * 
 * Output: 
 */
function pcntl_getpriority(Int32 $pid = 0, Int32 $process_identifier = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Change the priority of any process
 * Example: 
 * 
 * Output: 
 */
function pcntl_setpriority(Int32 $priority, Int32 $pid = 0, Int32 $process_identifier = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Installs a signal handler
 * Example:   
 *   <?php
 *   // tick use required as of PHP 4.3.0
 *   declare(ticks = 1);
 *   
 *   // signal handler function
 *   function sig_handler($signo)
 *   {
 *   
 *        switch ($signo) {
 *            case SIGTERM:
 *                // handle shutdown tasks
 *                exit;
 *                break;
 *            case SIGHUP:
 *                // handle restart tasks
 *                break;
 *            case SIGUSR1:
 *                echo "Caught SIGUSR1...\n";
 *                break;
 *            default:
 *                // handle all other signals
 *        }
 *   
 *   }
 *   
 *   echo "Installing signal handler...\n";
 *   
 *   // setup signal handlers
 *   pcntl_signal(SIGTERM, "sig_handler");
 *   pcntl_signal(SIGHUP,  "sig_handler");
 *   pcntl_signal(SIGUSR1, "sig_handler");
 *   
 *   // or use an object, available as of PHP 4.3.0
 *   // pcntl_signal(SIGUSR1, array($obj, "do_something");
 *   
 *   echo"Generating signal SIGTERM to self...\n";
 *   
 *   // send SIGUSR1 to current process id
 *   posix_kill(posix_getpid(), SIGUSR1);
 *   
 *   echo "Done\n"
 *   
 *   ?>
 * 
 * Output: 
 */
function pcntl_signal(Int32 $signo, Variant $handler, Boolean $restart_syscalls = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Waits on or returns the status of a forked child
 * Example: 
 * 
 * Output: 
 */
function pcntl_wait(Int32 &$status, Int32 $options = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Waits on or returns the status of a forked child
 * Example: 
 * 
 * Output: 
 */
function pcntl_waitpid(Int32 $pid, Int32 &$status, Int32 $options = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the return code of a terminated child
 * Example: 
 * 
 * Output: 
 */
function pcntl_wexitstatus(Int32 $status) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if status code represents a normal exit
 * Example: 
 * 
 * Output: 
 */
function pcntl_wifexited(Int32 $status) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks whether the status code represents a termination due to a signal
 * Example: 
 * 
 * Output: 
 */
function pcntl_wifsignaled(Int32 $status) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks whether the child process is currently stopped
 * Example: 
 * 
 * Output: 
 */
function pcntl_wifstopped(Int32 $status) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the signal which caused the child to stop
 * Example: 
 * 
 * Output: 
 */
function pcntl_wstopsig(Int32 $status) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the signal which caused the child to terminate
 * Example: 
 * 
 * Output: 
 */
function pcntl_wtermsig(Int32 $status) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Execute command via shell and return the complete output as a string
 * Example:   
 *   <?php
 *   $output = shell_exec('ls -lart');
 *   echo "<pre>$output</pre>";
 *   ?>
 * 
 * Output: 
 */
function shell_exec(String $cmd) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Execute an external program
 * Example:   
 *   <?php
 *   // outputs the username that owns the running php/httpd process
 *   // (on a system with the "whoami" executable in the path)
 *   echo exec('whoami');
 *   ?>
 * 
 * Output: 
 */
function exec(String $command, VariantMap &$output = null, Int32 &$return_var = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Execute an external program and display raw output
 * Example: 
 * 
 * Output: 
 */
function passthru(String $command, Int32 &$return_var = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Execute an external program and display the output
 * Example:   
 *   <?php
 *   echo '<pre>';
 *   
 *   // Outputs all the result of shellcommand "ls", and returns
 *   // the last output line into $last_line. Stores the return value
 *   // of the shell command in $retval.
 *   $last_line = system('ls', $retval);
 *   
 *   // Printing additional info
 *   echo '
 *   </pre>
 *   <hr />Last line of the output: ' . $last_line . '
 *   <hr />Return value: ' . $retval;
 *   ?>
 * 
 * Output: 
 */
function system(String $command, Int32 &$return_var = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:      Execute a command and open file pointers for input/output
 * Example:   
 *   <?php
 *   $descriptorspec = array(
 *      0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
 *      1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
 *      2 => array("file", "/tmp/error-output.txt", "a") // stderr is a file to write to
 *   );
 *   
 *   $cwd = '/tmp';
 *   $env = array('some_option' => 'aeiou');
 *   
 *   $process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);
 *   
 *   if (is_resource($process)) {
 *       // $pipes now looks like this:
 *       // 0 => writeable handle connected to child stdin
 *       // 1 => readable handle connected to child stdout
 *       // Any error output will be appended to /tmp/error-output.txt
 *   
 *       fwrite($pipes[0], '<?php print_r($_ENV); ?>');
 *       fclose($pipes[0]);
 *   
 *       echo stream_get_contents($pipes[1]);
 *       fclose($pipes[1]);
 *   
 *       // It is important that you close any pipes before calling
 *       // proc_close in order to avoid a deadlock
 *       $return_value = proc_close($process);
 *   
 *       echo "command returned $return_value\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [some_option] => aeiou
 *       [PWD] => /tmp
 *       [SHLVL] => 1
 *       [_] => /usr/local/bin/php
 *   )
 *   command returned 0
 */
function proc_open(String $cmd, VariantVec $descriptorspec, VariantVec &$pipes, String $cwd = null_string, Variant $env = null_variant, Variant $other_options = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Kills a process opened by proc_open
 * Example: 
 * 
 * Output: 
 */
function proc_terminate(Resource $process, Int32 $signal = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Close a process opened by  <function>proc_open</function>  and return the exit code of that process
 * Example: 
 * 
 * Output: 
 */
function proc_close(Resource $process) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get information about a process opened by  <function>proc_open</function>
 * Example: 
 * 
 * Output: 
 */
function proc_get_status(Resource $process) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Change the priority of the current process
 * Example: 
 * 
 * Output: 
 */
function proc_nice(Int32 $increment) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Escape a string to be used as a shell argument
 * Example:   
 *   <?php
 *   system('ls '.escapeshellarg($dir));
 *   ?>
 * 
 * Output: 
 */
function escapeshellarg(String $arg) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Escape shell metacharacters
 * Example:   
 *   <?php
 *   $e = escapeshellcmd($userinput);
 *    
 *   // here we don't care if $e has spaces
 *   system("echo $e");
 *   $f = escapeshellcmd($filename);
 *    
 *   // and here we do, so we use quotes
 *   system("touch \"/tmp/$f\"; ls -l \"/tmp/$f\"");
 *   ?>
 * 
 * Output: 
 */
function escapeshellcmd(String $command) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

