<?php
/*
 * Purpose: Retrieve information about the currently installed GD library
 * Example:   
 *   <?php
 *   var_dump(gd_info());
 *   ?>
 * 
 * Output:   
 *   array(9) {
 *     ["GD Version"]=>
 *     string(24) "bundled (2.0 compatible)"
 *     ["FreeType Support"]=>
 *     bool(false)
 *     ["T1Lib Support"]=>
 *     bool(false)
 *     ["GIF Read Support"]=>
 *     bool(true)
 *     ["GIF Create Support"]=>
 *     bool(false)
 *     ["JPEG Support"]=>
 *     bool(false)
 *     ["PNG Support"]=>
 *     bool(true)
 *     ["WBMP Support"]=>
 *     bool(true)
 *     ["XBM Support"]=>
 *     bool(false)
 *   }
 */
function gd_info() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the size of an image
 * Example:   
 *   <?php
 *   $size = getimagesize($filename);
 *   $fp = fopen($filename, "rb");
 *   if ($size && $fp) {
 *       header("Content-type: {$size['mime']}");
 *       fpassthru($fp);
 *       exit;
 *   } else {
 *       // error
 *   }
 *   ?>
 * 
 * Output: 
 */
function getimagesize(String $filename, VariantMap &$imageinfo = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get file extension for image type
 * Example:   
 *   <?php
 *   // Create image instance
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // Save image
 *   imagepng($im, './test' . image_type_to_extension(IMAGETYPE_PNG));
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function image_type_to_extension(Int32 $imagetype, Boolean $include_dot = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get Mime-Type for image-type returned by getimagesize,
 *    exif_read_data, exif_thumbnail, exif_imagetype
 * Example:   
 *   <?php
 *   header("Content-type: " . image_type_to_mime_type(IMAGETYPE_PNG));
 *   ?>
 * 
 * Output: 
 */
function image_type_to_mime_type(Int32 $imagetype) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output image to browser or file
 * Example:   
 *   <?php
 *   $file = 'php.png';
 *   $image = imagecreatefrompng($file);
 *   
 *   header('Content-type: ' . image_type_to_mime_type(IMAGETYPE_WBMP));
 *   image2wbmp($image); // output the stream directly
 *   imagedestroy($image);
 *   ?>
 * 
 * Output: 
 */
function image2wbmp(Resource $image, String $filename = null_string, Int32 $threshold = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the blending mode for an image
 * Example:   
 *   <?php
 *   // Create image
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // Set alphablending to on
 *   imagealphablending($im, true);
 *   
 *   // Draw a square
 *   imagefilledrectangle($im, 30, 30, 70, 70, imagecolorallocate($im, 255, 0, 0));
 *   
 *   // Output
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagealphablending(Resource $image, Boolean $blendmode) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Should antialias functions be used or not
 * Example:   
 *   <?php
 *   // Setup an anti-aliased image and a normal image
 *   $aa = imagecreatetruecolor(400, 100);
 *   $normal = imagecreatetruecolor(200, 100);
 *   
 *   // Switch antialiasing on for one image
 *   imageantialias($aa, true);
 *   
 *   // Allocate colors
 *   $red = imagecolorallocate($normal, 255, 0, 0);
 *   $red_aa = imagecolorallocate($aa, 255, 0, 0);
 *   
 *   // Draw two lines, one with AA enabled
 *   imageline($normal, 0, 0, 200, 100, $red);
 *   imageline($aa, 0, 0, 200, 100, $red_aa);
 *   
 *   // Merge the two images side by side for output (AA: left, Normal: Right)
 *   imagecopymerge($aa, $normal, 200, 0, 0, 0, 200, 100, 100);
 *   
 *   // Output image
 *   header('Content-type: image/png');
 *   
 *   imagepng($aa);
 *   imagedestroy($aa);
 *   imagedestroy($normal);
 *   ?>
 * 
 * Output: 
 */
function imageantialias(Resource $image, Boolean $on) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draws an arc
 * Example:   
 *   <?php
 *   
 *   // create a 200*200 image
 *   $img = imagecreatetruecolor(200, 200);
 *   
 *   // allocate some colors
 *   $white = imagecolorallocate($img, 255, 255, 255);
 *   $red   = imagecolorallocate($img, 255,   0,   0);
 *   $green = imagecolorallocate($img,   0, 255,   0);
 *   $blue  = imagecolorallocate($img,   0,   0, 255);
 *   
 *   // draw the head
 *   imagearc($img, 100, 100, 200, 200,  0, 360, $white);
 *   // mouth
 *   imagearc($img, 100, 100, 150, 150, 25, 155, $red);
 *   // left and then the right eye
 *   imagearc($img,  60,  75,  50,  50,  0, 360, $green);
 *   imagearc($img, 140,  75,  50,  50,  0, 360, $blue);
 *   
 *   // output image in the browser
 *   header("Content-type: image/png");
 *   imagepng($img);
 *   
 *   // free memory
 *   imagedestroy($img);
 *   
 *   ?>
 * 
 * Output: 
 */
function imagearc(Resource $image, Int32 $cx, Int32 $cy, Int32 $width, Int32 $height, Int32 $start, Int32 $end, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a character horizontally
 * Example:   
 *   <?php
 *   
 *   $im = imagecreate(100, 100);
 *   
 *   $string = 'PHP';
 *   
 *   $bg = imagecolorallocate($im, 255, 255, 255);
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   
 *   // prints a black "P" in the top left corner
 *   imagechar($im, 1, 0, 0, $string, $black);
 *   
 *   header('Content-type: image/png');
 *   imagepng($im);
 *   
 *   ?>
 * 
 * Output: 
 */
function imagechar(Resource $image, Int32 $font, Int32 $x, Int32 $y, String $c, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a character vertically
 * Example:   
 *   <?php
 *   
 *   $im = imagecreate(100, 100);
 *   
 *   $string = 'Note that the first letter is a N';
 *   
 *   $bg = imagecolorallocate($im, 255, 255, 255);
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   
 *   // prints a black "Z" on a white background
 *   imagecharup($im, 3, 10, 10, $string, $black);
 *   
 *   header('Content-type: image/png');
 *   imagepng($im);
 *   
 *   ?>
 * 
 * Output: 
 */
function imagecharup(Resource $image, Int32 $font, Int32 $x, Int32 $y, String $c, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Allocate a color for an image
 * Example:   
 *   <?php
 *   
 *   $im = imagecreate(100, 100);
 *   
 *   // sets background to red
 *   $background = imagecolorallocate($im, 255, 0, 0);
 *   
 *   // sets some colors
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   
 *   // hexadecimal way
 *   $white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
 *   $black = imagecolorallocate($im, 0x00, 0x00, 0x00);
 *   
 *   ?>
 * 
 * Output: 
 */
function imagecolorallocate(Resource $image, Int32 $red, Int32 $green, Int32 $blue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Allocate a color for an image
 * Example:   
 *   <?php
 *   $size = 300;
 *   $image=imagecreatetruecolor($size, $size);
 *   
 *   // something to get a white background with black border
 *   $back = imagecolorallocate($image, 255, 255, 255);
 *   $border = imagecolorallocate($image, 0, 0, 0);
 *   imagefilledrectangle($image, 0, 0, $size - 1, $size - 1, $back);
 *   imagerectangle($image, 0, 0, $size - 1, $size - 1, $border);
 *   
 *   $yellow_x = 100;
 *   $yellow_y = 75;
 *   $red_x    = 120;
 *   $red_y    = 165;
 *   $blue_x   = 187;
 *   $blue_y   = 125;
 *   $radius   = 150;
 *   
 *   // allocate colors with alpha values
 *   $yellow = imagecolorallocatealpha($image, 255, 255, 0, 75);
 *   $red    = imagecolorallocatealpha($image, 255, 0, 0, 75);
 *   $blue   = imagecolorallocatealpha($image, 0, 0, 255, 75);
 *   
 *   // drawing 3 overlapped circle
 *   imagefilledellipse($image, $yellow_x, $yellow_y, $radius, $radius, $yellow);
 *   imagefilledellipse($image, $red_x, $red_y, $radius, $radius, $red);
 *   imagefilledellipse($image, $blue_x, $blue_y, $radius, $radius, $blue);
 *   
 *   // don't forget to output a correct header!
 *   header('Content-type: image/png');
 *   
 *   // and finally, output the result
 *   imagepng($image);
 *   imagedestroy($image);
 *   ?>
 * 
 * Output: 
 */
function imagecolorallocatealpha(Resource $image, Int32 $red, Int32 $green, Int32 $blue, Int32 $alpha) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the color of a pixel
 * Example:   
 *   <?php
 *   $im = imagecreatefrompng("php.png");
 *   $rgb = imagecolorat($im, 10, 15);
 *   $r = ($rgb >> 16) & 0xFF;
 *   $g = ($rgb >> 8) & 0xFF;
 *   $b = $rgb & 0xFF;
 *   
 *   var_dump($r, $g, $b);
 *   ?>
 * 
 * Output:   
 *   int(119)
 *   int(123)
 *   int(180)
 */
function imagecolorat(Resource $image, Int32 $x, Int32 $y) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the closest color to the specified color
 * Example:   
 *   <?php
 *   // Start with an image and convert it to a palette-based image
 *   $im = imagecreatefrompng('figures/imagecolorclosest.png');
 *   imagetruecolortopalette($im, false, 255);
 *   
 *   // Search colors (RGB)
 *   $colors = array(
 *       array(254, 145, 154),
 *       array(153, 145, 188),
 *       array(153, 90, 145),
 *       array(255, 137, 92)
 *   );
 *   
 *   // Loop through each search and find the closest color in the palette.
 *   // Return the search number, the search RGB and the converted RGB match
 *   foreach($colors as $id => $rgb)
 *   {
 *       $result = imagecolorclosest($im, $rgb[0], $rgb[1], $rgb[2]);
 *       $result = imagecolorsforindex($im, $result);
 *       $result = "({$result['red']}, {$result['green']}, {$result['blue']})";
 *   
 *       echo "#$id: Search ($rgb[0], $rgb[1], $rgb[2]); Closest match: $result.\n";
 *   }
 *   
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   #0: Search (254, 145, 154); Closest match: (252, 150, 148).
 *   #1: Search (153, 145, 188); Closest match: (148, 150, 196).
 *   #2: Search (153, 90, 145); Closest match: (148, 90, 156).
 *   #3: Search (255, 137, 92); Closest match: (252, 150, 92).
 */
function imagecolorclosest(Resource $image, Int32 $red, Int32 $green, Int32 $blue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the closest color to the specified color + alpha
 * Example:   
 *   <?php
 *   // Start with an image and convert it to a palette-based image
 *   $im = imagecreatefrompng('figures/imagecolorclosest.png');
 *   imagetruecolortopalette($im, false, 255);
 *   
 *   // Search colors (RGB)
 *   $colors = array(
 *       array(254, 145, 154, 50),
 *       array(153, 145, 188, 127),
 *       array(153, 90, 145, 0),
 *       array(255, 137, 92, 84)
 *   );
 *   
 *   // Loop through each search and find the closest color in the palette.
 *   // Return the search number, the search RGB and the converted RGB match
 *   foreach($colors as $id => $rgb)
 *   {
 *       $result = imagecolorclosestalpha($im, $rgb[0], $rgb[1], $rgb[2], $rgb[3]);
 *       $result = imagecolorsforindex($im, $result);
 *       $result = "({$result['red']}, {$result['green']}, {$result['blue']}, {$result['alpha']})";
 *   
 *       echo "#$id: Search ($rgb[0], $rgb[1], $rgb[2], $rgb[3]); Closest match: $result.\n";
 *   }
 *   
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   #0: Search (254, 145, 154, 50); Closest match: (252, 150, 148, 0).
 *   #1: Search (153, 145, 188, 127); Closest match: (148, 150, 196, 0).
 *   #2: Search (153, 90, 145, 0); Closest match: (148, 90, 156, 0).
 *   #3: Search (255, 137, 92, 84); Closest match: (252, 150, 92, 0).
 */
function imagecolorclosestalpha(Resource $image, Int32 $red, Int32 $green, Int32 $blue, Int32 $alpha) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the color which has the hue, white and blackness
 * Example:   
 *   <?php
 *   $im = imagecreatefromgif('php.gif');
 *   
 *   echo 'HWB: ' . imagecolorclosesthwb($im, 116, 115, 152);
 *   
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   HWB: 33
 */
function imagecolorclosesthwb(Resource $image, Int32 $red, Int32 $green, Int32 $blue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: De-allocate a color for an image
 * Example:   
 *   <?php
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   imagecolordeallocate($im, $white);
 *   ?>
 * 
 * Output: 
 */
function imagecolordeallocate(Resource $image, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the specified color
 * Example:   
 *   <?php
 *   // Setup an image
 *   $im = imagecreatefrompng('./gdlogo.png');
 *   
 *   $colors   = Array();
 *   $colors[] = imagecolorexact($im, 255, 0, 0);
 *   $colors[] = imagecolorexact($im, 0, 0, 0);
 *   $colors[] = imagecolorexact($im, 255, 255, 255);
 *   $colors[] = imagecolorexact($im, 100, 255, 52);
 *   
 *   print_r($colors);
 *   
 *   // Free from memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => 16711680
 *       [1] => 0
 *       [2] => 16777215
 *       [3] => 6618932
 *   )
 */
function imagecolorexact(Resource $image, Int32 $red, Int32 $green, Int32 $blue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the specified color + alpha
 * Example:   
 *   <?php
 *   
 *   // Setup an image
 *   $im = imagecreatefrompng('./gdlogo.png');
 *   
 *   $colors   = Array();
 *   $colors[] = imagecolorexactalpha($im, 255, 0, 0, 0);
 *   $colors[] = imagecolorexactalpha($im, 0, 0, 0, 127);
 *   $colors[] = imagecolorexactalpha($im, 255, 255, 255, 55);
 *   $colors[] = imagecolorexactalpha($im, 100, 255, 52, 20);
 *   
 *   print_r($colors);
 *   
 *   // Free from memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => 16711680
 *       [1] => 2130706432
 *       [2] => 939524095
 *       [3] => 342163252
 *   )
 */
function imagecolorexactalpha(Resource $image, Int32 $red, Int32 $green, Int32 $blue, Int32 $alpha) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Makes the colors of the palette version of an image more closely match the true color version
 * Example:   
 *   <?php
 *   // Setup the true color and palette images
 *   $im1 = imagecreatefrompng('./gdlogo.png');
 *   $im2 = imagecreate(imagesx($im1), imagesy($im1));
 *   
 *   // Add some colors to $im2
 *   $colors   = Array();
 *   $colors[] = imagecolorallocate($im2, 255, 36, 74);
 *   $colors[] = imagecolorallocate($im2, 40, 0, 240);
 *   $colors[] = imagecolorallocate($im2, 82, 100, 255);
 *   $colors[] = imagecolorallocate($im2, 84, 63, 44);
 *   
 *   // Match these colors with the true color image
 *   imagecolormatch($im1, $im2);
 *   
 *   // Free from memory
 *   imagedestroy($im1);
 *   imagedestroy($im2);
 *   ?>
 * 
 * Output: 
 */
function imagecolormatch(Resource $image1, Resource $image2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the specified color or its closest possible alternative
 * Example:   
 *   <?php
 *   // Load an image
 *   $im = imagecreatefromgif('phplogo.gif');
 *   
 *   // Get closest colors from the image
 *   $colors = array();
 *   $colors[] = imagecolorresolve($im, 255, 255, 255);
 *   $colors[] = imagecolorresolve($im, 0, 0, 200);
 *   
 *   // Output
 *   print_r($colors);
 *   
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => 89
 *       [1] => 85
 *   )
 */
function imagecolorresolve(Resource $image, Int32 $red, Int32 $green, Int32 $blue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the index of the specified color + alpha or its closest possible alternative
 * Example:   
 *   <?php
 *   // Load an image
 *   $im = imagecreatefromgif('phplogo.gif');
 *   
 *   // Get closest colors from the image
 *   $colors = array();
 *   $colors[] = imagecolorresolvealpha($im, 255, 255, 255, 0);
 *   $colors[] = imagecolorresolvealpha($im, 0, 0, 200, 127);
 *   
 *   // Output
 *   print_r($colors);
 *   
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => 89
 *       [1] => 85
 *   )
 */
function imagecolorresolvealpha(Resource $image, Int32 $red, Int32 $green, Int32 $blue, Int32 $alpha) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the color for the specified palette index
 * Example:   
 *   <?php
 *   // Create a 300x100 image
 *   $im = imagecreate(300, 100);
 *   
 *   // Set the background to be red
 *   imagecolorallocate($im, 255, 0, 0);
 *   
 *   // Get the color index for the background
 *   $bg = imagecolorat($im, 0, 0);
 *   
 *   // Set the backgrund to be blue
 *   imagecolorset($im, $bg, 0, 0, 255);
 *   
 *   // Output the image to the browser
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagecolorset(Resource $image, Int32 $index, Int32 $red, Int32 $green, Int32 $blue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the colors for an index
 * Example:   
 *   <?php
 *   
 *   // open an image
 *   $im = imagecreatefrompng('nexen.png');
 *   
 *   // get a color
 *   $start_x = 40;
 *   $start_y = 50;
 *   $color_index = imagecolorat($im, $start_x, $start_y);
 *   
 *   // make it human readable
 *   $color_tran = imagecolorsforindex($im, $color_index);
 *   
 *   // what is it ?
 *   print_r($color_tran);
 *   
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *      [red] => 226
 *      [green] => 222
 *      [blue] => 252
 *      [alpha] => 0
 *   )
 */
function imagecolorsforindex(Resource $image, Int32 $index) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find out the number of colors in an image's palette
 * Example:   
 *   <?php
 *   // Create image instance
 *   $im = imagecreatefromgif('php.gif');
 *   
 *   echo 'Total colors in image: ' . imagecolorstotal($im);
 *   
 *   // Free image
 *   imagedestroy($im);
 *   ?>
 * 
 * Output:   
 *   Total colors in image: 128
 */
function imagecolorstotal(Resource $image) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Define a color as transparent
 * Example:   
 *   <?php
 *   // Create a 55x30 image
 *   $im = imagecreatetruecolor(55, 30);
 *   $red = imagecolorallocate($im, 255, 0, 0);
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   
 *   // Make the background transparent
 *   imagecolortransparent($im, $black);
 *   
 *   // Draw a red rectangle
 *   imagefilledrectangle($im, 4, 4, 50, 25, $red);
 *   
 *   // Save the image
 *   imagepng($im, './imagecolortransparent.png');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagecolortransparent(Resource $image, Int32 $color = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Apply a 3x3 convolution matrix, using coefficient and offset
 * Example:   
 *   <?php
 *   $image = imagecreatefromgif('http://www.php.net/images/php.gif');
 *   
 *   $emboss = array(array(2, 0, 0), array(0, -1, 0), array(0, 0, -1));
 *   imageconvolution($image, $emboss, 1, 127);
 *   
 *   header('Content-Type: image/png');
 *   imagepng($image, null, 9);
 *   ?>
 * 
 * Output: 
 */
function imageconvolution(Resource $image, Int64Map $matrix, Double $div, Double $offset) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Copy part of an image
 * Example:   
 *   <?php
 *   // Create image instances
 *   $src = imagecreatefromgif('php.gif');
 *   $dest = imagecreatetruecolor(80, 40);
 *   
 *   // Copy
 *   imagecopy($dest, $src, 0, 0, 20, 13, 80, 40);
 *   
 *   // Output and free from memory
 *   header('Content-Type: image/gif');
 *   imagegif($dest);
 *   
 *   imagedestroy($dest);
 *   imagedestroy($src);
 *   ?>
 * 
 * Output: 
 */
function imagecopy(Resource $dst_im, Resource $src_im, Int32 $dst_x, Int32 $dst_y, Int32 $src_x, Int32 $src_y, Int32 $src_w, Int32 $src_h) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Copy and merge part of an image
 * Example:   
 *   <?php
 *   // Create image instances
 *   $dest = imagecreatefromgif('php.gif');
 *   $src = imagecreatefromgif('php.gif');
 *   
 *   // Copy and merge
 *   imagecopymerge($dest, $src, 10, 10, 0, 0, 100, 47, 75);
 *   
 *   // Output and free from memory
 *   header('Content-Type: image/gif');
 *   imagegif($dest);
 *   
 *   imagedestroy($dest);
 *   imagedestroy($src);
 *   ?>
 * 
 * Output: 
 */
function imagecopymerge(Resource $dst_im, Resource $src_im, Int32 $dst_x, Int32 $dst_y, Int32 $src_x, Int32 $src_y, Int32 $src_w, Int32 $src_h, Int32 $pct) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Copy and merge part of an image with gray scale
 * Example:   
 *   <?php
 *   // Create image instances
 *   $dest = imagecreatefromgif('php.gif');
 *   $src = imagecreatefromgif('php.gif');
 *   
 *   // Copy and merge - Gray = 20%
 *   imagecopymergegray($dest, $src, 10, 10, 0, 0, 100, 47, 20);
 *   
 *   // Output and free from memory
 *   header('Content-Type: image/gif');
 *   imagegif($dest);
 *   
 *   imagedestroy($dest);
 *   imagedestroy($src);
 *   ?>
 * 
 * Output: 
 */
function imagecopymergegray(Resource $dst_im, Resource $src_im, Int32 $dst_x, Int32 $dst_y, Int32 $src_x, Int32 $src_y, Int32 $src_w, Int32 $src_h, Int32 $pct) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Copy and resize part of an image with resampling
 * Example:   
 *   <?php
 *   // The file
 *   $filename = 'test.jpg';
 *   $percent = 0.5;
 *   
 *   // Content type
 *   header('Content-type: image/jpeg');
 *   
 *   // Get new dimensions
 *   list($width, $height) = getimagesize($filename);
 *   $new_width = $width * $percent;
 *   $new_height = $height * $percent;
 *   
 *   // Resample
 *   $image_p = imagecreatetruecolor($new_width, $new_height);
 *   $image = imagecreatefromjpeg($filename);
 *   imagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
 *   
 *   // Output
 *   imagejpeg($image_p, null, 100);
 *   ?>
 * 
 * Output: 
 */
function imagecopyresampled(Resource $dst_im, Resource $src_im, Int32 $dst_x, Int32 $dst_y, Int32 $src_x, Int32 $src_y, Int32 $dst_w, Int32 $dst_h, Int32 $src_w, Int32 $src_h) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Copy and resize part of an image
 * Example:   
 *   <?php
 *   // File and new size
 *   $filename = 'test.jpg';
 *   $percent = 0.5;
 *   
 *   // Content type
 *   header('Content-type: image/jpeg');
 *   
 *   // Get new sizes
 *   list($width, $height) = getimagesize($filename);
 *   $newwidth = $width * $percent;
 *   $newheight = $height * $percent;
 *   
 *   // Load
 *   $thumb = imagecreatetruecolor($newwidth, $newheight);
 *   $source = imagecreatefromjpeg($filename);
 *   
 *   // Resize
 *   imagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);
 *   
 *   // Output
 *   imagejpeg($thumb);
 *   ?>
 * 
 * Output: 
 */
function imagecopyresized(Resource $dst_im, Resource $src_im, Int32 $dst_x, Int32 $dst_y, Int32 $src_x, Int32 $src_y, Int32 $dst_w, Int32 $dst_h, Int32 $src_w, Int32 $src_h) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new palette based image
 * Example:   
 *   <?php
 *   header("Content-type: image/png");
 *   $im = @imagecreate(110, 20)
 *       or die("Cannot Initialize new GD image stream");
 *   $background_color = imagecolorallocate($im, 0, 0, 0);
 *   $text_color = imagecolorallocate($im, 233, 14, 91);
 *   imagestring($im, 1, 5, 5,  "A Simple Text String", $text_color);
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagecreate(Int32 $width, Int32 $height) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from a given part of GD2 file or URL
 * Example:   
 *   <?php
 *   // For this example we need the image size before
 *   $image = getimagesize('./test.gd2');
 *   
 *   // Create the image instance now we got the image 
 *   // sizes
 *   $im = imagecreatefromgd2part('./test.gd2', 4, 4, ($image[0] / 2) - 6, ($image[1] / 2) - 6);
 *   
 *   // Do an image operation, in this case we emboss the 
 *   // image if PHP5+
 *   if(function_exists('imagefilter'))
 *   {
 *       imagefilter($im, IMG_FILTER_EMBOSS);
 *   }
 *   
 *   // Save optimized image
 *   imagegd2($im, './test_emboss.gd2');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromgd2part(String $filename, Int32 $srcX, Int32 $srcY, Int32 $width, Int32 $height) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from GD file or URL
 * Example:   
 *   <?php
 *   // Load the gd image
 *   $im = @imagecreatefromgd('./test.gd');
 *   
 *   // Test if the image was loaded
 *   if(!is_resource($im))
 *   {
 *        die('Unable to load gd image!');
 *   }
 *   
 *   // Do image operations here
 *   
 *   // Save the image
 *   imagegd($im, './test_updated.gd');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromgd(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from GD2 file or URL
 * Example:   
 *   <?php
 *   // Load the gd2 image
 *   $im = imagecreatefromgd2('./test.gd2');
 *   
 *   // Apply an effect on the image, in this 
 *   // case negate the image if PHP5+
 *   if(function_exists('imagefilter'))
 *   {
 *       imagefilter($im, IMG_FILTER_NEGATE);
 *   }
 *   
 *   // Save the image
 *   imagegd2($im, './test_updated.gd2');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromgd2(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from file or URL
 * Example:   
 *   <?php
 *   function LoadGif($imgname)
 *   {
 *       /* Attempt to open  * / 
 *       $im = @imagecreatefromgif($imgname);
 *   
 *       /* See if it failed  * / 
 *       if(!$im)
 *       {
 *           /* Create a blank image  * / 
 *           $im = imagecreatetruecolor (150, 30);
 *           $bgc = imagecolorallocate ($im, 255, 255, 255);
 *           $tc = imagecolorallocate ($im, 0, 0, 0);
 *   
 *           imagefilledrectangle ($im, 0, 0, 150, 30, $bgc);
 *   
 *           /* Output an error message  * / 
 *           imagestring ($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
 *       }
 *   
 *       return $im;
 *   }
 *   
 *   header('Content-Type: image/gif');
 *   
 *   $img = LoadGif('bogus.image');
 *   
 *   imagegif($img);
 *   imagedestroy($img);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromgif(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from file or URL
 * Example:   
 *   <?php
 *   function LoadJpeg($imgname)
 *   {
 *       /* Attempt to open  * / 
 *       $im = @imagecreatefromjpeg($imgname);
 *   
 *       /* See if it failed  * / 
 *       if(!$im)
 *       {
 *           /* Create a black image  * / 
 *           $im  = imagecreatetruecolor(150, 30);
 *           $bgc = imagecolorallocate($im, 255, 255, 255);
 *           $tc  = imagecolorallocate($im, 0, 0, 0);
 *   
 *           imagefilledrectangle($im, 0, 0, 150, 30, $bgc);
 *   
 *           /* Output an error message  * / 
 *           imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
 *       }
 *   
 *       return $im;
 *   }
 *   
 *   header('Content-Type: image/jpeg');
 *   
 *   $img = LoadJpeg('bogus.image');
 *   
 *   imagejpeg($img);
 *   imagedestroy($img);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromjpeg(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from file or URL
 * Example:   
 *   <?php
 *   function LoadPNG($imgname)
 *   {
 *       /* Attempt to open  * / 
 *       $im = @imagecreatefrompng($imgname);
 *   
 *       /* See if it failed  * / 
 *       if(!$im)
 *       {
 *           /* Create a blank image  * / 
 *           $im  = imagecreatetruecolor(150, 30);
 *           $bgc = imagecolorallocate($im, 255, 255, 255);
 *           $tc  = imagecolorallocate($im, 0, 0, 0);
 *   
 *           imagefilledrectangle($im, 0, 0, 150, 30, $bgc);
 *   
 *           /* Output an error message  * / 
 *           imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
 *       }
 *   
 *       return $im;
 *   }
 *   
 *   header('Content-Type: image/png');
 *   
 *   $img = LoadPNG('bogus.image');
 *   
 *   imagepng($img);
 *   imagedestroy($img);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefrompng(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from the image stream in the string
 * Example:   
 *   <?php
 *   $data = 'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAMAAAB/2U7WAAAABl'
 *          . 'BMVEUAAAD///+l2Z/dAAAASUlEQVR4XqWQUQoAIAxC2/0vXZDr'
 *          . 'EX4IJTRkb7lobNUStXsB0jIXIAMSsQnWlsV+wULF4Avk9fLq2r'
 *          . '8a5HSE35Q3eO2XP1A1wQkZSgETvDtKdQAAAABJRU5ErkJggg==';
 *   $data = base64_decode($data);
 *   
 *   $im = imagecreatefromstring($data);
 *   if ($im !== false) {
 *       header('Content-Type: image/png');
 *       imagepng($im);
 *       imagedestroy($im);
 *   }
 *   else {
 *       echo 'An error occurred.';
 *   }
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromstring(String $data) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from file or URL
 * Example:   
 *   <?php
 *   function LoadWBMP($imgname)
 *   {
 *       /* Attempt to open  * / 
 *       $im = @imagecreatefromwbmp($imgname);
 *   
 *       /* See if it failed  * / 
 *       if(!$im)
 *       {
 *           /* Create a blank image  * / 
 *           $im  = imagecreatetruecolor(150, 30);
 *           $bgc = imagecolorallocate($im, 255, 255, 255);
 *           $tc  = imagecolorallocate($im, 0, 0, 0);
 *   
 *           imagefilledrectangle($im, 0, 0, 150, 30, $bgc);
 *   
 *           /* Output an error message  * / 
 *           imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
 *       }
 *   
 *       return $im;
 *   }
 *   
 *   header('Content-type: image/vnd.wap.wbmp');
 *   
 *   $img = LoadWBMP('bogus.image');
 *   
 *   imagewbmp($img);
 *   imagedestroy($img);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromwbmp(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from file or URL
 * Example:   
 *   <?php
 *   // Load the xbm file
 *   $xbm = imagecreatefromxbm('./example.xbm');
 *   
 *   // Convert it to a png file
 *   imagepng($xbm, './example.png');
 *   imagedestroy($xbm);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromxbm(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new image from file or URL
 * Example:   
 *   <?php
 *   // Check for XPM support
 *   if(!(imagetypes() & IMG_XPM))
 *   {
 *       die('Support for xpm was not found!');
 *   }
 *   
 *   // Create the image instance
 *   $xpm = imagecreatefromxpm('./example.xpm');
 *   
 *   // Do image operations here
 *   
 *   // PHP has no support for writing xpm images
 *   // so in this case we save the image as a 
 *   // jpeg file with 100% quality
 *   imagejpeg($xpm, './example.jpg', 100);
 *   imagedestroy($xpm);
 *   ?>
 * 
 * Output: 
 */
function imagecreatefromxpm(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create a new true color image
 * Example:   
 *   <?php
 *   header ('Content-type: image/png');
 *   $im = @imagecreatetruecolor(120, 20)
 *         or die('Cannot Initialize new GD image stream');
 *   $text_color = imagecolorallocate($im, 233, 14, 91);
 *   imagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagecreatetruecolor(Int32 $width, Int32 $height) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a dashed line
 * Example:   
 *   <?php
 *   // Create a 100x100 image
 *   $im = imagecreatetruecolor(100, 100);
 *   $white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
 *   
 *   // Draw a vertical dashed line
 *   imagedashedline($im, 50, 25, 50, 75, $white);
 *   
 *   // Save the image
 *   imagepng($im, './dashedline.png');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagedashedline(Resource $image, Int32 $x1, Int32 $y1, Int32 $x2, Int32 $y2, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Destroy an image
 * Example:   
 *   <?php
 *   // create a 100 x 100 image
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // alter or save the image
 *   
 *   // frees image from memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagedestroy(Resource $image) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw an ellipse
 * Example:   
 *   <?php
 *   
 *   // Create a blank image.
 *   $image = imagecreatetruecolor(400, 300);
 *   
 *   // Select the background color.
 *   $bg = imagecolorallocate($image, 0, 0, 0);
 *   
 *   // Fill the background with the color selected above.
 *   imagefill($image, 0, 0, $bg);
 *   
 *   // Choose a color for the ellipse.
 *   $col_ellipse = imagecolorallocate($image, 255, 255, 255);
 *   
 *   // Draw the ellipse.
 *   imageellipse($image, 200, 150, 300, 200, $col_ellipse);
 *   
 *   // Output the image.
 *   header("Content-type: image/png");
 *   imagepng($image);
 *   
 *   ?>
 * 
 * Output: 
 */
function imageellipse(Resource $image, Int32 $cx, Int32 $cy, Int32 $width, Int32 $height, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Flood fill
 * Example:   
 *   <?php
 *   
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // sets background to red
 *   $red = imagecolorallocate($im, 255, 0, 0);
 *   imagefill($im, 0, 0, $red);
 *   
 *   header('Content-type: image/png');
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagefill(Resource $image, Int32 $x, Int32 $y, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a partial arc and fill it
 * Example:   
 *   <?php
 *   
 *   // create image
 *   $image = imagecreatetruecolor(100, 100);
 *   
 *   // allocate some solors
 *   $white    = imagecolorallocate($image, 0xFF, 0xFF, 0xFF);
 *   $gray     = imagecolorallocate($image, 0xC0, 0xC0, 0xC0);
 *   $darkgray = imagecolorallocate($image, 0x90, 0x90, 0x90);
 *   $navy     = imagecolorallocate($image, 0x00, 0x00, 0x80);
 *   $darknavy = imagecolorallocate($image, 0x00, 0x00, 0x50);
 *   $red      = imagecolorallocate($image, 0xFF, 0x00, 0x00);
 *   $darkred  = imagecolorallocate($image, 0x90, 0x00, 0x00);
 *   
 *   // make the 3D effect
 *   for ($i = 60; $i > 50; $i--) {
 *      imagefilledarc($image, 50, $i, 100, 50, 0, 45, $darknavy, IMG_ARC_PIE);
 *      imagefilledarc($image, 50, $i, 100, 50, 45, 75 , $darkgray, IMG_ARC_PIE);
 *      imagefilledarc($image, 50, $i, 100, 50, 75, 360 , $darkred, IMG_ARC_PIE);
 *   }
 *   
 *   imagefilledarc($image, 50, 50, 100, 50, 0, 45, $navy, IMG_ARC_PIE);
 *   imagefilledarc($image, 50, 50, 100, 50, 45, 75 , $gray, IMG_ARC_PIE);
 *   imagefilledarc($image, 50, 50, 100, 50, 75, 360 , $red, IMG_ARC_PIE);
 *   
 *   
 *   // flush image
 *   header('Content-type: image/png');
 *   imagepng($image);
 *   imagedestroy($image);
 *   ?>
 * 
 * Output: 
 */
function imagefilledarc(Resource $image, Int32 $cx, Int32 $cy, Int32 $width, Int32 $height, Int32 $start, Int32 $end, Int32 $color, Int32 $style) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a filled ellipse
 * Example:   
 *   <?php
 *   
 *   // create a blank image
 *   $image = imagecreatetruecolor(400, 300);
 *   
 *   // fill the background color
 *   $bg = imagecolorallocate($image, 0, 0, 0);
 *   
 *   // choose a color for the ellipse
 *   $col_ellipse = imagecolorallocate($image, 255, 255, 255);
 *   
 *   // draw the white ellipse
 *   imagefilledellipse($image, 200, 150, 300, 200, $col_ellipse);
 *   
 *   // output the picture
 *   header("Content-type: image/png");
 *   imagepng($image);
 *   
 *   ?>
 * 
 * Output: 
 */
function imagefilledellipse(Resource $image, Int32 $cx, Int32 $cy, Int32 $width, Int32 $height, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a filled polygon
 * Example:   
 *   <?php
 *   // set up array of points for polygon
 *   $values = array(
 *               40,  50,  // Point 1 (x, y)
 *               20,  240, // Point 2 (x, y)
 *               60,  60,  // Point 3 (x, y)
 *               240, 20,  // Point 4 (x, y)
 *               50,  40,  // Point 5 (x, y)
 *               10,  10   // Point 6 (x, y)
 *               );
 *   
 *   // create image
 *   $image = imagecreatetruecolor(250, 250);
 *   
 *   // allocate colors
 *   $bg   = imagecolorallocate($image, 0, 0, 0);
 *   $blue = imagecolorallocate($image, 0, 0, 255);
 *   
 *   // fill the background
 *   imagefilledrectangle($image, 0, 0, 249, 249, $bg);
 *   
 *   // draw a polygon
 *   imagefilledpolygon($image, $values, 6, $blue);
 *   
 *   // flush image
 *   header('Content-type: image/png');
 *   imagepng($image);
 *   imagedestroy($image);
 *   ?>
 * 
 * Output: 
 */
function imagefilledpolygon(Resource $image, VariantVec $points, Int32 $num_points, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a filled rectangle
 * Example:   
 *   <?php
 *   // Create a 55x30 image
 *   $im = imagecreatetruecolor(55, 30);
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   
 *   // Draw a white rectangle
 *   imagefilledrectangle($im, 4, 4, 50, 25, $white);
 *   
 *   // Save the image
 *   imagepng($im, './imagefilledrectangle.png');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagefilledrectangle(Resource $image, Int32 $x1, Int32 $y1, Int32 $x2, Int32 $y2, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Flood fill to specific color
 * Example:   
 *   <?php
 *   // Create the image handle, set the background to white
 *   $im = imagecreatetruecolor(100, 100);
 *   imagefilledrectangle($im, 0, 0, 100, 100, imagecolorallocate($im, 255, 255, 255));
 *   
 *   // Draw an ellipse to fill with a black border
 *   imageellipse($im, 50, 50, 50, 50, imagecolorallocate($im, 0, 0, 0));
 *   
 *   // Set the border and fill colors
 *   $border = imagecolorallocate($im, 0, 0, 0);
 *   $fill = imagecolorallocate($im, 255, 0, 0);
 *   
 *   // Fill the selection
 *   imagefilltoborder($im, 50, 50, $border, $fill);
 *   
 *   // Output and free memory
 *   header('Content-type: image/png');
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagefilltoborder(Resource $image, Int32 $x, Int32 $y, Int32 $border, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Applies a filter to an image
 * Example:   
 *   <?php
 *   $im = imagecreatefrompng('dave.png');
 *   
 *   if($im && imagefilter($im, IMG_FILTER_GRAYSCALE))
 *   {
 *       echo 'Image converted to grayscale.';
 *   
 *       imagepng($im, 'dave.png');
 *   }
 *   else
 *   {
 *       echo 'Conversion to grayscale failed.';
 *   }
 *   
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagefilter(Resource $image, Int32 $filtertype, Int32 $arg1 = 0, Int32 $arg2 = 0, Int32 $arg3 = 0, Int32 $arg4 = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get font height
 * Example:   
 *   <?php
 *   echo 'Font height: ' . imagefontheight(4);
 *   ?>
 * 
 * Output:   
 *   Font height: 16
 */
function imagefontheight(Int32 $font) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get font width
 * Example:   
 *   <?php
 *   echo 'Font width: ' . imagefontwidth(4);
 *   ?>
 * 
 * Output:   
 *   Font width: 8
 */
function imagefontwidth(Int32 $font) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Give the bounding box of a text using fonts via freetype2
 * Example:   
 *   <?php
 *   // Create a 300x150 image
 *   $im = imagecreatetruecolor(300, 150);
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   
 *   // Set the background to be white
 *   imagefilledrectangle($im, 0, 0, 299, 299, $white);
 *   
 *   // Path to our font file
 *   $font = './arial.ttf';
 *   
 *   // First we create our bounding box
 *   $bbox = imageftbbox(10, 0, $font, 'The PHP Documentation Group');
 *   
 *   // This is our cordinates for X and Y
 *   $x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) - 5;
 *   $y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;
 *   
 *   imagefttext($im, 10, 0, $x, $y, $black, $font, 'The PHP Documentation Group');
 *   
 *   // Output to browser
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imageftbbox(Double $size, Double $angle, String $font_file, String $text, VariantMap $extrainfo = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Write text to the image using fonts using FreeType 2
 * Example:   
 *   <?php
 *   // Set the enviroment variable for GD
 *   putenv('GDFONTPATH=' . realpath('.'));
 *   
 *   // Name the font to be used (note the lack of the .ttf extension)
 *   $font = 'SomeFont';
 *   ?>
 * 
 * Output: 
 */
function imagefttext(Resource $image, Double $size, Double $angle, Int32 $x, Int32 $y, Int32 $col, String $font_file, String $text, VariantMap $extrainfo = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Apply a gamma correction to a GD image
 * Example:   
 *   <?php
 *   // Create image instance
 *   $im = imagecreatefromgif('php.gif');
 *   
 *   // Correct gamma, out = 1.537
 *   imagegammacorrect($im, 1.0, 1.537);
 *   
 *   // Save and free image
 *   imagegif($im, './php_gamma_corrected.gif');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagegammacorrect(Resource $image, Double $inputgamma, Double $outputgamma) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output GD2 image to browser or file
 * Example:   
 *   <?php
 *   // Create a blank image and add some text
 *   $im = imagecreatetruecolor(120, 20);
 *   $text_color = imagecolorallocate($im, 233, 14, 91);
 *   imagestring($im, 1, 5, 5,  "A Simple Text String", $text_color);
 *   
 *   // Output the image
 *   imagegd2($im);
 *   
 *   // Free up memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagegd2(Resource $image, String $filename = null_string, Int32 $chunk_size = 0, Int32 $type = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output GD image to browser or file
 * Example:   
 *   <?php
 *   // Create a blank image and add some text
 *   $im = imagecreatetruecolor(120, 20);
 *   $text_color = imagecolorallocate($im, 233, 14, 91);
 *   imagestring($im, 1, 5, 5,  "A Simple Text String", $text_color);
 *   
 *   // Output the image
 *   imagegd($im);
 *   
 *   // Free up memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagegd(Resource $image, String $filename = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output image to browser or file
 * Example:   
 *   <?php
 *   // Create a new image instance
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // Make the background white
 *   imagefilledrectangle($im, 0, 0, 99, 99, 0xFFFFFF);
 *   
 *   // Draw a text string on the image
 *   imagestring($im, 3, 40, 20, 'GD Library', 0xFFBA00);
 *   
 *   // Output the image to browser
 *   header('Content-type: image/gif');
 *   
 *   imagegif($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagegif(Resource $image, String $filename = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Captures the whole screen
 * Example:   
 *   <?php
 *   $im = imagegrabscreen();
 *   imagepng($im, "myscreenshot.png");
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagegrabscreen() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Captures a window
 * Example:   
 *   <?php
 *   $browser = new COM("InternetExplorer.Application");
 *   $handle = $browser->HWND;
 *   $browser->Visible = true;
 *   $im = imagegrabwindow($handle);
 *   $browser->Quit();
 *   imagepng($im, "iesnap.png");
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagegrabwindow(Int32 $window, Int32 $client_area = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Enable or disable interlace
 * Example:   
 *   <?php
 *   // Create an image instance
 *   $im = imagecreatefromgif('php.gif');
 *   
 *   // Enable interlancing
 *   imageinterlace($im, true);
 *   
 *   // Save the interlaced image
 *   imagegif($im, './php_interlaced.gif');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imageinterlace(Resource $image, Int32 $interlace = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds whether an image is a truecolor image
 * Example:   
 *   <?php
 *   // $im is an image instance
 *   
 *   // Check if image is a true color image or not
 *   if(!imageistruecolor($im))
 *   {
 *       // Create a new true color image instance
 *       $tc = imagecreatetruecolor(imagesx($im), imagesy($im));
 *   
 *       imagecopy($tc, $im, 0, 0, 0, 0, imagesx($im), imagesy($im));
 *       imagedestroy($im);
 *   
 *       $im = $tc;
 *       $tc = NULL;
 *   }
 *   
 *   // Continue working with image instance
 *   ?>
 * 
 * Output: 
 */
function imageistruecolor(Resource $image) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output image to browser or file
 * Example:   
 *   <?php
 *   // Create a blank image and add some text
 *   $im = imagecreatetruecolor(120, 20);
 *   $text_color = imagecolorallocate($im, 233, 14, 91);
 *   imagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);
 *   
 *   // Set the content type header - in this case image/jpeg
 *   header('Content-type: image/jpeg');
 *   
 *   // Output the image
 *   imagejpeg($im);
 *   
 *   // Free up memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagejpeg(Resource $image, String $filename = null_string, Int32 $quality = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the alpha blending flag to use the bundled libgd layering effects
 * Example:   
 *   <?php
 *   // Setup an image
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // Set a background
 *   imagefilledrectangle($im, 0, 0, 100, 100, imagecolorallocate($im, 220, 220, 220));
 *   
 *   // Apply the overlay alpha blending flag
 *   imagelayereffect($im, IMG_EFFECT_OVERLAY);
 *   
 *   // Draw two grey ellipses
 *   imagefilledellipse($im, 50, 50, 40, 40, imagecolorallocate($im, 100, 255, 100));
 *   imagefilledellipse($im, 50, 50, 50, 80, imagecolorallocate($im, 100, 100, 255));
 *   imagefilledellipse($im, 50, 50, 80, 50, imagecolorallocate($im, 255, 100, 100));
 *   
 *   // Output
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagelayereffect(Resource $image, Int32 $effect) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a line
 * Example:   
 *   <?php
 *   
 *   function imagelinethick($image, $x1, $y1, $x2, $y2, $color, $thick = 1)
 *   {
 *       /* this way it works well only for orthogonal lines
 *       imagesetthickness($image, $thick);
 *       return imageline($image, $x1, $y1, $x2, $y2, $color);
 *        * / 
 *       if ($thick == 1) {
 *           return imageline($image, $x1, $y1, $x2, $y2, $color);
 *       }
 *       $t = $thick / 2 - 0.5;
 *       if ($x1 == $x2 || $y1 == $y2) {
 *           return imagefilledrectangle($image, round(min($x1, $x2) - $t), round(min($y1, $y2) - $t), round(max($x1, $x2) + $t), round(max($y1, $y2) + $t), $color);
 *       }
 *       $k = ($y2 - $y1) / ($x2 - $x1); //y = kx + q
 *       $a = $t / sqrt(1 + pow($k, 2));
 *       $points = array(
 *           round($x1 - (1+$k)*$a), round($y1 + (1-$k)*$a),
 *           round($x1 - (1-$k)*$a), round($y1 - (1+$k)*$a),
 *           round($x2 + (1+$k)*$a), round($y2 - (1-$k)*$a),
 *           round($x2 + (1-$k)*$a), round($y2 + (1+$k)*$a),
 *       );
 *       imagefilledpolygon($image, $points, 4, $color);
 *       return imagepolygon($image, $points, 4, $color);
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function imageline(Resource $image, Int32 $x1, Int32 $y1, Int32 $x2, Int32 $y2, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Load a new font
 * Example:   
 *   <?php
 *   // Create a new image instance
 *   $im = imagecreatetruecolor(50, 20);
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   
 *   // Make the background white
 *   imagefilledrectangle($im, 0, 0, 49, 19, $white);
 *   
 *   // Load the gd font and write 'Hello'
 *   $font = imageloadfont('./04b.gdf');
 *   imagestring($im, $font, 0, 0, 'Hello', $black);
 *   
 *   // Output to browser
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imageloadfont(String $file) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Copy the palette from one image to another
 * Example:   
 *   <?php
 *   // Create two palette images
 *   $palette1 = imagecreate(100, 100);
 *   $palette2 = imagecreate(100, 100);
 *   
 *   // Allocate the background to be 
 *   // green in the first palette image
 *   $green = imagecolorallocate($palette1, 0, 255, 0);
 *   
 *   // Copy the palette from image 1 to image 2
 *   imagepalettecopy($palette2, $palette1);
 *   
 *   // Since the palette is now copied we can use the 
 *   // green color allocated to image 1 without using 
 *   // imagecolorallocate() twice
 *   imagefilledrectangle($palette2, 0, 0, 99, 99, $green);
 *   
 *   // Output image to the browser
 *   header('Content-type: image/png');
 *   
 *   imagepng($palette2);
 *   imagedestroy($palette1);
 *   imagedestroy($palette2);
 *   ?>
 * 
 * Output: 
 */
function imagepalettecopy(Resource $destination, Resource $source) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output a PNG image to either the browser or a file
 * Example:   
 *   <?php
 *   $im = imagecreatefrompng("test.png");
 *   
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagepng(Resource $image, String $filename = null_string, Int32 $quality = -1, Int32 $filters = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draws a polygon
 * Example:   
 *   <?php
 *   // Create a blank image
 *   $image = imagecreatetruecolor(400, 300);
 *   
 *   // Allocate a color for the polygon
 *   $col_poly = imagecolorallocate($image, 255, 255, 255);
 *   
 *   // Draw the polygon
 *   imagepolygon($image, array(
 *           0,   0,
 *           100, 200,
 *           300, 200
 *       ),
 *       3,
 *       $col_poly);
 *   
 *   // Output the picture to the browser
 *   header('Content-type: image/png');
 *   
 *   imagepng($image);
 *   imagedestroy($image);
 *   ?>
 * 
 * Output: 
 */
function imagepolygon(Resource $image, VariantVec $points, Int32 $num_points, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Give the bounding box of a text rectangle using PostScript Type1 fonts
 * Example:   
 *   <?php
 *   // Create image handle
 *   $im = imagecreatetruecolor(200, 200);
 *   
 *   // Allocate colors
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   
 *   // Load the PostScript Font
 *   $font = imagepsloadfont('font.pfm');
 *   
 *   // Make a bounding box for the font
 *   $bbox = imagepsbbox('Sample text is simple', $font, 12);
 *   
 *   // Define our X and Y cordinates
 *   $x = ($bbox[2] / 2) - 10;
 *   $y = ($bbox[3] / 2) - 10;
 *   
 *   // Write the font to the image
 *   imagepstext($im, 'Sample text is simple', $font, 12, $black, $white, $x, $y);
 *   
 *   // Output and free memory
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagepsbbox(String $text, Int32 $font, Int32 $size, Int32 $space = 0, Int32 $tightness = 0, Double $angle = 0.0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Change the character encoding vector of a font
 * Example:   
 *   <?php
 *   // Load a .pfb font file
 *   $font = imagepsloadfont('./px3l.pfb');
 *   
 *   // Tell T1lib to use ISO Latin 1 encoding
 *   imagepsencode($font, './IsoLatin1.enc');
 *   
 *   // Do any operations with the font here
 *   
 *   // Free the font from memory
 *   imagepsfreefont($font);
 *   ?>
 * 
 * Output: 
 */
function imagepsencodefont(Resource $font_index, String $encodingfile) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Extend or condense a font
 * Example:   
 *   <?php
 *   // Load a .pfb font file
 *   $font = imagepsloadfont('./px3l.pfb');
 *   
 *   // Extend the font by 2.5
 *   imagepsextendfont($font, 2.5);
 *   
 *   // Do any operations with the font here
 *   
 *   // Free the font from memory
 *   imagepsfreefont($font);
 *   ?>
 * 
 * Output: 
 */
function imagepsextendfont(Int32 $font_index, Double $extend) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Free memory used by a PostScript Type 1 font
 * Example:   
 *   <?php
 *   // Load a .pfb font file
 *   $font = imagepsloadfont('./bchbi.pfb');
 *   
 *   // Do any operations with the font here
 *   
 *   // Free the font from memory
 *   imagepsfreefont($font);
 *   ?>
 * 
 * Output: 
 */
function imagepsfreefont(Resource $fontindex) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Load a PostScript Type 1 font from file
 * Example:   
 *   <?php
 *   // Create a new image instance
 *   $im = imagecreatetruecolor(350, 45);
 *   
 *   // Allocate colors and fill the background
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   imagefilledrectangle($im, 0, 0, 349, 44, $white);
 *   
 *   // Load a font, write to the image and free the font from memory
 *   $font = imagepsloadfont("bchbi.pfb");
 *   imagepstext($im, "Testing... It worked!", $font, 32, $white, $black, 32, 32);
 *   imagepsfreefont($font);
 *   
 *   // Output the image
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagepsloadfont(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Slant a font
 * Example:   
 *   <?php
 *   // Load a .pfb font file
 *   $font = imagepsloadfont('./px3l.pfb');
 *   
 *   // Slant the font by 22.5
 *   imagepsslantfont($font, 22.5);
 *   
 *   // Do any operations with the font here
 *   
 *   // Free the font from memory
 *   imagepsfreefont($font);
 *   ?>
 * 
 * Output: 
 */
function imagepsslantfont(Resource $font_index, Double $slant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draws a text over an image using PostScript Type1 fonts
 * Example:   
 *   <?php
 *   // Create image handle
 *   $im = imagecreatetruecolor(200, 200);
 *   
 *   // Allocate colors
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   
 *   // Load the PostScript Font
 *   $font = imagepsloadfont('font.pfm');
 *   
 *   // Write the font to the image
 *   imagepstext($im, 'Sample text is simple', $font, 12, $black, $white, 50, 50);
 *   
 *   // Output and free memory
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagepstext(Resource $image, String $text, Resource $font, Int32 $size, Int32 $foreground, Int32 $background, Int32 $x, Int32 $y, Int32 $space = 0, Int32 $tightness = 0, Double $angle = 0.0, Int32 $antialias_steps = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a rectangle
 * Example:   
 *   <?php
 *   // Create a 200 x 200 image
 *   $canvas = imagecreatetruecolor(200, 200);
 *   
 *   // Allocate colors
 *   $pink = imagecolorallocate($canvas, 255, 105, 180);
 *   $white = imagecolorallocate($canvas, 255, 255, 255);
 *   $green = imagecolorallocate($canvas, 132, 135, 28);
 *   
 *   // Draw three rectangles each with its own color
 *   imagerectangle($canvas, 50, 50, 150, 150, $pink);
 *   imagerectangle($canvas, 45, 60, 120, 100, $white);
 *   imagerectangle($canvas, 100, 120, 75, 160, $green);
 *   
 *   // Output and free from memory
 *   header('Content-Type: image/jpeg');
 *   
 *   imagejpeg($canvas);
 *   imagedestroy($canvas);
 *   ?>
 * 
 * Output: 
 */
function imagerectangle(Resource $image, Int32 $x1, Int32 $y1, Int32 $x2, Int32 $y2, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Rotate an image with a given angle
 * Example:   
 *   <?php
 *   // File and rotation
 *   $filename = 'test.jpg';
 *   $degrees = 180;
 *   
 *   // Content type
 *   header('Content-type: image/jpeg');
 *   
 *   // Load
 *   $source = imagecreatefromjpeg($filename);
 *   
 *   // Rotate
 *   $rotate = imagerotate($source, $degrees, 0);
 *   
 *   // Output
 *   imagejpeg($rotate);
 *   ?>
 * 
 * Output: 
 */
function imagerotate(Resource $source_image, Double $angle, Int32 $bgd_color, Int32 $ignore_transparent = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images
 * Example:   
 *   <?php
 *   // Load a png image with alpha channels
 *   $png = imagecreatefrompng('./alphachannel_example.png');
 *   
 *   // Do required operations
 *   
 *   // Turn off alpha blending and set alpha flag
 *   imagealphablending($png, false);
 *   imagesavealpha($png, true);
 *   
 *   // Output image to browser
 *   header('Content-Type: image/png');
 *   
 *   imagepng($png);
 *   imagedestroy($png);
 *   ?>
 * 
 * Output: 
 */
function imagesavealpha(Resource $image, Boolean $saveflag) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the brush image for line drawing
 * Example:   
 *   <?php
 *   // Load a mini php logo
 *   $php = imagecreatefrompng('./php.png');
 *   
 *   // Create the main image, 100x100
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // Fill the background with white
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   imagefilledrectangle($im, 0, 0, 299, 99, $white);
 *   
 *   // Set the brush
 *   imagesetbrush($im, $php);
 *   
 *   // Draw a couple of brushes, each overlaying each
 *   imageline($im, 50, 50, 50, 60, IMG_COLOR_BRUSHED);
 *   
 *   // Output image to the browser
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   imagedestroy($php);
 *   ?>
 * 
 * Output: 
 */
function imagesetbrush(Resource $image, Resource $brush) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set a single pixel
 * Example:   
 *   <?php
 *   
 *   $x = 200;
 *   $y = 200;
 *   
 *   $gd = imagecreatetruecolor($x, $y);
 *    
 *   $corners[0] = array('x' => 100, 'y' =>  10);
 *   $corners[1] = array('x' =>   0, 'y' => 190);
 *   $corners[2] = array('x' => 200, 'y' => 190);
 *   
 *   $red = imagecolorallocate($gd, 255, 0, 0); 
 *   
 *   for ($i = 0; $i < 100000; $i++) {
 *     imagesetpixel($gd, round($x),round($y), $red);
 *     $a = rand(0, 2);
 *     $x = ($x + $corners[$a]['x']) / 2;
 *     $y = ($y + $corners[$a]['y']) / 2;
 *   }
 *    
 *   header('Content-Type: image/png');
 *   imagepng($gd);
 *   
 *   ?>
 * 
 * Output: 
 */
function imagesetpixel(Resource $image, Int32 $x, Int32 $y, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the style for line drawing
 * Example:   
 *   <?php
 *   header("Content-type: image/jpeg");
 *   $im  = imagecreatetruecolor(100, 100);
 *   $w   = imagecolorallocate($im, 255, 255, 255);
 *   $red = imagecolorallocate($im, 255, 0, 0);
 *   
 *   /* Draw a dashed line, 5 red pixels, 5 white pixels  * / 
 *   $style = array($red, $red, $red, $red, $red, $w, $w, $w, $w, $w);
 *   imagesetstyle($im, $style);
 *   imageline($im, 0, 0, 100, 100, IMG_COLOR_STYLED);
 *   
 *   /* Draw a line of happy faces using imagesetbrush() with imagesetstyle  * / 
 *   $style = array($w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $red);
 *   imagesetstyle($im, $style);
 *   
 *   $brush = imagecreatefrompng("http://www.libpng.org/pub/png/images/smile.happy.png");
 *   $w2 = imagecolorallocate($brush, 255, 255, 255);
 *   imagecolortransparent($brush, $w2);
 *   imagesetbrush($im, $brush);
 *   imageline($im, 100, 0, 0, 100, IMG_COLOR_STYLEDBRUSHED);
 *   
 *   imagejpeg($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagesetstyle(Resource $image, VariantMap $style) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the thickness for line drawing
 * Example:   
 *   <?php
 *   // Create a 200x100 image
 *   $im = imagecreatetruecolor(200, 100);
 *   $white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
 *   $black = imagecolorallocate($im, 0x00, 0x00, 0x00);
 *   
 *   // Set the background to be white
 *   imagefilledrectangle($im, 0, 0, 299, 99, $white);
 *   
 *   // Set the line thickness to 5
 *   imagesetthickness($im, 5);
 *   
 *   // Draw the rectangle
 *   imagerectangle($im, 14, 14, 185, 85, $black);
 *   
 *   // Output image to the browser
 *   header('Content-Type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagesetthickness(Resource $image, Int32 $thickness) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the tile image for filling
 * Example:   
 *   <?php
 *   // Load an external image
 *   $zend = imagecreatefromgif('./zend.gif');
 *   
 *   // Create a 200x200 image
 *   $im = imagecreatetruecolor(200, 200);
 *   
 *   // Set the tile
 *   imagesettile($im, $zend);
 *   
 *   // Make the image repeat
 *   imagefilledrectangle($im, 0, 0, 199, 199, IMG_COLOR_TILED);
 *   
 *   // Output image to the browser
 *   header('Content-Type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   imagedestroy($zend);
 *   ?>
 * 
 * Output: 
 */
function imagesettile(Resource $image, Resource $tile) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a string horizontally
 * Example:   
 *   <?php
 *   // Create a 100*30 image
 *   $im = imagecreate(100, 30);
 *   
 *   // White background and blue text
 *   $bg = imagecolorallocate($im, 255, 255, 255);
 *   $textcolor = imagecolorallocate($im, 0, 0, 255);
 *   
 *   // Write the string at the top left
 *   imagestring($im, 5, 0, 0, 'Hello world!', $textcolor);
 *   
 *   // Output the image
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagestring(Resource $image, Int32 $font, Int32 $x, Int32 $y, String $str, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Draw a string vertically
 * Example:   
 *   <?php
 *   // create a 100*100 image
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // Write the text
 *   $textcolor = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
 *   imagestringup($im, 3, 40, 80, 'gd library', $textcolor);
 *   
 *   // Save the image
 *   imagepng($im, './stringup.png');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagestringup(Resource $image, Int32 $font, Int32 $x, Int32 $y, String $str, Int32 $color) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get image width
 * Example:   
 *   <?php
 *   
 *   // create a 300*200 image
 *   $img = imagecreatetruecolor(300, 200);
 *   
 *   echo imagesx($img); // 300
 *   
 *   ?>
 * 
 * Output: 
 */
function imagesx(Resource $image) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get image height
 * Example:   
 *   <?php
 *   
 *   // create a 300*200 image
 *   $img = imagecreatetruecolor(300, 200);
 *   
 *   echo imagesy($img); // 200
 *   
 *   ?>
 * 
 * Output: 
 */
function imagesy(Resource $image) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert a true color image to a palette image
 * Example:   
 *   <?php
 *   // Create a new true color image
 *   $im = imagecreatetruecolor(100, 100);
 *   
 *   // Convert to palette-based with no dithering and 255 colors
 *   imagetruecolortopalette($im, false, 255);
 *   
 *   // Save the image
 *   imagepng($im, './paletteimage.png');
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagetruecolortopalette(Resource $image, Boolean $dither, Int32 $ncolors) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Give the bounding box of a text using TrueType fonts
 * Example:   
 *   <?php
 *   // Create a 300x150 image
 *   $im = imagecreatetruecolor(300, 150);
 *   $black = imagecolorallocate($im, 0, 0, 0);
 *   $white = imagecolorallocate($im, 255, 255, 255);
 *   
 *   // Set the background to be white
 *   imagefilledrectangle($im, 0, 0, 299, 299, $white);
 *   
 *   // Path to our font file
 *   $font = './arial.ttf';
 *   
 *   // First we create our bounding box for the first text
 *   $bbox = imagettfbbox(10, 45, $font, 'Powered by PHP ' . phpversion());
 *   
 *   // This is our cordinates for X and Y
 *   $x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) - 25;
 *   $y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;
 *   
 *   // Write it
 *   imagettftext($im, 10, 45, $x, $y, $black, $font, 'Powered by PHP ' . phpversion());
 *   
 *   // Create the next bounding box for the second text
 *   $bbox = imagettfbbox(10, 45, $font, 'and Zend Engine ' . zend_version());
 *   
 *   // Set the cordinates so its next to the first text
 *   $x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) + 10;
 *   $y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;
 *   
 *   // Write it
 *   imagettftext($im, 10, 45, $x, $y, $black, $font, 'and Zend Engine ' . zend_version());
 *   
 *   // Output to browser
 *   header('Content-type: image/png');
 *   
 *   imagepng($im);
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagettfbbox(Double $size, Double $angle, String $fontfile, String $text) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Write text to the image using TrueType fonts
 * Example:   
 *   <?php
 *   // Set the enviroment variable for GD
 *   putenv('GDFONTPATH=' . realpath('.'));
 *   
 *   // Name the font to be used (note the lack of the .ttf extension)
 *   $font = 'SomeFont';
 *   ?>
 * 
 * Output: 
 */
function imagettftext(Resource $image, Double $size, Double $angle, Int32 $x, Int32 $y, Int32 $color, String $fontfile, String $text) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return the image types supported by this PHP build
 * Example:   
 *   <?php
 *   if (imagetypes() & IMG_PNG) {
 *       echo "PNG Support is enabled";
 *   }
 *   ?>
 * 
 * Output: 
 */
function imagetypes() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output image to browser or file
 * Example:   
 *   <?php
 *   // Create a blank image and add some text
 *   $im = imagecreatetruecolor(120, 20);
 *   $text_color = imagecolorallocate($im, 233, 14, 91);
 *   imagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);
 *   
 *   // Set the content type header - in this case image/vnd.wap.wbmp
 *   // Hint: see image_type_to_mime_type() for content-types
 *   header('Content-type: image/vnd.wap.wbmp');
 *   
 *   // Output the image
 *   imagewbmp($im);
 *   
 *   // Free up memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagewbmp(Resource $image, String $filename = null_string, Int32 $foreground = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Output XBM image to browser or file
 * Example:   
 *   <?php
 *   // Create a blank image and add some text
 *   $im = imagecreatetruecolor(120, 20);
 *   $text_color = imagecolorallocate($im, 233, 14, 91);
 *   imagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);
 *   
 *   // Save the image
 *   imagexbm($im, 'simpletext.xbm');
 *   
 *   // Free up memory
 *   imagedestroy($im);
 *   ?>
 * 
 * Output: 
 */
function imagexbm(Resource $image, String $filename = null_string, Int32 $foreground = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Embeds binary IPTC data into a JPEG image
 * Example:   
 *   <?php
 *   
 *   // iptc_make_tag() function by Thies C. Arntzen
 *   function iptc_make_tag($rec, $data, $value)
 *   {
 *       $length = strlen($value);
 *       $retval = chr(0x1C) . chr($rec) . chr($data);
 *   
 *       if($length < 0x8000)
 *       {
 *           $retval .= chr($length >> 8) .  chr($length & 0xFF);
 *       }
 *       else
 *       {
 *           $retval .= chr(0x80) . 
 *                      chr(0x04) . 
 *                      chr(($length >> 24) & 0xFF) . 
 *                      chr(($length >> 16) & 0xFF) . 
 *                      chr(($length >> 8) & 0xFF) . 
 *                      chr($length & 0xFF);
 *       }
 *   
 *       return $retval . $value;
 *   }
 *   
 *   // Path to jpeg file
 *   $path = './phplogo.jpg';
 *   
 *   // We need to check if theres any IPTC data in the jpeg image. If there is then 
 *   // bail out because we cannot embed any image that already has some IPTC data!
 *   $image = getimagesize($path, $info);
 *   
 *   if(isset($info['APP13']))
 *   {
 *       die('Error: IPTC data found in source image, cannot continue');
 *   }
 *   
 *   // Set the IPTC tags
 *   $iptc = array(
 *       '2#120' => 'Test image',
 *       '2#116' => 'Copyright 2008-2009, The PHP Group'
 *   );
 *   
 *   // Convert the IPTC tags into binary code
 *   $data = '';
 *   
 *   foreach($iptc as $tag => $string)
 *   {
 *       $tag = substr($tag, 2);
 *       $data .= iptc_make_tag(2, $tag, $string);
 *   }
 *   
 *   // Embed the IPTC data
 *   $content = iptcembed($data, $path);
 *   
 *   // Write the new image data out to the file.
 *   $fp = fopen($path, "wb");
 *   fwrite($fp, $content);
 *   fclose($fp);
 *   ?>
 * 
 * Output: 
 */
function iptcembed(String $iptcdata, String $jpeg_file_name, Int32 $spool = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parse a binary IPTC block into single tags.
 * Example:   
 *   <?php
 *   $size = getimagesize('./test.jpg', $info);
 *   if(isset($info['APP13']))
 *   {
 *       $iptc = iptcparse($info['APP13']);
 *       var_dump($iptc);
 *   }
 *   ?>
 * 
 * Output: 
 */
function iptcparse(String $iptcblock) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert JPEG image file to WBMP image file
 * Example:   
 *   <?php
 *   // Path to the target jpeg
 *   $path = './test.jpg';
 *   
 *   // Get the image sizes
 *   $image = getimagesize($path);
 *   
 *   // Convert image
 *   jpeg2wbmp($path, './test.wbmp', $image[1], $image[0], 5);
 *   ?>
 * 
 * Output: 
 */
function jpeg2wbmp(String $jpegname, String $wbmpname, Int32 $dest_height, Int32 $dest_width, Int32 $threshold) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert PNG image file to WBMP image file
 * Example:   
 *   <?php
 *   // Path to the target png
 *   $path = './test.png';
 *   
 *   // Get the image sizes
 *   $image = getimagesize($path);
 *   
 *   // Convert image
 *   png2wbmp($path, './test.wbmp', $image[1], $image[0], 7);
 *   ?>
 * 
 * Output: 
 */
function png2wbmp(String $pngname, String $wbmpname, Int32 $dest_height, Int32 $dest_width, Int32 $threshold) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Determine the type of an image
 * Example:   
 *   <?php
 *   if (exif_imagetype('image.gif') != IMAGETYPE_GIF) {
 *       echo 'The picture is not a gif';
 *   }
 *   ?>
 * 
 * Output: 
 */
function exif_imagetype(String $filename) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Reads the  <acronym>EXIF</acronym>  headers from  <acronym>JPEG</acronym>  or  <acronym>TIFF</acronym>
 * Example:   
 *   <?php
 *   echo "test1.jpg:<br />\n";
 *   $exif = exif_read_data('tests/test1.jpg', 'IFD0');
 *   echo $exif===false ? "No header data found.<br />\n" : "Image contains headers<br />\n";
 *   
 *   $exif = exif_read_data('tests/test2.jpg', 0, true);
 *   echo "test2.jpg:<br />\n";
 *   foreach ($exif as $key => $section) {
 *       foreach ($section as $name => $val) {
 *           echo "$key.$name: $val<br />\n";
 *       }
 *   }
 *   ?>
 * 
 * Output:   
 *   test1.jpg:
 *   No header data found.
 *   test2.jpg:
 *   FILE.FileName: test2.jpg
 *   FILE.FileDateTime: 1017666176
 *   FILE.FileSize: 1240
 *   FILE.FileType: 2
 *   FILE.SectionsFound: ANY_TAG, IFD0, THUMBNAIL, COMMENT
 *   COMPUTED.html: width="1" height="1"
 *   COMPUTED.Height: 1
 *   COMPUTED.Width: 1
 *   COMPUTED.IsColor: 1
 *   COMPUTED.ByteOrderMotorola: 1
 *   COMPUTED.UserComment: Exif test image.
 *   COMPUTED.UserCommentEncoding: ASCII
 *   COMPUTED.Copyright: Photo (c) M.Boerger, Edited by M.Boerger.
 *   COMPUTED.Copyright.Photographer: Photo (c) M.Boerger
 *   COMPUTED.Copyright.Editor: Edited by M.Boerger.
 *   IFD0.Copyright: Photo (c) M.Boerger
 *   IFD0.UserComment: ASCII
 *   THUMBNAIL.JPEGInterchangeFormat: 134
 *   THUMBNAIL.JPEGInterchangeFormatLength: 523
 *   COMMENT.0: Comment #1.
 *   COMMENT.1: Comment #2.
 *   COMMENT.2: Comment #3end
 *   THUMBNAIL.JPEGInterchangeFormat: 134
 *   THUMBNAIL.Thumbnail.Height: 1
 *   THUMBNAIL.Thumbnail.Height: 1
 */
function exif_read_data(String $filename, String $sections = null_string, Boolean $arrays = false, Boolean $thumbnail = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>exif_read_data</function>
 * Example: 
 * 
 * Output: 
 */
function read_exif_data(String $filename, String $sections = null_string, Boolean $arrays = false, Boolean $thumbnail = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the header name for an index
 * Example: 
 * 
 * Output: 
 */
function exif_tagname(Int32 $index) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieve the embedded thumbnail of a TIFF or JPEG image
 * Example:   
 *   <?php
 *   if (array_key_exists('file', $_REQUEST)) {
 *       $image = exif_thumbnail($_REQUEST['file'], $width, $height, $type);
 *   } else {
 *       $image = false;
 *   }
 *   if ($image!==false) {
 *       header('Content-type: ' .image_type_to_mime_type($type));
 *       echo $image;
 *       exit;
 *   } else {
 *       // no thumbnail available, handle the error here
 *       echo 'No thumbnail available';
 *   }
 *   ?>
 * 
 * Output: 
 */
function exif_thumbnail(String $filename, Int32 &$width = null, Int32 &$height = null, Int32 &$imagetype = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

