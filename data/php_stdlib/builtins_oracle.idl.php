<?php
/*
 * Purpose: Connect to an Oracle database
 * Example:   
 *   <?php
 *   
 *   // Connects to the XE service (i.e. database) on the "localhost" machine
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $e = oci_error();
 *       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn, 'SELECT * FROM employees');
 *   oci_execute($stid);
 *   
 *   echo "<table border='1'>\n";
 *   while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
 *       echo "<tr>\n";
 *       foreach ($row as $item) {
 *           echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "&nbsp;") . "</td>\n";
 *       }
 *       echo "</tr>\n";
 *   }
 *   echo "</table>\n";
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_connect(String $username, String $password, String $db = null_string, String $charset = null_string, Int32 $session_mode = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Connect to the Oracle server using a unique connection
 * Example:   
 *   <?php
 *   echo "<html><pre>";
 *   $db = "";
 *   
 *   $c1 = oci_connect("scott", "tiger", $db);
 *   $c2 = oci_new_connect("scott", "tiger", $db);
 *   
 *   function create_table($conn)
 *   {
 *     $stmt = oci_parse($conn, "create table scott.hallo (test
 *   varchar2(64))");
 *     oci_execute($stmt);
 *     echo $conn . " created table\n\n";
 *   }
 *   
 *   function drop_table($conn)
 *   {
 *     $stmt = oci_parse($conn, "drop table scott.hallo");
 *     oci_execute($stmt);
 *     echo $conn . " dropped table\n\n";
 *   }
 *   
 *   function insert_data($conn)
 *   {
 *     $stmt = oci_parse($conn, "insert into scott.hallo
 *               values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
 *     oci_execute($stmt, OCI_DEFAULT);
 *     echo $conn . " inserted hallo\n\n";
 *   }
 *   
 *   function delete_data($conn)
 *   {
 *     $stmt = oci_parse($conn, "delete from scott.hallo");
 *     oci_execute($stmt, OCI_DEFAULT);
 *     echo $conn . " deleted hallo\n\n";
 *   }
 *   
 *   function commit($conn)
 *   {
 *     oci_commit($conn);
 *     echo $conn . " committed\n\n";
 *   }
 *   
 *   function rollback($conn)
 *   {
 *     oci_rollback($conn);
 *     echo $conn . " rollback\n\n";
 *   }
 *   
 *   function select_data($conn)
 *   {
 *     $stmt = oci_parse($conn, "select * from scott.hallo");
 *     oci_execute($stmt, OCI_DEFAULT);
 *     echo $conn . "----selecting\n\n";
 *     while (oci_fetch($stmt)) {
 *       echo $conn . " <" . oci_result($stmt, "TEST") . ">\n\n";
 *     }
 *     echo $conn . "----done\n\n";
 *   }
 *   
 *   create_table($c1);
 *   insert_data($c1);
 *   
 *   select_data($c1);
 *   select_data($c2);
 *   
 *   rollback($c1);
 *   
 *   select_data($c1);
 *   select_data($c2);
 *   
 *   insert_data($c2);
 *   commit($c2);
 *   
 *   select_data($c1);
 *   
 *   delete_data($c1);
 *   select_data($c1);
 *   select_data($c2);
 *   commit($c1);
 *   
 *   select_data($c1);
 *   select_data($c2);
 *   
 *   drop_table($c1);
 *   echo "</pre></html>";
 *   ?>
 * 
 * Output: 
 */
function oci_new_connect(String $username, String $password, String $db = null_string, String $charset = null_string, Int32 $session_mode = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Connect to an Oracle database using a persistent connection
 * Example: 
 * 
 * Output: 
 */
function oci_pconnect(String $username, String $password, String $db = null_string, String $charset = null_string, Int32 $session_mode = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns server version
 * Example:   
 *   <?php
 *       $conn = oci_connect("scott", "tiger");
 *       echo "Server Version: " . oci_server_version($conn);
 *       oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_server_version(Resource $connection) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Changes password of Oracle's user
 * Example: 
 * 
 * Output: 
 */
function oci_password_change(Variant $connection, String $username, String $old_password, String $new_password) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Allocates and returns a new cursor (statement handle)
 * Example:   
 *   <?php
 *   // suppose your stored procedure info.output returns a ref cursor in :data
 *   
 *   $conn = oci_connect("scott", "tiger");
 *   $curs = oci_new_cursor($conn);
 *   $stmt = oci_parse($conn, "begin info.output(:data); end;");
 *   
 *   oci_bind_by_name($stmt, "data", $curs, -1, OCI_B_CURSOR);
 *   oci_execute($stmt);
 *   oci_execute($curs);
 *   
 *   while ($data = oci_fetch_row($curs)) {
 *       var_dump($data);
 *   }
 *   
 *   oci_free_statement($stmt);
 *   oci_free_statement($curs);
 *   oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_new_cursor(Resource $connection) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Initializes a new empty LOB or FILE descriptor
 * Example:   
 *   <?php
 *   /* This script is designed to be called from a HTML form.
 *    * It expects $user, $password, $table, $where, and $commitsize
 *    * to be passed in from the form.  The script then deletes
 *    * the selected rows using the ROWID and commits after each
 *    * set of $commitsize rows. (Use with care, there is no rollback)
 *     * / 
 *   $conn = oci_connect($user, $password);
 *   $stmt = oci_parse($conn, "select rowid from $table $where");
 *   $rowid = oci_new_descriptor($conn, OCI_D_ROWID);
 *   oci_define_by_name($stmt, "ROWID", $rowid);
 *   oci_execute($stmt);
 *   while (oci_fetch($stmt)) {
 *       $nrows = oci_num_rows($stmt);
 *       $delete = oci_parse($conn, "delete from $table where ROWID = :rid");
 *       oci_bind_by_name($delete, ":rid", $rowid, -1, OCI_B_ROWID);
 *       oci_execute($delete);
 *       echo "$nrows\n";
 *       if (($nrows % $commitsize) == 0) {
 *           oci_commit($conn);
 *       }
 *   }
 *   $nrows = oci_num_rows($stmt);
 *   echo "$nrows deleted...\n";
 *   oci_free_statement($stmt);
 *   oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_new_descriptor(Resource $connection, Int32 $type = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Closes an Oracle connection
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $e = oci_error();
 *       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn, 'SELECT * FROM departments');
 *   $r = oci_execute($stid);
 *   oci_fetch_all($stid, $res);
 *   var_dump($res);
 *   
 *   // Free the statement identifier when closing the connection
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_close(Resource $connection) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Commits the outstanding database transaction
 * Example:   
 *   <?php
 *   
 *   // Insert into several tables, rolling back the changes if an error occurs
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   
 *   $stid = oci_parse($conn, "INSERT INTO mysalary (id, name) VALUES (1, 'Chris')");
 *   
 *   // The OCI_NO_AUTO_COMMIT flag tells Oracle not to commit the INSERT immediately
 *   // Use OCI_DEFAULT as the flag for PHP <= 5.3.1.  The two flags are equivalent
 *   $r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
 *   if (!$r) {    
 *       $e = oci_error($stid);
 *       trigger_error(htmlentities($e['message']), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn, 'INSERT INTO myschedule (startday) VALUES (12)');
 *   $r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
 *   if (!$r) {    
 *       $e = oci_error($stid);
 *       oci_rollback($conn);  // rollback changes to both tables
 *       trigger_error(htmlentities($e['message']), E_USER_ERROR);
 *   }
 *   
 *   // Commit the changes to both tables
 *   $r = oci_commit($conn);
 *   if (!r) {
 *       $e = oci_error($conn);
 *       trigger_error(htmlentities($e['message']), E_USER_ERROR);
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_commit(Resource $connection) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Rolls back the outstanding database transaction
 * Example:   
 *   <?php
 *   
 *   // Insert into several tables, rolling back the changes if an error occurs
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   
 *   $stid = oci_parse($conn, "INSERT INTO mysalary (id, name) VALUES (1, 'Chris')");
 *   
 *   // The OCI_NO_AUTO_COMMIT flag tells Oracle not to commit the INSERT immediately
 *   // Use OCI_DEFAULT as the flag for PHP <= 5.3.1.  The two flags are equivalent
 *   $r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
 *   if (!$r) {    
 *       $e = oci_error($stid);
 *       trigger_error(htmlentities($e['message']), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn, 'INSERT INTO myschedule (startday) VALUES (12)');
 *   $r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
 *   if (!$r) {    
 *       $e = oci_error($stid);
 *       oci_rollback($conn);  // rollback changes to both tables
 *       trigger_error(htmlentities($e['message']), E_USER_ERROR);
 *   }
 *   
 *   // Commit the changes to both tables
 *   $r = oci_commit($conn);
 *   if (!r) {
 *       $e = oci_error($conn);
 *       trigger_error(htmlentities($e['message']), E_USER_ERROR);
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_rollback(Resource $connection) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the last error found
 * Example:   
 *   <?php
 *   $conn = oci_connect("hr", "welcome", "localhost/XE");
 *   if (!$conn) {
 *       $e = oci_error();   // For oci_connect errors do not pass a handle
 *       trigger_error(htmlentities($e['message']), E_USER_ERROR);
 *   }
 *   ?>
 * 
 * Output: 
 */
function oci_error(Resource $source = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Enables or disables internal debug output
 * Example: 
 * 
 * Output: 
 */
function oci_internal_debug(Boolean $onoff) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Prepares an Oracle statement for execution
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   
 *   // Parse the statement. Note there is no final semi-colon in the SQL statement
 *   $stid = oci_parse($conn, 'SELECT * FROM employees');
 *   oci_execute($stid);
 *   
 *   echo "<table border='1'>\n";
 *   while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
 *       echo "<tr>\n";
 *       foreach ($row as $item) {
 *           echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "&nbsp;") . "</td>\n";
 *       }
 *       echo "</tr>\n";
 *   }
 *   echo "</table>\n";
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_parse(Resource $connection, String $query) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the type of a statement
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   
 *   $stid = oci_parse($conn, 'DELETE FROM departments WHERE department_id = 130;');
 *   if (oci_statement_type($stid) == "DELETE") {
 *       trigger_error('You are not allowed to delete from this table', E_USER_ERROR);
 *   }
 *   else {
 *       oci_execute($stid);  // delete the row
 *   }
 *   
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_statement_type(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Frees all resources associated with statement or cursor
 * Example: 
 * 
 * Output: 
 */
function oci_free_statement(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function oci_free_descriptor(Resource $lob) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binds PHP array to Oracle PL/SQL array by name
 * Example:   
 *   <?php
 *   
 *   $c = oci_connect("scott", "tiger");
 *   
 *   $create = "CREATE TABLE bind_example(name VARCHAR(20))";
 *   $statement = oci_parse($c, $create);
 *   oci_execute($statement);
 *   
 *   $create_pkg = "
 *   CREATE OR REPLACE PACKAGE ARRAYBINDPKG1 AS
 *     TYPE ARRTYPE IS TABLE OF VARCHAR(20) INDEX BY BINARY_INTEGER;
 *     PROCEDURE iobind(c1 IN OUT ARRTYPE);
 *   END ARRAYBINDPKG1;";
 *   $statement = oci_parse($c, $create_pkg);
 *   oci_execute($statement);
 *   
 *   $create_pkg_body = "
 *   CREATE OR REPLACE PACKAGE BODY ARRAYBINDPKG1 AS
 *     CURSOR CUR IS SELECT name FROM bind_example;
 *     PROCEDURE iobind(c1 IN OUT ARRTYPE) IS
 *       BEGIN
 *       FOR i IN 1..5 LOOP
 *         INSERT INTO bind_example VALUES (c1(i));
 *       END LOOP;
 *       IF NOT CUR%ISOPEN THEN
 *         OPEN CUR;
 *       END IF;
 *       FOR i IN REVERSE 1..5 LOOP
 *         FETCH CUR INTO c1(i);
 *         IF CUR%NOTFOUND THEN
 *           CLOSE CUR;
 *           EXIT;
 *         END IF;
 *       END LOOP;
 *     END iobind;
 *   END ARRAYBINDPKG1;";
 *   $statement = oci_parse($c, $create_pkg_body);
 *   oci_execute($statement);
 *   
 *   $statement = oci_parse($c, "BEGIN ARRAYBINDPKG1.iobind(:c1); END;");
 *   
 *   $array = array("one", "two", "three", "four", "five");
 *   
 *   oci_bind_array_by_name($statement, ":c1", $array, 5, -1, SQLT_CHR);
 *   
 *   oci_execute($statement);
 *   
 *   var_dump($array);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_bind_array_by_name(Resource $statement, String $name, VariantMap &$var_array, Int32 $max_table_length, Int32 $max_item_length = 0, Int32 $type = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binds a PHP variable to an Oracle placeholder
 * Example:   
 *   <?php
 *   
 *   // Create the table with:
 *   //   CREATE TABLE mytab (id NUMBER, text VARCHAR2(40));
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $m = oci_error();
 *       trigger_error(htmlentities($m['message']), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn,"INSERT INTO mytab (id, text) VALUES(:id_bv, :text_bv)");
 *   
 *   $id = 1;
 *   $text = "Data to insert     ";
 *   oci_bind_by_name($stid, ":id_bv", $id);
 *   oci_bind_by_name($stid, ":text_bv", $text);
 *   oci_execute($stid);
 *   
 *   // Table now contains: 1, 'Data to insert     '
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_bind_by_name(Resource $statement, String $ph_name, Variant &$variable, Int32 $max_length = 0, Int32 $type = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Cancels reading from cursor
 * Example: 
 * 
 * Output: 
 */
function oci_cancel(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Associates a PHP variable with a column for query fetches
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $e = oci_error();
 *       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
 *   }
 *   
 *   $sql = 'SELECT location_id, city FROM locations WHERE location_id < 1200';
 *   $stid = oci_parse($conn, $sql);
 *   
 *   // The defines MUST be done before executing
 *   oci_define_by_name($stid, 'LOCATION_ID', $locid);
 *   oci_define_by_name($stid, 'CITY', $city);
 *   
 *   oci_execute($stid);
 *   
 *   // Each fetch populates the previously defined variables with the next row's data
 *   while (oci_fetch($stid)) {
 *       echo "Location id $locid is $city<br>\n";
 *   }
 *   
 *   // Displays:
 *   //   Location id 1000 is Roma
 *   //   Location id 1100 is Venice
 *   
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_define_by_name(Resource $statement, String $column_name, Variant &$variable, Int32 $type = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Executes a statement
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   
 *   $stid = oci_parse($conn, 'SELECT * FROM employees');
 *   oci_execute($stid);
 *   
 *   echo "<table border='1'>\n";
 *   while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
 *       echo "<tr>\n";
 *       foreach ($row as $item) {
 *           echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "&nbsp;") . "</td>\n";
 *       }
 *       echo "</tr>\n";
 *   }
 *   echo "</table>\n";
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_execute(Resource $statement, Int32 $mode = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the number of result columns in a statement
 * Example:   
 *   <?php
 *   $conn = oci_connect("scott", "tiger");
 *   $stmt = oci_parse($conn, "select * from emp");
 *   
 *   oci_execute($stmt);
 *   
 *   while (oci_fetch($stmt)) {
 *       echo "\n";
 *       $ncols = oci_num_fields($stmt);
 *       for ($i = 1; $i <= $ncols; $i++) {
 *           $column_name  = oci_field_name($stmt, $i);
 *           $column_value = oci_result($stmt, $i);
 *           echo $column_name . ': ' . $column_value . "\n";
 *       }
 *       echo "\n";
 *   }
 *   
 *   oci_free_statement($stmt);
 *   oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_num_fields(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns number of rows affected during statement execution
 * Example:   
 *   <?php
 *   $conn = oci_connect("scott", "tiger");
 *   
 *   $stmt = oci_parse($conn, "create table emp2 as select * from emp");
 *   oci_execute($stmt);
 *   echo oci_num_rows($stmt) . " rows inserted.<br />";
 *   oci_free_statement($stmt);
 *   
 *   $stmt = oci_parse($conn, "delete from emp2");
 *   oci_execute($stmt, OCI_DEFAULT);
 *   echo oci_num_rows($stmt) . " rows deleted.<br />";
 *   oci_commit($conn);
 *   oci_free_statement($stmt);
 *   
 *   $stmt = oci_parse($conn, "drop table emp2");
 *   oci_execute($stmt);
 *   oci_free_statement($stmt);
 *   
 *   oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_num_rows(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns field's value from the fetched row
 * Example: 
 * 
 * Output: 
 */
function oci_result(Resource $statement, Variant $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets number of rows to be prefetched by queries
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   
 *   $stid = oci_parse($conn, 'SELECT * FROM myverybigtable');
 *   oci_set_prefetch($stid, 300);  // Set before calling oci_execute()
 *   oci_execute($stid);
 *   
 *   echo "<table border='1'>\n";
 *   while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
 *       echo "<tr>\n";
 *       foreach ($row as $item) {
 *           echo "    <td>".($item !== null ? htmlentities($item, ENT_QUOTES) : "&nbsp;")."</td>\n";
 *       }
 *       echo "</tr>\n";
 *   }
 *   echo "</table>\n";
 *   
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_set_prefetch(Resource $statement, Int32 $rows) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Fetches multiple rows from a query into a two-dimensional array
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $e = oci_error();
 *       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn, 'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3');
 *   oci_execute($stid);
 *   
 *   $nrows = oci_fetch_all($stid, $res);
 *   
 *   echo "$nrows rows fetched<br>\n";
 *   var_dump($res);
 *   
 *   // var_dump output is:
 *   //    2 rows fetched
 *   //    array(2) {
 *   //      ["POSTAL_CODE"]=>
 *   //      array(2) {
 *   //        [0]=>
 *   //        string(6) "00989x"
 *   //        [1]=>
 *   //        string(6) "10934x"
 *   //      }
 *   //      ["CITY"]=>
 *   //      array(2) {
 *   //        [0]=>
 *   //        string(4) "Roma"
 *   //        [1]=>
 *   //        string(6) "Venice"
 *   //      }
 *   //    }
 *   
 *   // Pretty-print the results
 *   echo "<table border='1'>\n";
 *   foreach ($res as $col) {
 *       echo "<tr>\n";
 *       foreach ($col as $item) {
 *           echo "    <td>".($item !== null ? htmlentities($item, ENT_QUOTES) : "&nbsp;")."</td>\n";
 *       }
 *       echo "</tr>\n";
 *   }
 *   echo "</table>\n";
 *   
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_fetch_all(Resource $statement, VariantMap &$output, Int32 $skip = 0, Int32 $maxrows = 0, Int32 $flags = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the next row from a query as an associative or numeric array
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $e = oci_error();
 *       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn, 'SELECT department_id, department_name FROM departments');
 *   oci_execute($stid);
 *   
 *   while (($row = oci_fetch_array($stid, OCI_BOTH))) {
 *       // Use the uppercase column names for the associative array indices
 *       echo $row[0] . " and " . $row['DEPARTMENT_ID']   . " are the same<br>\n";
 *       echo $row[1] . " and " . $row['DEPARTMENT_NAME'] . " are the same<br>\n";
 *   }
 *   
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_fetch_array(Resource $statement, Int32 $mode = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the next row from a query as an associative array
 * Example: 
 * 
 * Output: 
 */
function oci_fetch_assoc(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the next row from a query as an object
 * Example:   
 *   <?php
 *   
 *   /*
 *     Before running, create the table:
 *       CREATE TABLE mytab (id NUMBER, description VARCHAR2(30));
 *       INSERT INTO mytab (id, description) values (1, 'Fish and Chips');
 *       COMMIT;
 *    * / 
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $e = oci_error();
 *       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
 *   }
 *   
 *   $stid = oci_parse($conn, 'SELECT id, description FROM mytab');
 *   oci_execute($stid);
 *   
 *   while (($row = oci_fetch_object($stid))) {
 *       // Use upper case attribute names for each standard Oracle column
 *       echo $row->ID . "<br>\n";
 *       echo $row->DESCRIPTION . "<br>\n"; 
 *   }
 *   
 *   // Output is:
 *   //    1
 *   //    Fish and Chips
 *   
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_fetch_object(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the next row from a query as a numeric array
 * Example: 
 * 
 * Output: 
 */
function oci_fetch_row(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Fetches the next row from a query into internal buffers
 * Example:   
 *   <?php
 *   
 *   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
 *   if (!$conn) {
 *       $e = oci_error();
 *       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
 *   }
 *   
 *   $sql = 'SELECT location_id, city FROM locations WHERE location_id < 1200';
 *   $stid = oci_parse($conn, $sql);
 *   
 *   // The defines MUST be done before executing
 *   oci_define_by_name($stid, 'LOCATION_ID', $locid);
 *   oci_define_by_name($stid, 'CITY', $city);
 *   
 *   oci_execute($stid);
 *   
 *   // Each fetch populates the previously defined variables with the next row's data
 *   while (oci_fetch($stid)) {
 *       echo "Location id $locid is $city<br>\n";
 *   }
 *   
 *   // Displays:
 *   //   Location id 1000 is Roma
 *   //   Location id 1100 is Venice
 *   
 *   oci_free_statement($stid);
 *   oci_close($conn);
 *   
 *   ?>
 * 
 * Output: 
 */
function oci_fetch(Resource $statement) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if the field is &null;
 * Example: 
 * 
 * Output: 
 */
function oci_field_is_null(Resource $statement, Variant $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the name of a field from the statement
 * Example:   
 *   <?php
 *   $conn = oci_connect("scott", "tiger");
 *   $stmt = oci_parse($conn, "SELECT * FROM emp");
 *   oci_execute($stmt);
 *   
 *   echo "<table border=\"1\">";
 *   echo "<tr>";
 *   echo "<th>Name</th>";
 *   echo "<th>Type</th>";
 *   echo "<th>Length</th>";
 *   echo "</tr>";
 *   
 *   $ncols = oci_num_fields($stmt);
 *   
 *   for ($i = 1; $i <= $ncols; $i++) {
 *       $column_name  = oci_field_name($stmt, $i);
 *       $column_type  = oci_field_type($stmt, $i);
 *       $column_size  = oci_field_size($stmt, $i);
 *   
 *       echo "<tr>";
 *       echo "<td>$column_name</td>";
 *       echo "<td>$column_type</td>";
 *       echo "<td>$column_size</td>";
 *       echo "</tr>";
 *   }
 *   
 *   echo "</table>\n";
 *   oci_free_statement($stmt);
 *   oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_field_name(Resource $statement, Int32 $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Tell the precision of a field
 * Example: 
 * 
 * Output: 
 */
function oci_field_precision(Resource $statement, Int32 $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Tell the scale of the field
 * Example: 
 * 
 * Output: 
 */
function oci_field_scale(Resource $statement, Int32 $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns field's size
 * Example:   
 *   <?php
 *   $conn = oci_connect("scott", "tiger");
 *   $stmt = oci_parse($conn, "SELECT * FROM emp");
 *   oci_execute($stmt);
 *   
 *   echo "<table border=\"1\">";
 *   echo "<tr>";
 *   echo "<th>Name</th>";
 *   echo "<th>Type</th>";
 *   echo "<th>Length</th>";
 *   echo "</tr>";
 *   
 *   $ncols = oci_num_fields($stmt);
 *   
 *   for ($i = 1; $i <= $ncols; $i++) {
 *       $column_name  = oci_field_name($stmt, $i);
 *       $column_type  = oci_field_type($stmt, $i);
 *       $column_size  = oci_field_size($stmt, $i);
 *       echo "<tr>";
 *       echo "<td>$column_name</td>";
 *       echo "<td>$column_type</td>";
 *       echo "<td>$column_size</td>";
 *       echo "</tr>";
 *   }
 *   
 *   echo "</table>";
 *   
 *   oci_free_statement($stmt);
 *   oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_field_size(Resource $statement, Variant $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Tell the raw Oracle data type of the field
 * Example: 
 * 
 * Output: 
 */
function oci_field_type_raw(Resource $statement, Int32 $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns field's data type
 * Example:   
 *   <?php
 *   $conn = oci_connect("scott", "tiger");
 *   $stmt = oci_parse($conn, "SELECT * FROM emp");
 *   oci_execute($stmt);
 *   
 *   echo "<table border=\"1\">";
 *   echo "<tr>";
 *   echo "<th>Name</th>";
 *   echo "<th>Type</th>";
 *   echo "<th>Length</th>";
 *   echo "</tr>";
 *   
 *   $ncols = oci_num_fields($stmt);
 *   
 *   for ($i = 1; $i <= $ncols; $i++) {
 *       $column_name  = oci_field_name($stmt, $i);
 *       $column_type  = oci_field_type($stmt, $i);
 *       $column_size  = oci_field_size($stmt, $i);
 *   
 *       echo "<tr>";
 *       echo "<td>$column_name</td>";
 *       echo "<td>$column_type</td>";
 *       echo "<td>$column_size</td>";
 *       echo "</tr>";
 *   }
 *   
 *   echo "</table>\n";
 *   
 *   oci_free_statement($stmt);
 *   oci_close($conn);
 *   ?>
 * 
 * Output: 
 */
function oci_field_type(Resource $statement, Int32 $field) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

