<?php
/*
 * Purpose: Validate a Gregorian date
 * Example:   
 *   <?php
 *   var_dump(checkdate(12, 31, 2000));
 *   var_dump(checkdate(2, 29, 2001));
 *   ?>
 * 
 * Output:   
 *   bool(true)
 *   bool(false)
 */
function checkdate(Int32 $month, Int32 $day, Int32 $year) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::__construct</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_create(String $time = null_string, Object $timezone = null_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::setDate</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_date_set(Object $object, Int32 $year, Int32 $month, Int32 $day) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Gets the default timezone used by all date/time functions in a script
 * Example:   
 *   <?php
 *   date_default_timezone_set('Europe/London');
 *   
 *   if (date_default_timezone_get()) {
 *       echo 'date_default_timezone_set: ' . date_default_timezone_get() . '<br />';
 *   }
 *   
 *   if (ini_get('date.timezone')) {
 *       echo 'date.timezone: ' . ini_get('date.timezone');
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   date_default_timezone_set: Europe/London
 *   date.timezone: Europe/London
 */
function date_default_timezone_get() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Sets the default timezone used by all date/time functions in a script
 * Example:   
 *   <?php
 *   date_default_timezone_set('America/Los_Angeles');
 *   
 *   $script_tz = date_default_timezone_get();
 *   
 *   if (strcmp($script_tz, ini_get('date.timezone'))){
 *       echo 'Script timezone differs from ini-set timezone.';
 *   } else {
 *       echo 'Script timezone and ini-set timezone match.';
 *   }
 *   ?>
 * 
 * Output: 
 */
function date_default_timezone_set(String $name) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::format</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_format(Object $object, String $format) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::setISODate</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_isodate_set(Object $object, Int32 $year, Int32 $week, Int32 $day = 1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::modify</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_modify(Object $object, String $modify) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::getOffset</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_offset_get(Object $object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns associative array with detailed info about given date
 * Example:   
 *   <?php
 *   print_r(date_parse("2006-12-12 10:00:00.5"));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [year] => 2006
 *       [month] => 12
 *       [day] => 12
 *       [hour] => 10
 *       [minute] => 0
 *       [second] => 0
 *       [fraction] => 0.5
 *       [warning_count] => 0
 *       [warnings] => Array()
 *       [error_count] => 0
 *       [errors] => Array()
 *       [is_localtime] => 
 *   )
 */
function date_parse(String $date) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns an array with information about sunset/sunrise and twilight begin/end
 * Example:   
 *   <?php
 *   $sun_info = date_sun_info(strtotime("2006-12-12"), 31.7667, 35.2333);
 *   foreach ($sun_info as $key => $val) {
 *       echo "$key: " . date("H:i:s", $val) . "\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   sunrise: 05:52:11
 *   sunset: 15:41:21
 *   transit: 10:46:46
 *   civil_twilight_begin: 05:24:08
 *   civil_twilight_end: 16:09:24
 *   nautical_twilight_begin: 04:52:25
 *   nautical_twilight_end: 16:41:06
 *   astronomical_twilight_begin: 04:21:32
 *   astronomical_twilight_end: 17:12:00
 */
function date_sun_info(Int64 $ts, Double $latitude, Double $longitude) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns time of sunrise for a given day and location
 * Example:   
 *   <?php
 *   
 *   /* calculate the sunrise time for Lisbon, Portugal
 *   Latitude: 38.4 North
 *   Longitude: 9 West
 *   Zenith ~= 90
 *   offset: +1 GMT
 *    * / 
 *   
 *   echo date("D M d Y"). ', sunrise time : ' .date_sunrise(time(), SUNFUNCS_RET_STRING, 38.4, -9, 90, 1);
 *   
 *   ?>
 * 
 * Output:   
 *   Mon Dec 20 2004, sunrise time : 08:54
 */
function date_sunrise(Int64 $timestamp, Int32 $format = 0, Double $latitude = 0.0, Double $longitude = 0.0, Double $zenith = 0.0, Double $gmt_offset = 99999.0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Returns time of sunset for a given day and location
 * Example:   
 *   <?php
 *   
 *   /* calculate the sunset time for Lisbon, Portugal
 *   Latitude: 38.4 North
 *   Longitude: 9 West
 *   Zenith ~= 90
 *   offset: +1 GMT
 *    * / 
 *   
 *   echo date("D M d Y"). ', sunset time : ' .date_sunset(time(), SUNFUNCS_RET_STRING, 38.4, -9, 90, 1);
 *   
 *   ?>
 * 
 * Output:   
 *   Mon Dec 20 2004, sunset time : 18:13
 */
function date_sunset(Int64 $timestamp, Int32 $format = 0, Double $latitude = 0.0, Double $longitude = 0.0, Double $zenith = 0.0, Double $gmt_offset = 99999.0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::setTime</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_time_set(Object $object, Int32 $hour, Int32 $minute, Int32 $second = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::getTimezone</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_timezone_get(Object $object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTime::setTimezone</methodname>
 * Example: 
 * 
 * Output: 
 */
function date_timezone_set(Object $object, Object $timezone) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Format a local time/date
 * Example:   
 *   <?php
 *   // set the default timezone to use. Available since PHP 5.1
 *   date_default_timezone_set('UTC');
 *   
 *   
 *   // Prints something like: Monday
 *   echo date("l");
 *   
 *   // Prints something like: Monday 8th of August 2005 03:12:46 PM
 *   echo date('l jS \of F Y h:i:s A');
 *   
 *   // Prints: July 1, 2000 is on a Saturday
 *   echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));
 *   
 *   /* use the constants in the format parameter  * / 
 *   // prints something like: Mon, 15 Aug 2005 15:12:46 UTC
 *   echo date(DATE_RFC822);
 *   
 *   // prints something like: 2000-07-01T00:00:00+00:00
 *   echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));
 *   ?>
 * 
 * Output: 
 */
function date(String $format, Int64 $timestamp = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get date/time information
 * Example:   
 *   <?php
 *   $today = getdate();
 *   print_r($today);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [seconds] => 40
 *       [minutes] => 58
 *       [hours]   => 21
 *       [mday]    => 17
 *       [wday]    => 2
 *       [mon]     => 6
 *       [year]    => 2003
 *       [yday]    => 167
 *       [weekday] => Tuesday
 *       [month]   => June
 *       [0]       => 1055901520
 *   )
 */
function getdate(Int64 $timestamp = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get current time
 * Example:   
 *   <?php
 *   print_r(gettimeofday());
 *   
 *   echo gettimeofday(true);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [sec] => 1073504408
 *       [usec] => 238215
 *       [minuteswest] => 0
 *       [dsttime] => 1
 *   )
 *   
 *   1073504408.23910
 */
function gettimeofday(Boolean $return_float = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Format a GMT/UTC date/time
 * Example:   
 *   <?php
 *   echo date("M d Y H:i:s", mktime(0, 0, 0, 1, 1, 1998));
 *   echo gmdate("M d Y H:i:s", mktime(0, 0, 0, 1, 1, 1998));
 *   ?>
 * 
 * Output: 
 */
function gmdate(String $format, Int64 $timestamp = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get Unix timestamp for a GMT date
 * Example:   
 *   <?php
 *   gmmktime(0, 0, 0, 1, 1, 1970); // valid in GMT and west, invalid in east
 *   ?>
 * 
 * Output: 
 */
function gmmktime(Int32 $hour = -1, Int32 $minute = -1, Int32 $second = -1, Int32 $month = -1, Int32 $day = -1, Int32 $year = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Format a GMT/UTC time/date according to locale settings
 * Example:   
 *   <?php
 *   setlocale(LC_TIME, 'en_US');
 *   echo strftime("%b %d %Y %H:%M:%S", mktime(20, 0, 0, 12, 31, 98)) . "\n";
 *   echo gmstrftime("%b %d %Y %H:%M:%S", mktime(20, 0, 0, 12, 31, 98)) . "\n";
 *   ?>
 * 
 * Output: 
 */
function gmstrftime(String $format, Int64 $timestamp = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Format a local time/date as integer
 * Example:   
 *   <?php
 *   $timestamp = strtotime('1st January 2004'); //1072915200
 *   
 *   // this prints the year in a two digit format
 *   // however, as this would start with a "0", it
 *   // only prints "4"
 *   echo idate('y', $timestamp);
 *   ?>
 * 
 * Output: 
 */
function idate(String $format, Int64 $timestamp = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get the local time
 * Example:   
 *   <?php
 *   $localtime = localtime();
 *   $localtime_assoc = localtime(time(), true);
 *   print_r($localtime);
 *   print_r($localtime_assoc);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => 24
 *       [1] => 3
 *       [2] => 19
 *       [3] => 3
 *       [4] => 3
 *       [5] => 105
 *       [6] => 0
 *       [7] => 92
 *       [8] => 1
 *   )
 *   
 *   Array
 *   (
 *       [tm_sec] => 24
 *       [tm_min] => 3
 *       [tm_hour] => 19
 *       [tm_mday] => 3
 *       [tm_mon] => 3
 *       [tm_year] => 105
 *       [tm_wday] => 0
 *       [tm_yday] => 92
 *       [tm_isdst] => 1
 *   )
 */
function localtime(Int64 $timestamp = 0, Boolean $is_associative = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return current Unix timestamp with microseconds
 * Example:   
 *   <?php
 *   /**
 *    * Simple function to replicate PHP 5 behaviour
 *     * / 
 *   function microtime_float()
 *   {
 *       list($usec, $sec) = explode(" ", microtime());
 *       return ((float)$usec + (float)$sec);
 *   }
 *   
 *   $time_start = microtime_float();
 *   
 *   // Sleep for a while
 *   usleep(100);
 *   
 *   $time_end = microtime_float();
 *   $time = $time_end - $time_start;
 *   
 *   echo "Did nothing in $time seconds\n";
 *   ?>
 * 
 * Output: 
 */
function microtime(Boolean $get_as_float = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get Unix timestamp for a date
 * Example:   
 *   <?php
 *   // Set the default timezone to use. Available as of PHP 5.1
 *   date_default_timezone_set('UTC');
 *   
 *   // Prints: July 1, 2000 is on a Saturday
 *   echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));
 *   
 *   // Prints something like: 2006-04-05T01:02:03+00:00
 *   echo date('c', mktime(1, 2, 3, 4, 5, 2006));
 *   ?>
 * 
 * Output: 
 */
function mktime(Int32 $hour = -1, Int32 $minute = -1, Int32 $second = -1, Int32 $month = -1, Int32 $day = -1, Int32 $year = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Format a local time/date according to locale settings
 * Example:   
 *   <?php
 *   setlocale(LC_TIME, "C");
 *   echo strftime("%A");
 *   setlocale(LC_TIME, "fi_FI");
 *   echo strftime(" in Finnish is %A,");
 *   setlocale(LC_TIME, "fr_FR");
 *   echo strftime(" in French %A and");
 *   setlocale(LC_TIME, "de_DE");
 *   echo strftime(" in German %A.\n");
 *   ?>
 * 
 * Output: 
 */
function strftime(String $format, Int64 $timestamp = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:      Parse a time/date generated with  <function>strftime</function>
 * Example:   
 *   <?php
 *   $format = '%d/%m/%Y %H:%M:%S';
 *   $strf = strftime($format);
 *   
 *   echo "$strf\n";
 *   
 *   print_r(strptime($strf, $format));
 *   ?>
 * 
 * Output:   
 *   03/10/2004 15:54:19
 *   
 *   Array
 *   (
 *       [tm_sec] => 19
 *       [tm_min] => 54
 *       [tm_hour] => 15
 *       [tm_mday] => 3
 *       [tm_mon] => 9
 *       [tm_year] => 104
 *       [tm_wday] => 0
 *       [tm_yday] => 276
 *       [unparsed] =>
 *   )
 */
function strptime(String $date, String $format) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parse about any English textual datetime description into a Unix timestamp
 * Example:   
 *   <?php
 *   echo strtotime("now"), "\n";
 *   echo strtotime("10 September 2000"), "\n";
 *   echo strtotime("+1 day"), "\n";
 *   echo strtotime("+1 week"), "\n";
 *   echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
 *   echo strtotime("next Thursday"), "\n";
 *   echo strtotime("last Monday"), "\n";
 *   ?>
 * 
 * Output: 
 */
function strtotime(String $input, Int64 $timestamp = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return current Unix timestamp
 * Example:   
 *   <?php
 *   $nextWeek = time() + (7 * 24 * 60 * 60);
 *                      // 7 days; 24 hours; 60 mins; 60secs
 *   echo 'Now:       '. date('Y-m-d') ."\n";
 *   echo 'Next Week: '. date('Y-m-d', $nextWeek) ."\n";
 *   // or using strtotime():
 *   echo 'Next Week: '. date('Y-m-d', strtotime('+1 week')) ."\n";
 *   ?>
 * 
 * Output:   
 *   Now:       2005-03-30
 *   Next Week: 2005-04-06
 *   Next Week: 2005-04-06
 */
function time() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTimeZone::listAbbreviations</methodname>
 * Example: 
 * 
 * Output: 
 */
function timezone_abbreviations_list() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTimeZone::listIdentifiers</methodname>
 * Example: 
 * 
 * Output: 
 */
function timezone_identifiers_list() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the timezone name from abbreviation
 * Example:   
 *   <?php
 *   echo timezone_name_from_abbr("CET") . "\n";
 *   echo timezone_name_from_abbr("", 3600, 0) . "\n";
 *   ?>
 * 
 * Output:   
 *   Europe/Berlin
 *   Europe/Paris
 */
function timezone_name_from_abbr(String $abbr, Int32 $gmtOffset = -1, Boolean $isdst = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTimeZone::getName</methodname>
 * Example: 
 * 
 * Output: 
 */
function timezone_name_get(Object $object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTimeZone::getOffset</methodname>
 * Example: 
 * 
 * Output: 
 */
function timezone_offset_get(Object $object, Object $dt) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTimeZone::__construct</methodname>
 * Example: 
 * 
 * Output: 
 */
function timezone_open(String $timezone) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <methodname>DateTimeZone::getTransitions</methodname>
 * Example: 
 * 
 * Output: 
 */
function timezone_transitions_get(Object $object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

