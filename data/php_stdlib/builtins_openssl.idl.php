<?php
/*
 * Purpose: Exports a CSR to a file
 * Example: 
 * 
 * Output: 
 */
function openssl_csr_export_to_file(Variant $csr, String $outfilename, Boolean $notext = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Exports a CSR as a string
 * Example: 
 * 
 * Output: 
 */
function openssl_csr_export(Variant $csr, String &$out, Boolean $notext = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the public key of a CERT
 * Example: 
 * 
 * Output: 
 */
function openssl_csr_get_public_key(Variant $csr) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the subject of a CERT
 * Example: 
 * 
 * Output: 
 */
function openssl_csr_get_subject(Variant $csr, Boolean $use_shortnames = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Generates a CSR
 * Example:   
 *   <?php
 *   // Fill in data for the distinguished name to be used in the cert
 *   // You must change the values of these keys to match your name and
 *   // company, or more precisely, the name and company of the person/site
 *   // that you are generating the certificate for.
 *   // For SSL certificates, the commonName is usually the domain name of
 *   // that will be using the certificate, but for S/MIME certificates,
 *   // the commonName will be the name of the individual who will use the
 *   // certificate.
 *   $dn = array(
 *       "countryName" => "UK",
 *       "stateOrProvinceName" => "Somerset",
 *       "localityName" => "Glastonbury",
 *       "organizationName" => "The Brain Room Limited",
 *       "organizationalUnitName" => "PHP Documentation Team",
 *       "commonName" => "Wez Furlong",
 *       "emailAddress" => "wez@example.com"
 *   );
 *   
 *   // Generate a new private (and public) key pair
 *   $privkey = openssl_pkey_new();
 *   
 *   // Generate a certificate signing request
 *   $csr = openssl_csr_new($dn, $privkey);
 *   
 *   // You will usually want to create a self-signed certificate at this
 *   // point until your CA fulfills your request.
 *   // This creates a self-signed cert that is valid for 365 days
 *   $sscert = openssl_csr_sign($csr, null, $privkey, 365);
 *   
 *   // Now you will want to preserve your private key, CSR and self-signed
 *   // cert so that they can be installed into your web server, mail server
 *   // or mail client (depending on the intended use of the certificate).
 *   // This example shows how to get those things into variables, but you
 *   // can also store them directly into files.
 *   // Typically, you will send the CSR on to your CA who will then issue
 *   // you with the "real" certificate.
 *   openssl_csr_export($csr, $csrout) and var_dump($csrout);
 *   openssl_x509_export($sscert, $certout) and var_dump($certout);
 *   openssl_pkey_export($privkey, $pkeyout, "mypassword") and var_dump($pkeyout);
 *   
 *   // Show any errors that occurred here
 *   while (($e = openssl_error_string()) !== false) {
 *       echo $e . "\n";
 *   }
 *   ?>
 * 
 * Output: 
 */
function openssl_csr_new(StringMap $dn, Object &$privkey, Variant $configargs = null_variant, Variant $extraattribs = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sign a CSR with another certificate (or itself) and generate a certificate
 * Example:   
 *   <?php
 *   // Let's assume that this script is set to receive a CSR that has
 *   // been pasted into a textarea from another page
 *   $csrdata = $_POST["CSR"];
 *   
 *   // We will sign the request using our own "certificate authority"
 *   // certificate.  You can use any certificate to sign another, but
 *   // the process is worthless unless the signing certificate is trusted
 *   // by the software/users that will deal with the newly signed certificate
 *   
 *   // We need our CA cert and its private key
 *   $cacert = "file://path/to/ca.crt";
 *   $privkey = array("file://path/to/ca.key", "your_ca_key_passphrase");
 *   
 *   $userscert = openssl_csr_sign($csrdata, $cacert, $privkey, 365);
 *   
 *   // Now display the generated certificate so that the user can
 *   // copy and paste it into their local configuration (such as a file
 *   // to hold the certificate for their SSL server)
 *   openssl_x509_export($usercert, $certout);
 *   echo $certout;
 *   
 *   // Show any errors that occurred here
 *   while (($e = openssl_error_string()) !== false) {
 *       echo $e . "\n";
 *   }
 *   ?>
 * 
 * Output: 
 */
function openssl_csr_sign(Variant $csr, Variant $cacert, Variant $priv_key, Int32 $days, Variant $configargs = null_variant, Int32 $serial = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return openSSL error message
 * Example:   
 *   <?php
 *   // lets assume you just called an openssl function that failed
 *   while ($msg = openssl_error_string())
 *       echo $msg . "<br />\n";
 *   ?>
 * 
 * Output: 
 */
function openssl_error_string() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Open sealed data
 * Example:   
 *   <?php
 *   // $sealed and $env_key are assumed to contain the sealed data
 *   // and our envelope key, both given to us by the sealer.
 *   
 *   // fetch private key from file and ready it
 *   $fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
 *   $priv_key = fread($fp, 8192);
 *   fclose($fp);
 *   $pkeyid = openssl_get_privatekey($priv_key);
 *   
 *   // decrypt the data and store it in $open
 *   if (openssl_open($sealed, $open, $env_key, $pkeyid)) {
 *       echo "here is the opened data: ", $open;
 *   } else {
 *       echo "failed to open data";
 *   }
 *   
 *   // free the private key from memory
 *   openssl_free_key($pkeyid);
 *   ?>
 * 
 * Output: 
 */
function openssl_open(String $sealed_data, String &$open_data, String $env_key, Variant $priv_key_id) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Exports a PKCS#12 Compatible Certificate Store File
 * Example: 
 * 
 * Output: 
 */
function openssl_pkcs12_export_to_file(Variant $x509, String $filename, Variant $priv_key, String $pass, Variant $args = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Exports a PKCS#12 Compatible Certificate Store File to variable.
 * Example: 
 * 
 * Output: 
 */
function openssl_pkcs12_export(Variant $x509, String &$out, Variant $priv_key, String $pass, Variant $args = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parse a PKCS#12 Certificate Store into an array
 * Example: 
 * 
 * Output: 
 */
function openssl_pkcs12_read(String $pkcs12, StringVec &$certs, String $pass) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decrypts an S/MIME encrypted message
 * Example:   
 *   <?php
 *   // $cert and $key are assumed to contain your personal certificate and private
 *   // key pair, and that you are the recipient of an S/MIME message
 *   $infilename = "encrypted.msg";  // this file holds your encrypted message
 *   $outfilename = "decrypted.msg"; // make sure you can write to this file
 *   
 *   if (openssl_pkcs7_decrypt($infilename, $outfilename, $cert, $key)) {
 *       echo "decrypted!";
 *   } else {
 *       echo "failed to decrypt!";
 *   }
 *   ?>
 * 
 * Output: 
 */
function openssl_pkcs7_decrypt(String $infilename, String $outfilename, Variant $recipcert, Variant $recipkey = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Encrypt an S/MIME message
 * Example:   
 *   <?php
 *   // the message you want to encrypt and send to your secret agent
 *   // in the field, known as nighthawk.  You have his certificate
 *   // in the file nighthawk.pem
 *   $data = <<<EOD
 *   Nighthawk,
 *   
 *   Top secret, for your eyes only!
 *   
 *   The enemy is closing in! Meet me at the cafe at 8.30am
 *   to collect your forged passport!
 *   
 *   HQ
 *   EOD;
 *   
 *   // load key
 *   $key = file_get_contents("nighthawk.pem");
 *   
 *   // save message to file
 *   $fp = fopen("msg.txt", "w");
 *   fwrite($fp, $data);
 *   fclose($fp);
 *   
 *   // encrypt it
 *   if (openssl_pkcs7_encrypt("msg.txt", "enc.txt", $key,
 *       array("To" => "nighthawk@example.com", // keyed syntax
 *             "From: HQ <hq@example.com>", // indexed syntax
 *             "Subject" => "Eyes only"))) {
 *       // message encrypted - send it!
 *       exec(ini_get("sendmail_path") . " < enc.txt");
 *   }
 *   ?>
 * 
 * Output: 
 */
function openssl_pkcs7_encrypt(String $infilename, String $outfilename, Variant $recipcerts, StringVec $headers, Int32 $flags = 0, Int32 $cipherid = k_OPENSSL_CIPHER_RC2_40) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sign an S/MIME message
 * Example:   
 *   <?php
 *   // the message you want to sign so that recipient can be sure it was you that
 *   // sent it
 *   $data = <<<EOD
 *   
 *   You have my authorization to spend $10,000 on dinner expenses.
 *   
 *   The CEO
 *   EOD;
 *   // save message to file
 *   $fp = fopen("msg.txt", "w");
 *   fwrite($fp, $data);
 *   fclose($fp);
 *   // encrypt it
 *   if (openssl_pkcs7_sign("msg.txt", "signed.txt", "mycert.pem",
 *       array("file://mycert.pem", "mypassphrase"),
 *       array("To" => "joes@example.com", // keyed syntax
 *             "From: HQ <ceo@example.com>", // indexed syntax
 *             "Subject" => "Eyes only")
 *       )) {
 *       // message signed - send it!
 *       exec(ini_get("sendmail_path") . " < signed.txt");
 *   }
 *   ?>
 * 
 * Output: 
 */
function openssl_pkcs7_sign(String $infilename, String $outfilename, Variant $signcert, Variant $privkey, Variant $headers, Int32 $flags = k_PKCS7_DETACHED, String $extracerts = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Verifies the signature of an S/MIME signed message
 * Example: 
 * 
 * Output: 
 */
function openssl_pkcs7_verify(String $filename, Int32 $flags, String $outfilename = null_string, StringVec $cainfo = null_array, String $extracerts = null_string, String $content = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets an exportable representation of a key into a file 
 * Example: 
 * 
 * Output: 
 */
function openssl_pkey_export_to_file(Variant $key, String $outfilename, String $passphrase = null_string, Variant $configargs = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets an exportable representation of a key into a string
 * Example: 
 * 
 * Output: 
 */
function openssl_pkey_export(Variant $key, String &$out, String $passphrase = null_string, Variant $configargs = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Frees a private key
 * Example: 
 * 
 * Output: 
 */
function openssl_pkey_free(Object $key) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Free key resource
 * Example: 
 * 
 * Output: 
 */
function openssl_free_key(Object $key) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns an array with the key details
 * Example: 
 * 
 * Output: 
 */
function openssl_pkey_get_details(Object $key) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get a private key
 * Example: 
 * 
 * Output: 
 */
function openssl_pkey_get_private(Variant $key, String $passphrase = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>openssl_pkey_get_private</function>
 * Example: 
 * 
 * Output: 
 */
function openssl_get_privatekey(Variant $key, String $passphrase = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Extract public key from certificate and prepare it for use
 * Example: 
 * 
 * Output: 
 */
function openssl_pkey_get_public(Variant $certificate) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>openssl_pkey_get_public</function>
 * Example: 
 * 
 * Output: 
 */
function openssl_get_publickey(Variant $certificate) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Generates a new private key 
 * Example: 
 * 
 * Output: 
 */
function openssl_pkey_new(Variant $configargs = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decrypts data with private key 
 * Example: 
 * 
 * Output: 
 */
function openssl_private_decrypt(String $data, String &$decrypted, Variant $key, Int32 $padding = k_OPENSSL_PKCS1_PADDING) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Encrypts data with private key 
 * Example: 
 * 
 * Output: 
 */
function openssl_private_encrypt(String $data, String &$crypted, Variant $key, Int32 $padding = k_OPENSSL_PKCS1_PADDING) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decrypts data with public key 
 * Example: 
 * 
 * Output: 
 */
function openssl_public_decrypt(String $data, String &$decrypted, Variant $key, Int32 $padding = k_OPENSSL_PKCS1_PADDING) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Encrypts data with public key 
 * Example: 
 * 
 * Output: 
 */
function openssl_public_encrypt(String $data, String &$crypted, Variant $key, Int32 $padding = k_OPENSSL_PKCS1_PADDING) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Seal (encrypt) data
 * Example:   
 *   <?php
 *   // $data is assumed to contain the data to be sealed
 *   
 *   // fetch public keys for our recipients, and ready them
 *   $fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
 *   $cert = fread($fp, 8192);
 *   fclose($fp);
 *   $pk1 = openssl_get_publickey($cert);
 *   // Repeat for second recipient
 *   $fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
 *   $cert = fread($fp, 8192);
 *   fclose($fp);
 *   $pk2 = openssl_get_publickey($cert);
 *   
 *   // seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys
 *   // $ekeys[0] and $ekeys[1] respectively.
 *   openssl_seal($data, $sealed, $ekeys, array($pk1, $pk2));
 *   
 *   // free the keys from memory
 *   openssl_free_key($pk1);
 *   openssl_free_key($pk2);
 *   ?>
 * 
 * Output: 
 */
function openssl_seal(String $data, String &$sealed_data, StringVec &$env_keys, StringVec $pub_key_ids) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Generate signature
 * Example:   
 *   <?php
 *   // $data is assumed to contain the data to be signed
 *   
 *   // fetch private key from file and ready it
 *   $fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
 *   $priv_key = fread($fp, 8192);
 *   fclose($fp);
 *   $pkeyid = openssl_get_privatekey($priv_key);
 *   
 *   // compute signature
 *   openssl_sign($data, $signature, $pkeyid);
 *   
 *   // free the key from memory
 *   openssl_free_key($pkeyid);
 *   ?>
 * 
 * Output: 
 */
function openssl_sign(String $data, String &$signature, Variant $priv_key_id, Int32 $signature_alg = k_OPENSSL_ALGO_SHA1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Verify signature
 * Example:   
 *   <?php
 *   // $data and $signature are assumed to contain the data and the signature
 *   
 *   // fetch public key from certificate and ready it
 *   $fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
 *   $cert = fread($fp, 8192);
 *   fclose($fp);
 *   $pubkeyid = openssl_get_publickey($cert);
 *   
 *   // state whether signature is okay or not
 *   $ok = openssl_verify($data, $signature, $pubkeyid);
 *   if ($ok == 1) {
 *       echo "good";
 *   } elseif ($ok == 0) {
 *       echo "bad";
 *   } else {
 *       echo "ugly, error checking signature";
 *   }
 *   // free the key from memory
 *   openssl_free_key($pubkeyid);
 *   ?>
 * 
 * Output: 
 */
function openssl_verify(String $data, String $signature, Variant $pub_key_id, Int32 $signature_alg = k_OPENSSL_ALGO_SHA1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if a private key corresponds to a certificate
 * Example: 
 * 
 * Output: 
 */
function openssl_x509_check_private_key(Variant $cert, Variant $key) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Verifies if a certificate can be used for a particular purpose
 * Example: 
 * 
 * Output: 
 */
function openssl_x509_checkpurpose(Variant $x509cert, Int32 $purpose, StringVec $cainfo = null_array, String $untrustedfile = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Exports a certificate to file
 * Example: 
 * 
 * Output: 
 */
function openssl_x509_export_to_file(Variant $x509, String $outfilename, Boolean $notext = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Exports a certificate as a string
 * Example: 
 * 
 * Output: 
 */
function openssl_x509_export(Variant $x509, String &$output, Boolean $notext = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Free certificate resource
 * Example: 
 * 
 * Output: 
 */
function openssl_x509_free(Object $x509cert) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parse an X509 certificate and return the information as an array
 * Example: 
 * 
 * Output: 
 */
function openssl_x509_parse(Variant $x509cert, Boolean $shortnames = true) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parse an X.509 certificate and return a resource identifier for
 *   it
 * Example: 
 * 
 * Output: 
 */
function openssl_x509_read(Variant $x509certdata) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

