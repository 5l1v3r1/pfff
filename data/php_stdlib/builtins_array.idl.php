<?php
/*
 * Purpose: Changes all keys in an array
 * Example:   
 *   <?php
 *   $input_array = array("FirSt" => 1, "SecOnd" => 4);
 *   print_r(array_change_key_case($input_array, CASE_UPPER));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [FIRST] => 1
 *       [SECOND] => 4
 *   )
 */
function array_change_key_case(VariantMap $input, Boolean $upper = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Split an array into chunks
 * Example:   
 *   <?php
 *   $input_array = array('a', 'b', 'c', 'd', 'e');
 *   print_r(array_chunk($input_array, 2));
 *   print_r(array_chunk($input_array, 2, true));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => Array
 *           (
 *               [0] => a
 *               [1] => b
 *           )
 *   
 *       [1] => Array
 *           (
 *               [0] => c
 *               [1] => d
 *           )
 *   
 *       [2] => Array
 *           (
 *               [0] => e
 *           )
 *   
 *   )
 *   Array
 *   (
 *       [0] => Array
 *           (
 *               [0] => a
 *               [1] => b
 *           )
 *   
 *       [1] => Array
 *           (
 *               [2] => c
 *               [3] => d
 *           )
 *   
 *       [2] => Array
 *           (
 *               [4] => e
 *           )
 *   
 *   )
 */
function array_chunk(VariantMap $input, Int32 $size, Boolean $preserve_keys = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Creates an array by using one array for keys and another for its values
 * Example:   
 *   <?php
 *   $a = array('green', 'red', 'yellow');
 *   $b = array('avocado', 'apple', 'banana');
 *   $c = array_combine($a, $b);
 *   
 *   print_r($c);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [green]  => avocado
 *       [red]    => apple
 *       [yellow] => banana
 *   )
 */
function array_combine(VariantMap $keys, VariantMap $values) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Counts all the values of an array
 * Example:   
 *   <?php
 *   $array = array(1, "hello", 1, "world", "hello");
 *   print_r(array_count_values($array));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [1] => 2
 *       [hello] => 2
 *       [world] => 1
 *   )
 */
function array_count_values(VariantMap $input) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Fill an array with values, specifying keys
 * Example:   
 *   <?php
 *   $keys = array('foo', 5, 10, 'bar');
 *   $a = array_fill_keys($keys, 'banana');
 *   print_r($a);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [foo] => banana
 *       [5] => banana
 *       [10] => banana
 *       [bar] => banana
 *   )
 */
function array_fill_keys(VariantMap $keys, Variant $value) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Fill an array with values
 * Example:   
 *   <?php
 *   $a = array_fill(5, 6, 'banana');
 *   $b = array_fill(-2, 2, 'pear');
 *   print_r($a);
 *   print_r($b);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [5]  => banana
 *       [6]  => banana
 *       [7]  => banana
 *       [8]  => banana
 *       [9]  => banana
 *       [10] => banana
 *   )
 *   Array
 *   (
 *       [-2] => pear
 *       [0] => pear
 *   )
 */
function array_fill(Int32 $start_index, Int32 $num, Variant $value) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Filters elements of an array using a callback function
 * Example:   
 *   <?php
 *   function odd($var)
 *   {
 *       return($var & 1);
 *   }
 *   
 *   function even($var)
 *   {
 *       return(!($var & 1));
 *   }
 *   
 *   $array1 = array("a"=>1, "b"=>2, "c"=>3, "d"=>4, "e"=>5);
 *   $array2 = array(6, 7, 8, 9, 10, 11, 12);
 *   
 *   echo "Odd :\n";
 *   print_r(array_filter($array1, "odd"));
 *   echo "Even:\n";
 *   print_r(array_filter($array2, "even"));
 *   ?>
 * 
 * Output:   
 *   Odd :
 *   Array
 *   (
 *       [a] => 1
 *       [c] => 3
 *       [e] => 5
 *   )
 *   Even:
 *   Array
 *   (
 *       [0] => 6
 *       [2] => 8
 *       [4] => 10
 *       [6] => 12
 *   )
 */
function array_filter(VariantMap $input, Variant $callback = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Exchanges all keys with their associated values in an array
 * Example:   
 *   <?php
 *   $trans = array_flip($trans);
 *   $original = strtr($str, $trans);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [1] => b
 *       [2] => c
 *   )
 */
function array_flip(VariantMap $trans) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if the given key or index exists in the array
 * Example:   
 *   <?php
 *   $search_array = array('first' => 1, 'second' => 4);
 *   if (array_key_exists('first', $search_array)) {
 *       echo "The 'first' element is in the array";
 *   }
 *   ?>
 * 
 * Output: 
 */
function array_key_exists(Variant $key, VariantMap $search) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return all the keys or a subset of the keys of an array
 * Example:   
 *   <?php
 *   $array = array(0 => 100, "color" => "red");
 *   print_r(array_keys($array));
 *   
 *   $array = array("blue", "red", "green", "blue", "blue");
 *   print_r(array_keys($array, "blue"));
 *   
 *   $array = array("color" => array("blue", "red", "green"),
 *                  "size"  => array("small", "medium", "large"));
 *   print_r(array_keys($array));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => 0
 *       [1] => color
 *   )
 *   Array
 *   (
 *       [0] => 0
 *       [1] => 3
 *       [2] => 4
 *   )
 *   Array
 *   (
 *       [0] => color
 *       [1] => size
 *   )
 */
function array_keys(Variant $input, Variant $search_value = null_variant, Boolean $strict = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Applies the callback to the elements of the given arrays
 * Example:   
 *   <?php
 *   function cube($n)
 *   {
 *       return($n * $n * $n);
 *   }
 *   
 *   $a = array(1, 2, 3, 4, 5);
 *   $b = array_map("cube", $a);
 *   print_r($b);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => 1
 *       [1] => 8
 *       [2] => 27
 *       [3] => 64
 *       [4] => 125
 *   )
 */
function array_map(Variant $callback, VariantMap $arr1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Merge two or more arrays recursively
 * Example:   
 *   <?php
 *   $ar1 = array("color" => array("favorite" => "red"), 5);
 *   $ar2 = array(10, "color" => array("favorite" => "green", "blue"));
 *   $result = array_merge_recursive($ar1, $ar2);
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [color] => Array
 *           (
 *               [favorite] => Array
 *                   (
 *                       [0] => red
 *                       [1] => green
 *                   )
 *   
 *               [0] => blue
 *           )
 *   
 *       [0] => 5
 *       [1] => 10
 *   )
 */
function array_merge_recursive(VariantMap $array1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Merge one or more arrays
 * Example:   
 *   <?php
 *   $beginning = 'foo';
 *   $end = array(1 => 'bar');
 *   $result = array_merge((array)$beginning, (array)$end);
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *       Array
 *       (
 *           [0] => foo
 *           [1] => bar
 *       )
 */
function array_merge(VariantMap $array1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Sort multiple or multi-dimensional arrays
 * Example:   
 *   <?php
 *   $ar1 = array(10, 100, 100, 0);
 *   $ar2 = array(1, 3, 2, 4);
 *   array_multisort($ar1, $ar2);
 *   
 *   var_dump($ar1);
 *   var_dump($ar2);
 *   ?>
 * 
 * Output:   
 *   array(4) {
 *     [0]=> int(0)
 *     [1]=> int(10)
 *     [2]=> int(100)
 *     [3]=> int(100)
 *   }
 *   array(4) {
 *     [0]=> int(4)
 *     [1]=> int(1)
 *     [2]=> int(2)
 *     [3]=> int(3)
 *   }
 */
function array_multisort(Variant &$ar1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Pad array to the specified length with a value
 * Example:   
 *   <?php
 *   $input = array(12, 10, 9);
 *   
 *   $result = array_pad($input, 5, 0);
 *   // result is array(12, 10, 9, 0, 0)
 *   
 *   $result = array_pad($input, -7, -1);
 *   // result is array(-1, -1, -1, -1, 12, 10, 9)
 *   
 *   $result = array_pad($input, 2, "noop");
 *   // not padded
 *   ?>
 * 
 * Output: 
 */
function array_pad(VariantMap $input, Int32 $pad_size, Variant $pad_value) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Pop the element off the end of array
 * Example:   
 *   <?php
 *   $stack = array("orange", "banana", "apple", "raspberry");
 *   $fruit = array_pop($stack);
 *   print_r($stack);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => orange
 *       [1] => banana
 *       [2] => apple
 *   )
 */
function array_pop(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculate the product of values in an array
 * Example:   
 *   <?php
 *   
 *   $a = array(2, 4, 6, 8);
 *   echo "product(a) = " . array_product($a) . "\n";
 *   
 *   ?>
 * 
 * Output:   
 *   product(a) = 384
 */
function array_product(VariantMap $array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Push one or more elements onto the end of array
 * Example:   
 *   <?php
 *   $array[] = $var;
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => orange
 *       [1] => banana
 *       [2] => apple
 *       [3] => raspberry
 *   )
 */
function array_push(VariantMap &$array, Variant $var) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Pick one or more random entries out of an array
 * Example:   
 *   <?php
 *   $input = array("Neo", "Morpheus", "Trinity", "Cypher", "Tank");
 *   $rand_keys = array_rand($input, 2);
 *   echo $input[$rand_keys[0]] . "\n";
 *   echo $input[$rand_keys[1]] . "\n";
 *   ?>
 * 
 * Output: 
 */
function array_rand(VariantMap $input, Int32 $num_req = 1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Iteratively reduce the array to a single value using a callback function
 * Example:   
 *   <?php
 *   function rsum($v, $w)
 *   {
 *       $v += $w;
 *       return $v;
 *   }
 *   
 *   function rmul($v, $w)
 *   {
 *       $v *= $w;
 *       return $v;
 *   }
 *   
 *   $a = array(1, 2, 3, 4, 5);
 *   $x = array();
 *   $b = array_reduce($a, "rsum");
 *   $c = array_reduce($a, "rmul", 10);
 *   $d = array_reduce($x, "rsum", "No data to reduce");
 *   ?>
 * 
 * Output: 
 */
function array_reduce(VariantMap $input, Variant $callback, Variant $initial = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return an array with elements in reverse order
 * Example:   
 *   <?php
 *   $input  = array("php", 4.0, array("green", "red"));
 *   $result = array_reverse($input);
 *   $result_keyed = array_reverse($input, true);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => Array
 *           (
 *               [0] => green
 *               [1] => red
 *           )
 *   
 *       [1] => 4
 *       [2] => php
 *   )
 *   Array
 *   (
 *       [2] => Array
 *           (
 *               [0] => green
 *               [1] => red
 *           )
 *   
 *       [1] => 4
 *       [0] => php
 *   )
 */
function array_reverse(VariantMap $array, Boolean $preserve_keys = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Searches the array for a given value and returns the corresponding key if successful
 * Example:   
 *   <?php
 *   $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');
 *   
 *   $key = array_search('green', $array); // $key = 2;
 *   $key = array_search('red', $array);   // $key = 1;
 *   ?>
 * 
 * Output: 
 */
function array_search(Variant $needle, VariantMap $haystack, Boolean $strict = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Shift an element off the beginning of array
 * Example:   
 *   <?php
 *   $stack = array("orange", "banana", "apple", "raspberry");
 *   $fruit = array_shift($stack);
 *   print_r($stack);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => banana
 *       [1] => apple
 *       [2] => raspberry
 *   )
 */
function array_shift(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Extract a slice of the array
 * Example:   
 *   <?php
 *   $input = array("a", "b", "c", "d", "e");
 *   
 *   $output = array_slice($input, 2);      // returns "c", "d", and "e"
 *   $output = array_slice($input, -2, 1);  // returns "d"
 *   $output = array_slice($input, 0, 3);   // returns "a", "b", and "c"
 *   
 *   // note the differences in the array keys
 *   print_r(array_slice($input, 2, -1));
 *   print_r(array_slice($input, 2, -1, true));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => c
 *       [1] => d
 *   )
 *   Array
 *   (
 *       [2] => c
 *       [3] => d
 *   )
 */
function array_slice(VariantMap $array, Int32 $offset, Variant $length = null_variant, Boolean $preserve_keys = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Remove a portion of the array and replace it with something else
 * Example:   
 *   <?php
 *   $input = array("red", "green", "blue", "yellow");
 *   array_splice($input, 2);
 *   // $input is now array("red", "green")
 *   
 *   $input = array("red", "green", "blue", "yellow");
 *   array_splice($input, 1, -1);
 *   // $input is now array("red", "yellow")
 *   
 *   $input = array("red", "green", "blue", "yellow");
 *   array_splice($input, 1, count($input), "orange");
 *   // $input is now array("red", "orange")
 *   
 *   $input = array("red", "green", "blue", "yellow");
 *   array_splice($input, -1, 1, array("black", "maroon"));
 *   // $input is now array("red", "green",
 *   //          "blue", "black", "maroon")
 *   
 *   $input = array("red", "green", "blue", "yellow");
 *   array_splice($input, 3, 0, "purple");
 *   // $input is now array("red", "green",
 *   //          "blue", "purple", "yellow");
 *   ?>
 * 
 * Output: 
 */
function array_splice(VariantMap &$input, Int32 $offset, Variant $length = null_variant, Variant $replacement = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Calculate the sum of values in an array
 * Example:   
 *   <?php
 *   $a = array(2, 4, 6, 8);
 *   echo "sum(a) = " . array_sum($a) . "\n";
 *   
 *   $b = array("a" => 1.2, "b" => 2.3, "c" => 3.4);
 *   echo "sum(b) = " . array_sum($b) . "\n";
 *   ?>
 * 
 * Output:   
 *   sum(a) = 20
 *   sum(b) = 6.9
 */
function array_sum(VariantMap $array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Removes duplicate values from an array
 * Example:   
 *   <?php
 *   $input = array("a" => "green", "red", "b" => "green", "blue", "red");
 *   $result = array_unique($input);
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [a] => green
 *       [0] => red
 *       [1] => blue
 *   )
 */
function array_unique(VariantMap $array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Prepend one or more elements to the beginning of an array
 * Example:   
 *   <?php
 *   $queue = array("orange", "banana");
 *   array_unshift($queue, "apple", "raspberry");
 *   print_r($queue);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => apple
 *       [1] => raspberry
 *       [2] => orange
 *       [3] => banana
 *   )
 */
function array_unshift(VariantMap &$array, Variant $var) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Return all the values of an array
 * Example:   
 *   <?php
 *   $array = array("size" => "XL", "color" => "gold");
 *   print_r(array_values($array));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => XL
 *       [1] => gold
 *   )
 */
function array_values(VariantMap $input) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Apply a user function recursively to every member of an array
 * Example:   
 *   <?php
 *   $sweet = array('a' => 'apple', 'b' => 'banana');
 *   $fruits = array('sweet' => $sweet, 'sour' => 'lemon');
 *   
 *   function test_print($item, $key)
 *   {
 *       echo "$key holds $item\n";
 *   }
 *   
 *   array_walk_recursive($fruits, 'test_print');
 *   ?>
 * 
 * Output:   
 *   a holds apple
 *   b holds banana
 *   sour holds lemon
 */
function array_walk_recursive(VariantMap &$input, Variant $funcname, Variant $userdata = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Apply a user function to every member of an array
 * Example:   
 *   <?php
 *   $fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
 *   
 *   function test_alter(&$item1, $key, $prefix)
 *   {
 *       $item1 = "$prefix: $item1";
 *   }
 *   
 *   function test_print($item2, $key)
 *   {
 *       echo "$key. $item2<br />\n";
 *   }
 *   
 *   echo "Before ...:\n";
 *   array_walk($fruits, 'test_print');
 *   
 *   array_walk($fruits, 'test_alter', 'fruit');
 *   echo "... and after:\n";
 *   
 *   array_walk($fruits, 'test_print');
 *   ?>
 * 
 * Output:   
 *   Before ...:
 *   d. lemon
 *   a. orange
 *   b. banana
 *   c. apple
 *   ... and after:
 *   d. fruit: lemon
 *   a. fruit: orange
 *   b. fruit: banana
 *   c. fruit: apple
 */
function array_walk(VariantMap &$input, Variant $funcname, Variant $userdata = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create array containing variables and their values
 * Example:   
 *   <?php
 *   $city  = "San Francisco";
 *   $state = "CA";
 *   $event = "SIGGRAPH";
 *   
 *   $location_vars = array("city", "state");
 *   
 *   $result = compact("event", "nothing_here", $location_vars);
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [event] => SIGGRAPH
 *       [city] => San Francisco
 *       [state] => CA
 *   )
 */
function compact(Variant $varname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Shuffle an array
 * Example:   
 *   <?php
 *   $numbers = range(1, 20);
 *   shuffle($numbers);
 *   foreach ($numbers as $number) {
 *       echo "$number ";
 *   }
 *   ?>
 * 
 * Output: 
 */
function shuffle(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Count all elements in an array, or properties in an object
 * Example:   
 *   <?php
 *   $a[0] = 1;
 *   $a[1] = 3;
 *   $a[2] = 5;
 *   $result = count($a);
 *   // $result == 3
 *   
 *   $b[0]  = 7;
 *   $b[5]  = 9;
 *   $b[10] = 11;
 *   $result = count($b);
 *   // $result == 3
 *   
 *   $result = count(null);
 *   // $result == 0
 *   
 *   $result = count(false);
 *   // $result == 1
 *   ?>
 * 
 * Output: 
 */
function count(Variant $var, Boolean $recursive = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>count</function>
 * Example: 
 * 
 * Output: 
 */
function sizeof(Variant $var, Boolean $recursive = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return the current key and value pair from an array and advance the array cursor
 * Example:   
 *   <?php
 *   $foo = array("bob", "fred", "jussi", "jouni", "egon", "marliese");
 *   $bar = each($foo);
 *   print_r($bar);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [1] => bob
 *       [value] => bob
 *       [0] => 0
 *       [key] => 0
 *   )
 */
function each(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return the current element in an array
 * Example:   
 *   <?php
 *   $transport = array('foot', 'bike', 'car', 'plane');
 *   $mode = current($transport); // $mode = 'foot';
 *   $mode = next($transport);    // $mode = 'bike';
 *   $mode = current($transport); // $mode = 'bike';
 *   $mode = prev($transport);    // $mode = 'foot';
 *   $mode = end($transport);     // $mode = 'plane';
 *   $mode = current($transport); // $mode = 'plane';
 *   
 *   $arr = array();
 *   var_dump(current($arr)); // bool(false)
 *   
 *   $arr = array(array());
 *   var_dump(current($arr)); // array(0) { }
 *   ?>
 * 
 * Output: 
 */
function current(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Advance the internal array pointer of an array
 * Example:   
 *   <?php
 *   $transport = array('foot', 'bike', 'car', 'plane');
 *   $mode = current($transport); // $mode = 'foot';
 *   $mode = next($transport);    // $mode = 'bike';
 *   $mode = next($transport);    // $mode = 'car';
 *   $mode = prev($transport);    // $mode = 'bike';
 *   $mode = end($transport);     // $mode = 'plane';
 *   ?>
 * 
 * Output: 
 */
function next(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>current</function>
 * Example: 
 * 
 * Output: 
 */
function pos(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Rewind the internal array pointer
 * Example:   
 *   <?php
 *   $transport = array('foot', 'bike', 'car', 'plane');
 *   $mode = current($transport); // $mode = 'foot';
 *   $mode = next($transport);    // $mode = 'bike';
 *   $mode = next($transport);    // $mode = 'car';
 *   $mode = prev($transport);    // $mode = 'bike';
 *   $mode = end($transport);     // $mode = 'plane';
 *   ?>
 * 
 * Output: 
 */
function prev(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the internal pointer of an array to its first element
 * Example:   
 *   <?php
 *   
 *   $array = array('step one', 'step two', 'step three', 'step four');
 *   
 *   // by default, the pointer is on the first element
 *   echo current($array) . "<br />\n"; // "step one"
 *   
 *   // skip two steps
 *   next($array);
 *   next($array);
 *   echo current($array) . "<br />\n"; // "step three"
 *   
 *   // reset pointer, start again on step one
 *   reset($array);
 *   echo current($array) . "<br />\n"; // "step one"
 *   
 *   ?>
 * 
 * Output: 
 */
function reset(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set the internal pointer of an array to its last element
 * Example:   
 *   <?php
 *   
 *   $fruits = array('apple', 'banana', 'cranberry');
 *   echo end($fruits); // cranberry
 *   
 *   ?>
 * 
 * Output: 
 */
function end(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if a value exists in an array
 * Example:   
 *   <?php
 *   $os = array("Mac", "NT", "Irix", "Linux");
 *   if (in_array("Irix", $os)) {
 *       echo "Got Irix";
 *   }
 *   if (in_array("mac", $os)) {
 *       echo "Got mac";
 *   }
 *   ?>
 * 
 * Output:   
 *   Got Irix
 */
function in_array(Variant $needle, VariantMap $haystack, Boolean $strict = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Fetch a key from an array
 * Example:   
 *   <?php
 *   $array = array(
 *       'fruit1' => 'apple',
 *       'fruit2' => 'orange',
 *       'fruit3' => 'grape',
 *       'fruit4' => 'apple',
 *       'fruit5' => 'apple');
 *   
 *   // this cycle echoes all associative array
 *   // key where value equals "apple"
 *   while ($fruit_name = current($array)) {
 *       if ($fruit_name == 'apple') {
 *           echo key($array).'<br />';
 *       }
 *       next($array);
 *   }
 *   ?>
 * 
 * Output:   
 *   fruit1<br />
 *   fruit4<br />
 *   fruit5<br />
 */
function key(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create an array containing a range of elements
 * Example:   
 *   <?php
 *   // array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 *   foreach (range(0, 12) as $number) {
 *       echo $number;
 *   }
 *   
 *   // The step parameter was introduced in 5.0.0
 *   // array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
 *   foreach (range(0, 100, 10) as $number) {
 *       echo $number;
 *   }
 *   
 *   // Use of character sequences introduced in 4.1.0
 *   // array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i');
 *   foreach (range('a', 'i') as $letter) {
 *       echo $letter;
 *   }
 *   // array('c', 'b', 'a');
 *   foreach (range('c', 'a') as $letter) {
 *       echo $letter;
 *   }
 *   ?>
 * 
 * Output: 
 */
function range(Variant $low, Variant $high, Variant $step = 1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Computes the difference of arrays
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "red", "blue", "red");
 *   $array2 = array("b" => "green", "yellow", "red");
 *   $result = array_diff($array1, $array2);
 *   
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [1] => blue
 *   )
 */
function array_diff(VariantMap $array1, VariantMap $array2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the difference of arrays by using a callback function for data comparison
 * Example:   
 *   <?php
 *   class cr {
 *       private $priv_member;
 *       function cr($val)
 *       {
 *           $this->priv_member = $val;
 *       }
 *   
 *       static function comp_func_cr($a, $b)
 *       {
 *           if ($a->priv_member === $b->priv_member) return 0;
 *           return ($a->priv_member > $b->priv_member)? 1:-1;
 *       }
 *   }
 *   $a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
 *   $b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);
 *   
 *   $result = array_udiff($a, $b, array("cr", "comp_func_cr"));
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0.5] => cr Object
 *           (
 *               [priv_member:private] => 12
 *           )
 *   
 *       [0] => cr Object
 *           (
 *               [priv_member:private] => 23
 *           )
 *   
 *   )
 */
function array_udiff(VariantMap $array1, VariantMap $array2, Variant $data_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the difference of arrays with additional index check
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
 *   $array2 = array("a" => "green", "yellow", "red");
 *   $result = array_diff_assoc($array1, $array2);
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [b] => brown
 *       [c] => blue
 *       [0] => red
 *   )
 */
function array_diff_assoc(VariantMap $array1, VariantMap $array2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the difference of arrays with additional index check which is performed by a user supplied callback function
 * Example:   
 *   <?php
 *   function key_compare_func($a, $b)
 *   {
 *       if ($a === $b) {
 *           return 0;
 *       }
 *       return ($a > $b)? 1:-1;
 *   }
 *   
 *   $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
 *   $array2 = array("a" => "green", "yellow", "red");
 *   $result = array_diff_uassoc($array1, $array2, "key_compare_func");
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [b] => brown
 *       [c] => blue
 *       [0] => red
 *   )
 */
function array_diff_uassoc(VariantMap $array1, VariantMap $array2, Variant $key_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the difference of arrays with additional index check, compares data by a callback function
 * Example:   
 *   <?php
 *   class cr {
 *       private $priv_member;
 *       function cr($val)
 *       {
 *           $this->priv_member = $val;
 *       }
 *   
 *       static function comp_func_cr($a, $b)
 *       {
 *           if ($a->priv_member === $b->priv_member) return 0;
 *           return ($a->priv_member > $b->priv_member)? 1:-1;
 *       }
 *   }
 *   
 *   $a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
 *   $b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);
 *   
 *   $result = array_udiff_assoc($a, $b, array("cr", "comp_func_cr"));
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0.1] => cr Object
 *           (
 *               [priv_member:private] => 9
 *           )
 *   
 *       [0.5] => cr Object
 *           (
 *               [priv_member:private] => 12
 *           )
 *   
 *       [0] => cr Object
 *           (
 *               [priv_member:private] => 23
 *           )
 *   )
 */
function array_udiff_assoc(VariantMap $array1, VariantMap $array2, Variant $data_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the difference of arrays with additional index check, compares data and indexes by a callback function
 * Example:   
 *   <?php
 *   class cr {
 *       private $priv_member;
 *       function cr($val)
 *       {
 *           $this->priv_member = $val;
 *       }
 *   
 *       static function comp_func_cr($a, $b)
 *       {
 *           if ($a->priv_member === $b->priv_member) return 0;
 *           return ($a->priv_member > $b->priv_member)? 1:-1;
 *       }
 *   
 *       static function comp_func_key($a, $b)
 *       {
 *           if ($a === $b) return 0;
 *           return ($a > $b)? 1:-1;
 *       }
 *   }
 *   $a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
 *   $b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);
 *   
 *   $result = array_udiff_uassoc($a, $b, array("cr", "comp_func_cr"), array("cr", "comp_func_key"));
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0.1] => cr Object
 *           (
 *               [priv_member:private] => 9
 *           )
 *   
 *       [0.5] => cr Object
 *           (
 *               [priv_member:private] => 12
 *           )
 *   
 *       [0] => cr Object
 *           (
 *               [priv_member:private] => 23
 *           )
 *   )
 */
function array_udiff_uassoc(VariantMap $array1, VariantMap $array2, Variant $data_compare_func, Variant $key_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the difference of arrays using keys for comparison
 * Example:   
 *   <?php
 *   $array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
 *   $array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);
 *   
 *   var_dump(array_diff_key($array1, $array2));
 *   ?>
 * 
 * Output:   
 *   array(2) {
 *     ["red"]=>
 *     int(2)
 *     ["purple"]=>
 *     int(4)
 *   }
 */
function array_diff_key(VariantMap $array1, VariantMap $array2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the difference of arrays using a callback function on the keys for comparison
 * Example:   
 *   <?php
 *   function key_compare_func($key1, $key2)
 *   {
 *       if ($key1 == $key2)
 *           return 0;
 *       else if ($key1 > $key2)
 *           return 1;
 *       else
 *           return -1;
 *   }
 *   
 *   $array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
 *   $array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);
 *   
 *   var_dump(array_diff_ukey($array1, $array2, 'key_compare_func'));
 *   ?>
 * 
 * Output:   
 *   array(2) {
 *     ["red"]=>
 *     int(2)
 *     ["purple"]=>
 *     int(4)
 *   }
 */
function array_diff_ukey(VariantMap $array1, VariantMap $array2, Variant $key_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "red", "blue");
 *   $array2 = array("b" => "green", "yellow", "red");
 *   $result = array_intersect($array1, $array2);
 *   print_r($result);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [a] => green
 *       [0] => red
 *   )
 */
function array_intersect(VariantMap $array1, VariantMap $array2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays, compares data by a callback function
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
 *   $array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");
 *   
 *   print_r(array_uintersect($array1, $array2, "strcasecmp"));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [a] => green
 *       [b] => brown
 *       [0] => red
 *   )
 */
function array_uintersect(VariantMap $array1, VariantMap $array2, Variant $data_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays with additional index check
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
 *   $array2 = array("a" => "green", "yellow", "red");
 *   $result_array = array_intersect_assoc($array1, $array2);
 *   print_r($result_array);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [a] => green
 *   )
 */
function array_intersect_assoc(VariantMap $array1, VariantMap $array2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays with additional index check, compares indexes by a callback function
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
 *   $array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");
 *   
 *   print_r(array_intersect_uassoc($array1, $array2, "strcasecmp"));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [b] => brown
 *   )
 */
function array_intersect_uassoc(VariantMap $array1, VariantMap $array2, Variant $key_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays with additional index check, compares data by a callback function
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
 *   $array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");
 *   
 *   print_r(array_uintersect_assoc($array1, $array2, "strcasecmp"));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [a] => green
 *   )
 */
function array_uintersect_assoc(VariantMap $array1, VariantMap $array2, Variant $data_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions
 * Example:   
 *   <?php
 *   $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
 *   $array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");
 *   
 *   print_r(array_uintersect_uassoc($array1, $array2, "strcasecmp", "strcasecmp"));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [a] => green
 *       [b] => brown
 *   )
 */
function array_uintersect_uassoc(VariantMap $array1, VariantMap $array2, Variant $data_compare_func, Variant $key_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays using keys for comparison
 * Example:   
 *   <?php
 *   $array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
 *   $array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);
 *   
 *   var_dump(array_intersect_key($array1, $array2));
 *   ?>
 * 
 * Output:   
 *   array(2) {
 *     ["blue"]=>
 *     int(1)
 *     ["green"]=>
 *     int(3)
 *   }
 */
function array_intersect_key(VariantMap $array1, VariantMap $array2) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Computes the intersection of arrays using a callback function on the keys for comparison
 * Example:   
 *   <?php
 *   function key_compare_func($key1, $key2)
 *   {
 *       if ($key1 == $key2)
 *           return 0;
 *       else if ($key1 > $key2)
 *           return 1;
 *       else
 *           return -1;
 *   }
 *   
 *   $array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
 *   $array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);
 *   
 *   var_dump(array_intersect_ukey($array1, $array2, 'key_compare_func'));
 *   ?>
 * 
 * Output:   
 *   array(2) {
 *     ["blue"]=>
 *     int(1)
 *     ["green"]=>
 *     int(3)
 *   }
 */
function array_intersect_ukey(VariantMap $array1, VariantMap $array2, Variant $key_compare_func) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Sort an array
 * Example:   
 *   <?php
 *   
 *   $fruits = array("lemon", "orange", "banana", "apple");
 *   sort($fruits);
 *   foreach ($fruits as $key => $val) {
 *       echo "fruits[" . $key . "] = " . $val . "\n";
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   fruits[0] = apple
 *   fruits[1] = banana
 *   fruits[2] = lemon
 *   fruits[3] = orange
 */
function sort(VariantMap &$array, Int32 $sort_flags = 0, Boolean $use_collator = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array in reverse order
 * Example:   
 *   <?php
 *   $fruits = array("lemon", "orange", "banana", "apple");
 *   rsort($fruits);
 *   foreach ($fruits as $key => $val) {
 *       echo "$key = $val\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   0 = orange
 *   1 = lemon
 *   2 = banana
 *   3 = apple
 */
function rsort(VariantMap &$array, Int32 $sort_flags = 0, Boolean $use_collator = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array and maintain index association
 * Example:   
 *   <?php
 *   $fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
 *   asort($fruits);
 *   foreach ($fruits as $key => $val) {
 *       echo "$key = $val\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   c = apple
 *   b = banana
 *   d = lemon
 *   a = orange
 */
function asort(VariantMap &$array, Int32 $sort_flags = 0, Boolean $use_collator = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array in reverse order and maintain index association
 * Example:   
 *   <?php
 *   $fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
 *   arsort($fruits);
 *   foreach ($fruits as $key => $val) {
 *       echo "$key = $val\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   a = orange
 *   d = lemon
 *   b = banana
 *   c = apple
 */
function arsort(VariantMap &$array, Int32 $sort_flags = 0, Boolean $use_collator = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array by key
 * Example:   
 *   <?php
 *   $fruits = array("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
 *   ksort($fruits);
 *   foreach ($fruits as $key => $val) {
 *       echo "$key = $val\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   a = orange
 *   b = banana
 *   c = apple
 *   d = lemon
 */
function ksort(VariantMap &$array, Int32 $sort_flags = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array by key in reverse order
 * Example:   
 *   <?php
 *   $fruits = array("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
 *   krsort($fruits);
 *   foreach ($fruits as $key => $val) {
 *       echo "$key = $val\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   d = lemon
 *   c = apple
 *   b = banana
 *   a = orange
 */
function krsort(VariantMap &$array, Int32 $sort_flags = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array by values using a user-defined comparison function
 * Example:   
 *   <?php
 *   function cmp($a, $b)
 *   {
 *       if ($a == $b) {
 *           return 0;
 *       }
 *       return ($a < $b) ? -1 : 1;
 *   }
 *   
 *   $a = array(3, 2, 5, 6, 1);
 *   
 *   usort($a, "cmp");
 *   
 *   foreach ($a as $key => $value) {
 *       echo "$key: $value\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   0: 1
 *   1: 2
 *   2: 3
 *   3: 5
 *   4: 6
 */
function usort(VariantMap &$array, Variant $cmp_function) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array with a user-defined comparison function and maintain index association
 * Example:   
 *   <?php
 *   // Comparison function
 *   function cmp($a, $b) {
 *       if ($a == $b) {
 *           return 0;
 *       }
 *       return ($a < $b) ? -1 : 1;
 *   }
 *   
 *   // Array to be sorted
 *   $array = array('a' => 4, 'b' => 8, 'c' => -1, 'd' => -9, 'e' => 2, 'f' => 5, 'g' => 3, 'h' => -4);
 *   print_r($array);
 *   
 *   // Sort and print the resulting array
 *   uasort($array, 'cmp');
 *   print_r($array);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [a] => 4
 *       [b] => 8
 *       [c] => -1
 *       [d] => -9
 *       [e] => 2
 *       [f] => 5
 *       [g] => 3
 *       [h] => -4
 *   )
 *   Array
 *   (
 *       [d] => -9
 *       [h] => -4
 *       [c] => -1
 *       [e] => 2
 *       [g] => 3
 *       [a] => 4
 *       [f] => 5
 *       [b] => 8
 *   )
 */
function uasort(VariantMap &$array, Variant $cmp_function) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array by keys using a user-defined comparison function
 * Example:   
 *   <?php
 *   function cmp($a, $b)
 *   {
 *       $a = preg_replace('@^(a|an|the) @', '', $a);
 *       $b = preg_replace('@^(a|an|the) @', '', $b);
 *       return strcasecmp($a, $b);
 *   }
 *   
 *   $a = array("John" => 1, "the Earth" => 2, "an apple" => 3, "a banana" => 4);
 *   
 *   uksort($a, "cmp");
 *   
 *   foreach ($a as $key => $value) {
 *       echo "$key: $value\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   an apple: 3
 *   a banana: 4
 *   the Earth: 2
 *   John: 1
 */
function uksort(VariantMap &$array, Variant $cmp_function) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array using a "natural order" algorithm
 * Example:   
 *   <?php
 *   $array1 = $array2 = array("img12.png", "img10.png", "img2.png", "img1.png");
 *   
 *   asort($array1);
 *   echo "Standard sorting\n";
 *   print_r($array1);
 *   
 *   natsort($array2);
 *   echo "\nNatural order sorting\n";
 *   print_r($array2);
 *   ?>
 * 
 * Output:   
 *   Standard sorting
 *   Array
 *   (
 *       [3] => img1.png
 *       [1] => img10.png
 *       [0] => img12.png
 *       [2] => img2.png
 *   )
 *   
 *   Natural order sorting
 *   Array
 *   (
 *       [3] => img1.png
 *       [2] => img2.png
 *       [1] => img10.png
 *       [0] => img12.png
 *   )
 */
function natsort(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sort an array using a case insensitive "natural order" algorithm
 * Example:   
 *   <?php
 *   $array1 = $array2 = array('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png');
 *   
 *   sort($array1);
 *   echo "Standard sorting\n";
 *   print_r($array1);
 *   
 *   natcasesort($array2);
 *   echo "\nNatural order sorting (case-insensitive)\n";
 *   print_r($array2);
 *   ?>
 * 
 * Output:   
 *   Standard sorting
 *   Array
 *   (
 *       [0] => IMG0.png
 *       [1] => IMG3.png
 *       [2] => img1.png
 *       [3] => img10.png
 *       [4] => img12.png
 *       [5] => img2.png
 *   )
 *   
 *   Natural order sorting (case-insensitive)
 *   Array
 *   (
 *       [0] => IMG0.png
 *       [4] => img1.png
 *       [3] => img2.png
 *       [5] => IMG3.png
 *       [2] => img10.png
 *       [1] => img12.png
 *   )
 */
function natcasesort(VariantMap &$array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function i18n_loc_get_default() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function i18n_loc_set_default(String $locale) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function i18n_loc_set_attribute(Int64 $attr, Int64 $val) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function i18n_loc_set_strength(Int64 $strength) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function i18n_loc_get_error_code() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

