<?php
/*
 * Purpose: Create a socket (endpoint for communication)
 * Example: 
 * 
 * Output: 
 */
function socket_create(Int32 $domain, Int32 $type, Int32 $protocol) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Opens a socket on port to accept connections 
 * Example: 
 * 
 * Output: 
 */
function socket_create_listen(Int32 $port, Int32 $backlog = 128) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Creates a pair of indistinguishable sockets and stores them in an array
 * Example:   
 *   <?php
 *   $sockets = array();
 *   
 *   /* On Windows we need to use AF_INET  * / 
 *   $domain = (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? AF_INET : AF_UNIX);
 *   
 *   /* Setup socket pair  * / 
 *   if (socket_create_pair($domain, SOCK_STREAM, 0, $sockets) === false) {
 *       echo "socket_create_pair failed. Reason: ".socket_strerror(socket_last_error());
 *   }
 *   /* Send and Recieve Data  * / 
 *   if (socket_write($sockets[0], "ABCdef123\n", strlen("ABCdef123\n")) === false) {
 *       echo "socket_write() failed. Reason: ".socket_strerror(socket_last_error($sockets[0]));
 *   }
 *   if (($data = socket_read($sockets[1], strlen("ABCdef123\n"), PHP_BINARY_READ)) === false) {
 *       echo "socket_read() failed. Reason: ".socket_strerror(socket_last_error($sockets[1]));
 *   }
 *   var_dump($data);
 *   
 *   /* Close sockets  * / 
 *   socket_close($sockets[0]);
 *   socket_close($sockets[1]);
 *   ?>
 * 
 * Output: 
 */
function socket_create_pair(Int32 $domain, Int32 $type, Int32 $protocol, Int64Vec &$fd) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets socket options for the socket 
 * Example:   
 *   <?php
 *   $socket = socket_create_listen(1223);
 *   
 *   $linger = array('l_linger' => 1, 'l_onoff' => 1);
 *   socket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);
 *   
 *   var_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));
 *   ?>
 * 
 * Output: 
 */
function socket_get_option(Resource $socket, Int32 $level, Int32 $optname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
 * Example: 
 * 
 * Output: 
 */
function socket_getpeername(Resource $socket, String &$address, Int32 &$port = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
 * Example: 
 * 
 * Output: 
 */
function socket_getsockname(Resource $socket, String &$address, Int32 &$port = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets blocking mode on a socket resource
 * Example:   
 *   <?php
 *   $socket = socket_create_listen(1223);
 *   socket_set_block($socket);
 *   
 *   socket_accept($socket);
 *   ?>
 * 
 * Output: 
 */
function socket_set_block(Resource $socket) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets nonblocking mode for file descriptor fd 
 * Example:   
 *   <?php
 *   $socket = socket_create_listen(1223);
 *   socket_set_nonblock($socket);
 *   
 *   socket_accept($socket);
 *   ?>
 * 
 * Output: 
 */
function socket_set_nonblock(Resource $socket) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets socket options for the socket
 * Example:   
 *   <?php
 *   $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
 *   
 *   if (!is_resource($socket)) {
 *       echo 'Unable to create socket: '. socket_strerror(socket_last_error()) . PHP_EOL;
 *   }
 *   
 *   if (!socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1)) {
 *       echo 'Unable to set option on socket: '. socket_strerror(socket_last_error()) . PHP_EOL;
 *   }
 *   
 *   if (!socket_bind($socket, '127.0.0.1', 1223)) {
 *       echo 'Unable to bind socket: '. socket_strerror(socket_last_error()) . PHP_EOL;
 *   }
 *   
 *   $rval = socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR);
 *   
 *   if ($rval === false) {
 *       echo 'Unable to get socket option: '. socket_strerror(socket_last_error()) . PHP_EOL;
 *   } else if ($rval !== 0) {
 *       echo 'SO_REUSEADDR is set on socket !' . PHP_EOL;
 *   }
 *   ?>
 * 
 * Output: 
 */
function socket_set_option(Resource $socket, Int32 $level, Int32 $optname, Variant $optval) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Initiates a connection on a socket
 * Example: 
 * 
 * Output: 
 */
function socket_connect(Resource $socket, String $address, Int32 $port = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Binds a name to a socket
 * Example:   
 *   <?php
 *   // Create a new socket
 *   $sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
 *   
 *   // An example list of IP addresses owned by the computer
 *   $sourceips['kevin']    = '127.0.0.1';
 *   $sourceips['madcoder'] = '127.0.0.2';
 *   
 *   // Bind the source address
 *   socket_bind($sock, $sourceips['madcoder']);
 *   
 *   // Connect to destination address
 *   socket_connect($sock, '127.0.0.1', 80);
 *   
 *   // Write
 *   $request = 'GET / HTTP/1.1' . "\r\n" .
 *              'Host: example.com' . "\r\n\r\n";
 *   socket_write($sock, $request);
 *   
 *   // Close
 *   socket_close($sock);
 *   
 *   ?> 
 * 
 * Output: 
 */
function socket_bind(Resource $socket, String $address, Int32 $port = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Listens for a connection on a socket
 * Example: 
 * 
 * Output: 
 */
function socket_listen(Resource $socket, Int32 $backlog = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Runs the select() system call on the given arrays of sockets with a specified timeout
 * Example:   
 *   <?php
 *   $e = NULL;
 *   socket_select($r, $w, $e, 0);
 *   ?>
 * 
 * Output: 
 */
function socket_select(VariantVec &$read, VariantVec &$write, VariantVec &$except, Variant $vtv_sec, Int32 $tv_usec = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function socket_server(String $hostname, Int32 $port = -1, Int32 &$errnum = null, String &$errstr = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Accepts a connection on a socket
 * Example: 
 * 
 * Output: 
 */
function socket_accept(Resource $socket) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Reads a maximum of length bytes from a socket
 * Example: 
 * 
 * Output: 
 */
function socket_read(Resource $socket, Int32 $length, Int32 $type = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Write to a socket
 * Example: 
 * 
 * Output: 
 */
function socket_write(Resource $socket, String $buffer, Int32 $length = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sends data to a connected socket
 * Example: 
 * 
 * Output: 
 */
function socket_send(Resource $socket, String $buf, Int32 $len, Int32 $flags) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sends a message to a socket, whether it is connected or not 
 * Example:   
 *   <?php
 *       $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);
 *   
 *       $msg = "Ping !";
 *       $len = strlen($msg);
 *   
 *       socket_sendto($sock, $msg, $len, 0, '127.0.0.1', 1223);
 *       socket_close($sock);
 *   ?>
 * 
 * Output: 
 */
function socket_sendto(Resource $socket, String $buf, Int32 $len, Int32 $flags, String $addr, Int32 $port = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Receives data from a connected socket 
 * Example:   
 *   <?php
 *   error_reporting(E_ALL);
 *   
 *   echo "<h2>TCP/IP Connection</h2>\n";
 *   
 *   /* Get the port for the WWW service.  * / 
 *   $service_port = getservbyname('www', 'tcp');
 *   
 *   /* Get the IP address for the target host.  * / 
 *   $address = gethostbyname('www.example.com');
 *   
 *   /* Create a TCP/IP socket.  * / 
 *   $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
 *   if ($socket === false) {
 *       echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
 *   } else {
 *       echo "OK.\n";
 *   }
 *   
 *   echo "Attempting to connect to '$address' on port '$service_port'...";
 *   $result = socket_connect($socket, $address, $service_port);
 *   if ($result === false) {
 *       echo "socket_connect() failed.\nReason: ($result) " . socket_strerror(socket_last_error($socket)) . "\n";
 *   } else {
 *       echo "OK.\n";
 *   }
 *   
 *   $in = "HEAD / HTTP/1.1\r\n";
 *   $in .= "Host: www.example.com\r\n";
 *   $in .= "Connection: Close\r\n\r\n";
 *   $out = '';
 *   
 *   echo "Sending HTTP HEAD request...";
 *   socket_write($socket, $in, strlen($in));
 *   echo "OK.\n";
 *   
 *   echo "Reading response:\n\n";
 *   $buf = 'This is my buffer.';
 *   if (false !== ($bytes = socket_recv($socket, $buf, 2048, MSG_WAITALL))) {
 *       echo "Read $bytes bytes from socket_recv(). Closing socket...";
 *   } else {
 *       echo "socket_recv() failed; reason: " . socket_strerror(socket_last_error($socket)) . "\n";
 *   }
 *   socket_close($socket);
 *   
 *   echo $buf . "\n";
 *   echo "OK.\n\n";
 *   ?>
 * 
 * Output:   
 *   <h2>TCP/IP Connection</h2>
 *   OK.
 *   Attempting to connect to '208.77.188.166' on port '80'...OK.
 *   Sending HTTP HEAD request...OK.
 *   Reading response:
 *   
 *   Closing socket...HTTP/1.1 200 OK
 *   Date: Mon, 14 Sep 2009 08:56:36 GMT
 *   Server: Apache/2.2.3 (Red Hat)
 *   Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT
 *   ETag: "b80f4-1b6-80bfd280"
 *   Accept-Ranges: bytes
 *   Content-Length: 438
 *   Connection: close
 *   Content-Type: text/html; charset=UTF-8
 *   
 *   OK.
 */
function socket_recv(Resource $socket, String &$buf, Int32 $len, Int32 $flags) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Receives data from a socket whether or not it is connection-oriented
 * Example:   
 *   <?php
 *   error_reporting(E_ALL | E_STRICT);
 *   
 *   $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);
 *   socket_bind($socket, '127.0.0.1', 1223);
 *   
 *   $from = '';
 *   $port = 0;
 *   socket_recvfrom($socket, $buf, 12, 0, $from, $port);
 *   
 *   echo "Received $buf from remote address $from and remote port $port" . PHP_EOL;
 *   ?>
 * 
 * Output: 
 */
function socket_recvfrom(Resource $socket, String &$buf, Int32 $len, Int32 $flags, String &$name, Int32 &$port = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Shuts down a socket for receiving, sending, or both
 * Example: 
 * 
 * Output: 
 */
function socket_shutdown(Resource $socket, Int32 $how = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Closes a socket resource
 * Example: 
 * 
 * Output: 
 */
function socket_close(Resource $socket) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return a string describing a socket error
 * Example:   
 *   <?php
 *   if (false == ($socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {
 *      echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
 *   }
 *   
 *   if (false == (@socket_bind($socket, '127.0.0.1', 80))) {
 *      echo "socket_bind() failed: reason: " . socket_strerror(socket_last_error($socket)) . "\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   socket_bind() failed: reason: Permission denied
 */
function socket_strerror(Int32 $errnum) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the last error on the socket 
 * Example:   
 *   <?php
 *   $socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
 *   
 *   if ($socket === false) {
 *       $errorcode = socket_last_error();
 *       $errormsg = socket_strerror($errorcode);
 *       
 *       die("Couldn't create socket: [$errorcode] $errormsg");
 *   }
 *   ?>
 * 
 * Output: 
 */
function socket_last_error(Resource $socket = null_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Clears the error on the socket or the last error code
 * Example: 
 * 
 * Output: 
 */
function socket_clear_error(Resource $socket = null_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

