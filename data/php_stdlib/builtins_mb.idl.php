<?php
/*
 * Purpose: Returns an array of all supported encodings
 * Example:   
 *   <?php
 *   
 *   print_r(mb_list_encodings());
 *   
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => pass
 *       [1] => auto
 *       [2] => wchar
 *       [3] => byte2be
 *       [4] => byte2le
 *       [5] => byte4be
 *       [6] => byte4le
 *       [7] => BASE64
 *       [8] => UUENCODE
 *       [9] => HTML-ENTITIES
 *       [10] => Quoted-Printable
 *       [11] => 7bit
 *       [12] => 8bit
 *       [13] => UCS-4
 *       [14] => UCS-4BE
 *       [15] => UCS-4LE
 *       [16] => UCS-2
 *       [17] => UCS-2BE
 *       [18] => UCS-2LE
 *       [19] => UTF-32
 *       [20] => UTF-32BE
 *       [21] => UTF-32LE
 *       [22] => UTF-16
 *       [23] => UTF-16BE
 *       [24] => UTF-16LE
 *       [25] => UTF-8
 *       [26] => UTF-7
 *       [27] => UTF7-IMAP
 *       [28] => ASCII
 *       [29] => EUC-JP
 *       [30] => SJIS
 *       [31] => eucJP-win
 *       [32] => SJIS-win
 *       [33] => JIS
 *       [34] => ISO-2022-JP
 *       [35] => Windows-1252
 *       [36] => ISO-8859-1
 *       [37] => ISO-8859-2
 *       [38] => ISO-8859-3
 *       [39] => ISO-8859-4
 *       [40] => ISO-8859-5
 *       [41] => ISO-8859-6
 *       [42] => ISO-8859-7
 *       [43] => ISO-8859-8
 *       [44] => ISO-8859-9
 *       [45] => ISO-8859-10
 *       [46] => ISO-8859-13
 *       [47] => ISO-8859-14
 *       [48] => ISO-8859-15
 *       [49] => EUC-CN
 *       [50] => CP936
 *       [51] => HZ
 *       [52] => EUC-TW
 *       [53] => BIG-5
 *       [54] => EUC-KR
 *       [55] => UHC
 *       [56] => ISO-2022-KR
 *       [57] => Windows-1251
 *       [58] => CP866
 *       [59] => KOI8-R
 *   )
 */
function mb_list_encodings() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function mb_list_encodings_alias_names(String $name = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function mb_list_mime_names(String $name = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Check if the string is valid for the specified encoding
 * Example: 
 * 
 * Output: 
 */
function mb_check_encoding(String $var = null_string, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Perform case folding on a string
 * Example:   
 *   <?php
 *   $str = "mary had a Little lamb and she loved it so";
 *   $str = mb_convert_case($str, MB_CASE_UPPER, "UTF-8");
 *   echo $str; // Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO
 *   $str = mb_convert_case($str, MB_CASE_TITLE, "UTF-8");
 *   echo $str; // Prints Mary Had A Little Lamb And She Loved It So
 *   ?>
 * 
 * Output: 
 */
function mb_convert_case(String $str, Int32 $mode, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert character encoding
 * Example:   
 *   <?php
 *   /* Convert internal character encoding to SJIS  * / 
 *   $str = mb_convert_encoding($str, "SJIS");
 *   
 *   /* Convert EUC-JP to UTF-7  * / 
 *   $str = mb_convert_encoding($str, "UTF-7", "EUC-JP");
 *   
 *   /* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE  * / 
 *   $str = mb_convert_encoding($str, "UCS-2LE", "JIS, eucjp-win, sjis-win");
 *   
 *   /* "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS"  * / 
 *   $str = mb_convert_encoding($str, "EUC-JP", "auto");
 *   ?>
 * 
 * Output: 
 */
function mb_convert_encoding(String $str, String $to_encoding, Variant $from_encoding = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function mb_convert_kana(String $str, String $option = null_string, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Convert character code in variable(s)
 * Example:   
 *   <?php
 *   /* Convert variables $post1, $post2 to internal encoding  * / 
 *   $interenc = mb_internal_encoding();
 *   $inputenc = mb_convert_variables($interenc, "ASCII,UTF-8,SJIS-win", $post1, $post2);
 *   ?>
 * 
 * Output: 
 */
function mb_convert_variables(String $to_encoding, Variant $from_encoding, Variant &$vars) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

/*
 * Purpose: Decode string in MIME header field
 * Example: 
 * 
 * Output: 
 */
function mb_decode_mimeheader(String $str) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Decode HTML numeric string reference to character
 * Example:   
 *   $convmap = array (
 *      int start_code1, int end_code1, int offset1, int mask1,
 *      int start_code2, int end_code2, int offset2, int mask2,
 *      ........
 *      int start_codeN, int end_codeN, int offsetN, int maskN );
 *   // Specify Unicode value for start_codeN and end_codeN
 *   // Add offsetN to value and take bit-wise 'AND' with maskN, 
 *   // then convert value to numeric string reference.
 * 
 * Output: 
 */
function mb_decode_numericentity(String $str, Variant $convmap, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Detect character encoding
 * Example:   
 *   <?php
 *   /* Detect character encoding with current detect_order  * / 
 *   echo mb_detect_encoding($str);
 *   
 *   /* "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS"  * / 
 *   echo mb_detect_encoding($str, "auto");
 *   
 *   /* Specify encoding_list character encoding by comma separated list  * / 
 *   echo mb_detect_encoding($str, "JIS, eucjp-win, sjis-win");
 *   
 *   /* Use array to specify encoding_list   * / 
 *   $ary[] = "ASCII";
 *   $ary[] = "JIS";
 *   $ary[] = "EUC-JP";
 *   echo mb_detect_encoding($str, $ary);
 *   ?>
 * 
 * Output: 
 */
function mb_detect_encoding(String $str, Variant $encoding_list = null_variant, Variant $strict = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set/Get character encoding detection order
 * Example:   
 *   ; Always detect as ISO-8859-1
 *   detect_order = ISO-8859-1, UTF-8
 *   
 *   ; Always detect as UTF-8, since ASCII/UTF-7 values are 
 *   ; valid for UTF-8
 *   detect_order = UTF-8, ASCII, UTF-7
 * 
 * Output: 
 */
function mb_detect_order(Variant $encoding_list = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Encode string for MIME header
 * Example:   
 *   <?php
 *   $name = ""; // kanji
 *   $mbox = "kru";
 *   $doma = "gtinn.mon";
 *   $addr = mb_encode_mimeheader($name, "UTF-7", "Q") . " <" . $mbox . "@" . $doma . ">";
 *   echo $addr;
 *   ?>
 * 
 * Output: 
 */
function mb_encode_mimeheader(String $str, String $charset = null_string, String $transfer_encoding = null_string, String $linefeed = "\r\n", Int32 $indent = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Encode character to HTML numeric string reference
 * Example:   
 *   $convmap = array (
 *    int start_code1, int end_code1, int offset1, int mask1,
 *    int start_code2, int end_code2, int offset2, int mask2,
 *    ........
 *    int start_codeN, int end_codeN, int offsetN, int maskN );
 *   // Specify Unicode value for start_codeN and end_codeN
 *   // Add offsetN to value and take bit-wise 'AND' with maskN, then
 *   // it converts value to numeric string reference.
 * 
 * Output: 
 */
function mb_encode_numericentity(String $str, Variant $convmap, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Regular expression match for multibyte string
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_match(String $pattern, String $str, String $option = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Replace regular expression with multibyte support
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_replace(Variant $pattern, String $replacement, String $str, String $option = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns start point for next regular expression match
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_search_getpos() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieve the result from the last multibyte regular expression match
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_search_getregs() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Setup string and regular expression for a multibyte regular expression match
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_search_init(String $str, String $pattern = null_string, String $option = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_search_pos(String $pattern = null_string, String $option = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the matched part of a multibyte regular expression
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_search_regs(String $pattern = null_string, String $option = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set start point of next regular expression match
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_search_setpos(Int32 $position) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Multibyte regular expression match for predefined multibyte string
 * Example: 
 * 
 * Output: 
 */
function mb_ereg_search(String $pattern = null_string, String $option = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Regular expression match with multibyte support
 * Example: 
 * 
 * Output: 
 */
function mb_ereg(Variant $pattern, String $str, Variant &$regs = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Replace regular expression with multibyte support ignoring case
 * Example: 
 * 
 * Output: 
 */
function mb_eregi_replace(Variant $pattern, String $replacement, String $str, String $option = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Regular expression match ignoring case with multibyte support
 * Example: 
 * 
 * Output: 
 */
function mb_eregi(Variant $pattern, String $str, Variant &$regs = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get internal settings of mbstring
 * Example: 
 * 
 * Output: 
 */
function mb_get_info(String $type = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Detect HTTP input character encoding
 * Example: 
 * 
 * Output: 
 */
function mb_http_input(String $type = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set/Get HTTP output character encoding
 * Example: 
 * 
 * Output: 
 */
function mb_http_output(String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set/Get internal character encoding
 * Example:   
 *   <?php
 *   /* Set internal character encoding to UTF-8  * / 
 *   mb_internal_encoding("UTF-8");
 *   
 *   /* Display current internal character encoding  * / 
 *   echo mb_internal_encoding();
 *   ?>
 * 
 * Output: 
 */
function mb_internal_encoding(String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set/Get current language
 * Example: 
 * 
 * Output: 
 */
function mb_language(String $language = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Callback function converts character encoding in output buffer
 * Example:   
 *   <?php
 *   mb_http_output("UTF-8");
 *   ob_start("mb_output_handler");
 *   ?>
 * 
 * Output: 
 */
function mb_output_handler(String $contents, Int32 $status) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Parse GET/POST/COOKIE data and set global variable
 * Example: 
 * 
 * Output: 
 */
function mb_parse_str(String $encoded_string, StringVec &$result = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get MIME charset string
 * Example:   
 *   <?php
 *   $outputenc = "sjis-win";
 *   mb_http_output($outputenc);
 *   ob_start("mb_output_handler");
 *   header("Content-Type: text/html; charset=" . mb_preferred_mime_name($outputenc));
 *   ?>
 * 
 * Output: 
 */
function mb_preferred_mime_name(String $encoding) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns current encoding for multibyte regex as string
 * Example: 
 * 
 * Output: 
 */
function mb_regex_encoding(String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function mb_regex_set_options(String $options = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Send encoded mail
 * Example: 
 * 
 * Output: 
 */
function mb_send_mail(String $to, String $subject, String $message, String $headers = null_string, String $extra_cmd = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Split multibyte string using regular expression
 * Example: 
 * 
 * Output: 
 */
function mb_split(String $pattern, String $str, Int32 $count = -1) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get part of string
 * Example: 
 * 
 * Output: 
 */
function mb_strcut(String $str, Int32 $start, Int32 $length = 0x7FFFFFFF, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get truncated string with specified width
 * Example:   
 *   <?php
 *   echo mb_strimwidth("Hello World", 0, 10, "...");
 *   // outputs Hello W...
 *   ?>
 * 
 * Output: 
 */
function mb_strimwidth(String $str, Int32 $start, Int32 $width, String $trimmarker = null_string, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds position of first occurrence of a string within another, case insensitive
 * Example: 
 * 
 * Output: 
 */
function mb_stripos(String $haystack, String $needle, Int32 $offset = 0, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds first occurrence of a string within another, case insensitive
 * Example: 
 * 
 * Output: 
 */
function mb_stristr(String $haystack, String $needle, Boolean $part = false, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get string length
 * Example: 
 * 
 * Output: 
 */
function mb_strlen(String $str, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find position of first occurrence of string in a string
 * Example: 
 * 
 * Output: 
 */
function mb_strpos(String $haystack, String $needle, Int32 $offset = 0, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds the last occurrence of a character in a string within another
 * Example: 
 * 
 * Output: 
 */
function mb_strrchr(String $haystack, String $needle, Boolean $part = false, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds the last occurrence of a character in a string within another, case insensitive
 * Example: 
 * 
 * Output: 
 */
function mb_strrichr(String $haystack, String $needle, Boolean $part = false, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds position of last occurrence of a string within another, case insensitive
 * Example: 
 * 
 * Output: 
 */
function mb_strripos(String $haystack, String $needle, Int32 $offset = 0, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find position of last occurrence of a string in a string
 * Example: 
 * 
 * Output: 
 */
function mb_strrpos(String $haystack, String $needle, Variant $offset = 0, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Finds first occurrence of a string within another
 * Example: 
 * 
 * Output: 
 */
function mb_strstr(String $haystack, String $needle, Boolean $part = false, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Make a string lowercase
 * Example:   
 *   <?php
 *   $str = "Mary Had A Little Lamb and She LOVED It So";
 *   $str = mb_strtolower($str);
 *   echo $str; // Prints mary had a little lamb and she loved it so
 *   ?>
 * 
 * Output: 
 */
function mb_strtolower(String $str, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Make a string uppercase
 * Example:   
 *   <?php
 *   $str = "Mary Had A Little Lamb and She LOVED It So";
 *   $str = mb_strtoupper($str);
 *   echo $str; // Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO
 *   ?>
 * 
 * Output: 
 */
function mb_strtoupper(String $str, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return width of string
 * Example: 
 * 
 * Output: 
 */
function mb_strwidth(String $str, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set/Get substitution character
 * Example:   
 *   <?php
 *   /* Set with Unicode U+3013 (GETA MARK)  * / 
 *   mb_substitute_character(0x3013);
 *   
 *   /* Set hex format  * / 
 *   mb_substitute_character("long");
 *   
 *   /* Display current setting  * / 
 *   echo mb_substitute_character();
 *   ?>
 * 
 * Output: 
 */
function mb_substitute_character(Variant $substrchar = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Count the number of substring occurrences
 * Example:   
 *   <?php
 *   echo mb_substr_count("This is a test", "is"); // prints out 2
 *   ?>
 * 
 * Output: 
 */
function mb_substr_count(String $haystack, String $needle, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get part of string
 * Example: 
 * 
 * Output: 
 */
function mb_substr(String $str, Int32 $start, Int32 $length = 0x7FFFFFFF, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

