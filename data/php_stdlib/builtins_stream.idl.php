<?php
/*
 * Purpose: Create a streams context
 * Example:   
 *   <?php
 *   $opts = array(
 *     'http'=>array(
 *       'method'=>"GET",
 *       'header'=>"Accept-language: en\r\n" .
 *                 "Cookie: foo=bar\r\n"
 *     )
 *   );
 *   
 *   $context = stream_context_create($opts);
 *   
 *   /* Sends an http request to www.example.com
 *      with additional headers shown above  * / 
 *   $fp = fopen('http://www.example.com', 'r', false, $context);
 *   fpassthru($fp);
 *   fclose($fp);
 *   ?>
 * 
 * Output: 
 */
function stream_context_create(VariantMap $options = null_array, VariantMap $params = null_array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retreive the default streams context
 * Example:   
 *   <?php
 *   $default_opts = array(
 *     'http'=>array(
 *       'method'=>"GET",
 *       'header'=>"Accept-language: en\r\n" .
 *                 "Cookie: foo=bar",
 *       'proxy'=>"tcp://10.54.1.39:8000"
 *     )
 *   );
 *   
 *   
 *   $alternate_opts = array(
 *     'http'=>array(
 *       'method'=>"POST",
 *       'header'=>"Content-type: application/x-www-form-urlencoded\r\n" .
 *                 "Content-length: " . strlen("baz=bomb"),
 *       'content'=>"baz=bomb"
 *     )
 *   );
 *   
 *   $default = stream_context_get_default($default_opts);
 *   $alternate = stream_context_create($alternate_opts);
 *   
 *   /* Sends a regular GET request to proxy server at 10.54.1.39
 *    * For www.example.com using context options specified in $default_opts
 *     * / 
 *   readfile('http://www.example.com');
 *   
 *   /* Sends a POST request directly to www.example.com
 *    * Using context options specified in $alternate_opts
 *     * / 
 *   readfile('http://www.example.com', false, $alternate);
 *   
 *   ?>
 * 
 * Output: 
 */
function stream_context_get_default(VariantMap $options = null_array) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieve options for a stream/wrapper/context
 * Example:   
 *   <?php
 *   $params = array("method" => "POST");
 *   
 *   stream_context_get_default(array("http" => $params));
 *   
 *   var_dump(stream_context_get_options(stream_context_get_default()));
 *   
 *   ?>
 * 
 * Output:   
 *   array(1) {
 *     ["http"]=>
 *     array(1) {
 *       ["method"]=>
 *       string(4) "POST"
 *     }
 *   }
 */
function stream_context_get_options(Resource $stream_or_context) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets an option for a stream/wrapper/context
 * Example: 
 * 
 * Output: 
 */
function stream_context_set_option(Resource $stream_or_context, Variant $wrapper, String $option = null_string, Variant $value = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function stream_context_set_param(Resource $stream_or_context, VariantMap $params) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Copies data from one stream to another
 * Example:   
 *   <?php
 *   $src = fopen('http://www.example.com', 'r');
 *   $dest1 = fopen('first1k.txt', 'w');
 *   $dest2 = fopen('remainder.txt', 'w');
 *   
 *   echo stream_copy_to_stream($src, $dest1, 1024) . " bytes copied to first1k.txt\n";
 *   echo stream_copy_to_stream($src, $dest2) . " bytes copied to remainder.txt\n";
 *   
 *   ?>
 * 
 * Output: 
 */
function stream_copy_to_stream(Resource $source, Resource $dest, Int32 $maxlength = 0, Int32 $offset = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set character set for stream encoding
 * Example: 
 * 
 * Output: 
 */
function stream_encoding(Resource $stream, String $encoding = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Append bucket to brigade
 * Example: 
 * 
 * Output: 
 */
function stream_bucket_append(Resource $brigade, Resource $bucket) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Prepend bucket to brigade
 * Example: 
 * 
 * Output: 
 */
function stream_bucket_prepend(Resource $brigade, Resource $bucket) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Return a bucket object from the brigade for operating on
 * Example: 
 * 
 * Output: 
 */
function stream_bucket_make_writeable(Resource $brigade) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Create a new bucket for use on the current stream
 * Example: 
 * 
 * Output: 
 */
function stream_bucket_new(Resource $stream, String $buffer) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function stream_filter_register(String $filtername, String $classname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Remove a filter from a stream
 * Example:   
 *   <?php
 *   /* Open a test file for reading and writing  * / 
 *   $fp = fopen("test.txt", "rw");
 *   
 *   $rot13_filter = stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);
 *   fwrite($fp, "This is ");
 *   stream_filter_remove($rot13_filter);
 *   fwrite($fp, "a test\n");
 *   
 *   rewind($fp);
 *   fpassthru($fp);
 *   fclose($fp);
 *   
 *   ?>
 * 
 * Output:   
 *   Guvf vf a test
 */
function stream_filter_remove(Resource $stream_filter) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Attach a filter to a stream
 * Example:   
 *   <?php
 *   /* Open a test file for reading and writing  * / 
 *   $fp = fopen('test.txt', 'w+');
 *   
 *   /* Apply the ROT13 filter to the
 *    * write filter chain, but not the
 *    * read filter chain  * / 
 *   stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);
 *   
 *   /* Write a simple string to the file
 *    * it will be ROT13 transformed on the
 *    * way out  * / 
 *   fwrite($fp, "This is a test\n");
 *   
 *   /* Back up to the beginning of the file  * / 
 *   rewind($fp);
 *   
 *   /* Read the contents of the file back out.
 *    * Had the filter been applied to the
 *    * read filter chain as well, we would see
 *    * the text ROT13ed back to its original state  * / 
 *   fpassthru($fp);
 *   
 *   fclose($fp);
 *   
 *   /* Expected Output
 *      ---------------
 *   
 *   Guvf vf n grfg
 *   
 *     * / 
 *   ?>
 * 
 * Output: 
 */
function stream_filter_append(Resource $stream, String $filtername, Int32 $read_write = 0, Variant $params = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Attach a filter to a stream
 * Example: 
 * 
 * Output: 
 */
function stream_filter_prepend(Resource $stream, String $filtername, Int32 $read_write = 0, Variant $params = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Reads remainder of a stream into a string
 * Example:   
 *   <?php
 *   
 *   if ($stream = fopen('http://www.example.com', 'r')) {
 *       // print all the page starting at the offset 10
 *       echo stream_get_contents($stream, -1, 10);
 *   
 *       fclose($stream);
 *   }
 *   
 *   
 *   if ($stream = fopen('http://www.example.net', 'r')) {
 *       // print the first 5 bytes
 *       echo stream_get_contents($stream, 5);
 *   
 *       fclose($stream);
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function stream_get_contents(Resource $handle, Int32 $maxlen = 0, Int32 $offset = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieve list of registered filters
 * Example:   
 *   <?php
 *   $streamlist = stream_get_filters();
 *   print_r($streamlist);
 *   ?>
 * 
 * Output:   
 *   Array (
 *     [0] => string.rot13
 *     [1] => string.toupper
 *     [2] => string.tolower
 *     [3] => string.base64
 *     [4] => string.quoted-printable
 *   )
 */
function stream_get_filters() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets line from stream resource up to a given delimiter
 * Example: 
 * 
 * Output: 
 */
function stream_get_line(Resource $handle, Int32 $length = 0, String $ending = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieves header/meta data from streams/file pointers
 * Example:   
 *   <?php
 *   $url = 'http://www.example.com/';
 *   
 *   if (!$fp = fopen($url, 'r')) {
 *       trigger_error("Unable to open URL ($url)", E_USER_ERROR);
 *   }
 *   
 *   $meta = stream_get_meta_data($fp);
 *   
 *   print_r($meta);
 *   
 *   fclose($fp);
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [wrapper_data] => Array
 *           (
 *               [0] => HTTP/1.1 200 OK
 *               [1] => Server: Apache/2.2.3 (Red Hat)
 *               [2] => Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT
 *               [3] => ETag: "b300b4-1b6-4059a80bfd280"
 *               [4] => Accept-Ranges: bytes
 *               [5] => Content-Type: text/html; charset=UTF-8
 *               [6] => Set-Cookie: FOO=BAR; expires=Fri, 21-Dec-2012 12:00:00 GMT; path=/; domain=.example.com
 *               [6] => Connection: close     
 *               [7] => Date: Fri, 16 Oct 2009 12:00:00 GMT
 *               [8] => Age: 1164   
 *               [9] => Content-Length: 438
 *           )
 *   
 *       [wrapper_type] => http
 *       [stream_type] => tcp_socket/ssl
 *       [mode] => r
 *       [unread_bytes] => 438
 *       [seekable] => 
 *       [uri] => http://www.example.com/
 *       [timed_out] => 
 *       [blocked] => 1
 *       [eof] => 
 *   )
 */
function stream_get_meta_data(Resource $stream) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieve list of registered socket transports
 * Example:   
 *   <?php
 *   $xportlist = stream_get_transports();
 *   print_r($xportlist);
 *   ?>
 * 
 * Output:   
 *   Array (
 *     [0] => tcp
 *     [1] => udp
 *     [2] => unix
 *     [3] => udg
 *   )
 */
function stream_get_transports() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieve list of registered streams
 * Example:   
 *   <?php
 *   print_r(stream_get_wrappers());
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => php
 *       [1] => file
 *       [2] => http
 *       [3] => ftp
 *       [4] => compress.bzip2
 *       [5] => compress.zlib
 *   )
 */
function stream_get_wrappers() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>stream_wrapper_register</function>
 * Example: 
 * 
 * Output: 
 */
function stream_register_wrapper(String $protocol, String $classname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Register a URL wrapper implemented as a PHP class
 * Example:   
 *   <?php
 *   $existed = in_array("var", stream_get_wrappers());
 *   if ($existed) {
 *       stream_wrapper_unregister("var");
 *   }
 *   stream_wrapper_register("var", "VariableStream");
 *   $myvar = "";
 *   
 *   $fp = fopen("var://myvar", "r+");
 *   
 *   fwrite($fp, "line1\n");
 *   fwrite($fp, "line2\n");
 *   fwrite($fp, "line3\n");
 *   
 *   rewind($fp);
 *   while (!feof($fp)) {
 *       echo fgets($fp);
 *   }
 *   fclose($fp);
 *   var_dump($myvar);
 *   
 *   if ($existed) {
 *       stream_wrapper_restore("var");
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   line1
 *   line2
 *   line3
 *   string(18) "line1
 *   line2
 *   line3
 *   "
 */
function stream_wrapper_register(String $protocol, String $classname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Restores a previously unregistered built-in wrapper
 * Example: 
 * 
 * Output: 
 */
function stream_wrapper_restore(String $protocol) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Unregister a URL wrapper
 * Example: 
 * 
 * Output: 
 */
function stream_wrapper_unregister(String $protocol) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Resolve filename against the include path
 * Example:   
 *   <?php
 *   var_dump(stream_resolve_include_path("test.php"));
 *   ?>
 * 
 * Output:   
 *   unicode(10) "/var/www/html/test.php"
 */
function stream_resolve_include_path(String $filename, Resource $context = null_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Runs the equivalent of the select() system call on the given
 *    arrays of streams with a timeout specified by tv_sec and tv_usec 
 * Example:   
 *   <?php
 *   /* Prepare the read array  * / 
 *   $read   = array($stream1, $stream2);
 *   $write  = NULL;
 *   $except = NULL;
 *   if (false === ($num_changed_streams = stream_select($read, $write, $except, 0))) {
 *       /* Error handling  * / 
 *   } elseif ($num_changed_streams > 0) {
 *       /* At least on one of the streams something interesting happened  * / 
 *   }
 *   ?>
 * 
 * Output: 
 */
function stream_select(VariantVec &$read, VariantVec &$write, VariantVec &$except, Variant $vtv_sec, Int32 $tv_usec = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set blocking/non-blocking mode on a stream
 * Example: 
 * 
 * Output: 
 */
function stream_set_blocking(Resource $stream, Int32 $mode) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Set timeout period on a stream
 * Example:   
 *   <?php
 *   $fp = fsockopen("www.example.com", 80);
 *   if (!$fp) {
 *       echo "Unable to open\n";
 *   } else {
 *   
 *       fwrite($fp, "GET / HTTP/1.0\r\n\r\n");
 *       stream_set_timeout($fp, 2);
 *       $res = fread($fp, 2000);
 *   
 *       $info = stream_get_meta_data($fp);
 *       fclose($fp);
 *   
 *       if ($info['timed_out']) {
 *           echo 'Connection timed out!';
 *       } else {
 *           echo $res;
 *       }
 *   
 *   }
 *   ?>
 * 
 * Output: 
 */
function stream_set_timeout(Resource $stream, Int32 $seconds, Int32 $microseconds = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets write file buffering on the given stream
 * Example:   
 *   <?php
 *   $fp = fopen($file, "w");
 *   if ($fp) {
 *     stream_set_write_buffer($fp, 0);
 *     fwrite($fp, $output);
 *     fclose($fp);
 *   }
 *   ?>
 * 
 * Output: 
 */
function stream_set_write_buffer(Resource $stream, Int32 $buffer) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>stream_set_write_buffer</function>
 * Example: 
 * 
 * Output: 
 */
function set_file_buffer(Resource $stream, Int32 $buffer) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Accept a connection on a socket created by  <function>stream_socket_server</function>
 * Example: 
 * 
 * Output: 
 */
function stream_socket_accept(Resource $server_socket, Double $timeout = 0.0, String &$peername = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Create an Internet or Unix domain server socket
 * Example:   
 *   <?php
 *   $socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
 *   if (!$socket) {
 *     echo "$errstr ($errno)<br />\n";
 *   } else {
 *     while ($conn = stream_socket_accept($socket)) {
 *       fwrite($conn, 'The local time is ' . date('n/j/Y g:i a') . "\n");
 *       fclose($conn);
 *     }
 *     fclose($socket);
 *   }
 *   ?>
 * 
 * Output: 
 */
function stream_socket_server(String $local_socket, Int32 &$errnum = null, String &$errstr = null, Int32 $flags = 0, Resource $context = null_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Open Internet or Unix domain socket connection
 * Example:   
 *   <?php
 *   $fp = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
 *   if (!$fp) {
 *       echo "$errstr ($errno)<br />\n";
 *   } else {
 *       fwrite($fp, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept:  * / *\r\n\r\n");
 *       while (!feof($fp)) {
 *           echo fgets($fp, 1024);
 *       }
 *       fclose($fp);
 *   }
 *   ?>
 * 
 * Output: 
 */
function stream_socket_client(String $remote_socket, Int32 &$errnum = null, String &$errstr = null, Double $timeout = 0.0, Int32 $flags = 0, Resource $context = null_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Turns encryption on/off on an already connected socket
 * Example:   
 *   <?php
 *   $fp = stream_socket_client("tcp://myproto.example.com:31337", $errno, $errstr, 30);
 *   if (!$fp) {
 *       die("Unable to connect: $errstr ($errno)");
 *   }
 *   
 *   /* Turn on encryption for login phase  * / 
 *   stream_socket_enable_crypto($fp, true, STREAM_CRYPTO_METHOD_SSLv23_CLIENT);
 *   fwrite($fp, "USER god\r\n");
 *   fwrite($fp, "PASS secret\r\n");
 *   
 *   /* Turn off encryption for the rest  * / 
 *   stream_socket_enable_crypto($fp, false);
 *   
 *   while ($motd = fgets($fp)) {
 *       echo $motd;
 *   }
 *   
 *   fclose($fp);
 *   ?>
 * 
 * Output:   
 */
function stream_socket_enable_crypto(Resource $stream, Boolean $enable, Int32 $crypto_type = 0, Resource $session_stream = null_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieve the name of the local or remote sockets
 * Example: 
 * 
 * Output: 
 */
function stream_socket_get_name(Resource $handle, Boolean $want_peer) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Creates a pair of connected, indistinguishable socket streams
 * Example:   
 *   <?php
 *   
 *   $sockets = stream_socket_pair(STREAM_PF_UNIX, STREAM_SOCK_STREAM, STREAM_IPPROTO_IP);
 *   $pid     = pcntl_fork();
 *   
 *   if ($pid == -1) {
 *        die('could not fork');
 *   
 *   } else if ($pid) {
 *        /* parent  * / 
 *       fclose($sockets[0]);
 *   
 *       fwrite($sockets[1], "child PID: $pid\n");
 *       echo fgets($sockets[1]);
 *   
 *       fclose($sockets[1]);
 *   
 *   } else {
 *       /* child  * / 
 *       fclose($sockets[1]);
 *   
 *       fwrite($sockets[0], "message from child\n");
 *       echo fgets($sockets[0]);
 *   
 *       fclose($sockets[0]);
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   child PID: 1378
 *   message from child
 */
function stream_socket_pair(Int32 $domain, Int32 $type, Int32 $protocol) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Receives data from a socket, connected or not 
 * Example:   
 *   <?php
 *   /* Open a server socket to port 1234 on localhost  * / 
 *   $server = stream_socket_server('tcp://127.0.0.1:1234');
 *   
 *   /* Accept a connection  * / 
 *   $socket = stream_socket_accept($server);
 *   
 *   /* Grab a packet (1500 is a typical MTU size) of OOB data  * / 
 *   echo "Received Out-Of-Band: '" . stream_socket_recvfrom($socket, 1500, STREAM_OOB) . "'\n";
 *   
 *   /* Take a peek at the normal in-band data, but don't comsume it.  * / 
 *   echo "Data: '" . stream_socket_recvfrom($socket, 1500, STREAM_PEEK) . "'\n";
 *   
 *   /* Get the exact same packet again, but remove it from the buffer this time.  * / 
 *   echo "Data: '" . stream_socket_recvfrom($socket, 1500) . "'\n";
 *   
 *   /* Close it up  * / 
 *   fclose($socket);
 *   fclose($server);
 *   ?>
 * 
 * Output: 
 */
function stream_socket_recvfrom(Resource $socket, Int32 $length, Int32 $flags = 0, String $address = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sends a message to a socket, whether it is connected or not 
 * Example:   
 *   <?php
 *   /* Open a socket to port 1234 on localhost  * / 
 *   $socket = stream_socket_client('tcp://127.0.0.1:1234');
 *   
 *   /* Send ordinary data via ordinary channels.  * / 
 *   fwrite($socket, "Normal data transmit.");
 *   
 *   /* Send more data out of band.  * / 
 *   stream_socket_sendto($socket, "Out of Band data.", STREAM_OOB);
 *   
 *   /* Close it up  * / 
 *   fclose($socket);
 *   ?>
 * 
 * Output: 
 */
function stream_socket_sendto(Resource $socket, String $data, Int32 $flags = 0, String $address = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Shutdown a full-duplex connection
 * Example:   
 *   <?php
 *   
 *   $server = stream_socket_server('tcp://127.0.0.1:1337');
 *   $client = stream_socket_client('tcp://127.0.0.1:1337');
 *   
 *   var_dump(fputs($client, "hello"));
 *   
 *   stream_socket_shutdown($client, STREAM_SHUT_WR);
 *   var_dump(fputs($client, "hello")); // doesn't work now
 *   
 *   ?>
 * 
 * Output:   
 *   int(5)
 *   
 *   Notice: fputs(): send of 5 bytes failed with errno=32 Broken pipe in test.php on line 9
 *   int(0)
 */
function stream_socket_shutdown(Resource $stream, Int32 $how) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

