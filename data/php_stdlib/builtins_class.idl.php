<?php
/*
 * Purpose: Returns an array with the name of the defined classes
 * Example:   
 *   <?php
 *   print_r(get_declared_classes());
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => stdClass
 *       [1] => __PHP_Incomplete_Class
 *       [2] => Directory
 *   )
 */
function get_declared_classes() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns an array of all declared interfaces
 * Example:   
 *   <?php
 *   print_r(get_declared_interfaces());
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => Traversable
 *       [1] => IteratorAggregate
 *       [2] => Iterator
 *       [3] => ArrayAccess
 *       [4] => reflector
 *       [5] => RecursiveIterator
 *       [6] => SeekableIterator
 *   )
 */
function get_declared_interfaces() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if the class has been defined
 * Example:   
 *   <?php
 *   // Check that the class exists before trying to use it
 *   if (class_exists('MyClass')) {
 *       $myclass = new MyClass();
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function class_exists(String $class_name, Boolean $autoload = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if the interface has been defined
 * Example:   
 *   <?php
 *   // Check the interface exists before trying to use it
 *   if (interface_exists('MyInterface')) {
 *       class MyClass implements MyInterface
 *       {
 *           // Methods
 *       }
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function interface_exists(String $interface_name, Boolean $autoload = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the class methods' names
 * Example:   
 *   <?php
 *   
 *   class myclass {
 *       // constructor
 *       function myclass()
 *       {
 *           return(true);
 *       }
 *   
 *       // method 1
 *       function myfunc1()
 *       {
 *           return(true);
 *       }
 *   
 *       // method 2
 *       function myfunc2()
 *       {
 *           return(true);
 *       }
 *   }
 *   
 *   $class_methods = get_class_methods('myclass');
 *   // or
 *   $class_methods = get_class_methods(new myclass());
 *   
 *   foreach ($class_methods as $method_name) {
 *       echo "$method_name\n";
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   myclass
 *   myfunc1
 *   myfunc2
 */
function get_class_methods(Variant $class_or_object) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function get_class_vars(String $class_name) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the name of the class of an object
 * Example:   
 *   <?php
 *   
 *   class foo {
 *       function name()
 *       {
 *           echo "My name is " , get_class($this) , "\n";
 *       }
 *   }
 *   
 *   // create an object
 *   $bar = new foo();
 *   
 *   // external call
 *   echo "Its name is " , get_class($bar) , "\n";
 *   
 *   // internal call
 *   $bar->name();
 *   
 *   ?>
 * 
 * Output:   
 *   Its name is foo
 *   My name is foo
 */
function get_class(Variant $object = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Retrieves the parent class name for object or class
 * Example:   
 *   <?php
 *   
 *   class dad {
 *       function dad()
 *       {
 *       // implements some logic
 *       }
 *   }
 *   
 *   class child extends dad {
 *       function child()
 *       {
 *           echo "I'm " , get_parent_class($this) , "'s son\n";
 *       }
 *   }
 *   
 *   class child2 extends dad {
 *       function child2()
 *       {
 *           echo "I'm " , get_parent_class('child2') , "'s son too\n";
 *       }
 *   }
 *   
 *   $foo = new child();
 *   $bar = new child2();
 *   
 *   ?>
 * 
 * Output:   
 *   I'm dad's son
 *   I'm dad's son too
 */
function get_parent_class(Variant $object = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if the object is of this class or has this class as one of its parents
 * Example:   
 *   <?php
 *   // define a class
 *   class WidgetFactory
 *   {
 *     var $oink = 'moo';
 *   }
 *   
 *   // create a new object
 *   $WF = new WidgetFactory();
 *   
 *   if (is_a($WF, 'WidgetFactory')) {
 *     echo "yes, \$WF is still a WidgetFactory\n";
 *   }
 *   ?>
 * 
 * Output: 
 */
function is_a(Object $object, String $class_name) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if the object has this class as one of its parents
 * Example:   
 *   <?php
 *   // define a class
 *   class WidgetFactory
 *   {
 *     var $oink = 'moo';
 *   }
 *   
 *   // define a child class
 *   class WidgetFactory_Child extends WidgetFactory
 *   {
 *     var $oink = 'oink';
 *   }
 *   
 *   // create a new object
 *   $WF = new WidgetFactory();
 *   $WFC = new WidgetFactory_Child();
 *   
 *   if (is_subclass_of($WFC, 'WidgetFactory')) {
 *     echo "yes, \$WFC is a subclass of WidgetFactory\n";
 *   } else {
 *     echo "no, \$WFC is not a subclass of WidgetFactory\n";
 *   }
 *   
 *   
 *   if (is_subclass_of($WF, 'WidgetFactory')) {
 *     echo "yes, \$WF is a subclass of WidgetFactory\n";
 *   } else {
 *     echo "no, \$WF is not a subclass of WidgetFactory\n";
 *   }
 *   
 *   
 *   // usable only since PHP 5.0.3
 *   if (is_subclass_of('WidgetFactory_Child', 'WidgetFactory')) {
 *     echo "yes, WidgetFactory_Child is a subclass of WidgetFactory\n";
 *   } else {
 *     echo "no, WidgetFactory_Child is not a subclass of WidgetFactory\n";
 *   }
 *   ?>
 * 
 * Output:   
 *   yes, $WFC is a subclass of WidgetFactory
 *   no, $WF is not a subclass of WidgetFactory
 *   yes, WidgetFactory_Child is a subclass of WidgetFactory
 */
function is_subclass_of(Variant $class_or_object, String $class_name) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if the class method exists
 * Example:   
 *   <?php
 *   $directory = new Directory('.');
 *   var_dump(method_exists($directory,'read'));
 *   ?>
 * 
 * Output:   
 *   bool(true)
 */
function method_exists(Variant $class_or_object, String $method_name) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose:    Checks if the object or class has a property
 * Example:   
 *   <?php
 *   
 *   class myClass {
 *       public $mine;
 *       private $xpto;
 *       static protected $test;
 *   
 *       static function test() {
 *           var_dump(property_exists('myClass', 'xpto')); //true
 *       }
 *   }
 *   
 *   var_dump(property_exists('myClass', 'mine'));   //true
 *   var_dump(property_exists(new myClass, 'mine')); //true
 *   var_dump(property_exists('myClass', 'xpto'));   //true, as of PHP 5.3.0
 *   var_dump(property_exists('myClass', 'bar'));    //false
 *   var_dump(property_exists('myClass', 'test'));   //true, as of PHP 5.3.0
 *   myClass::test();
 *   
 *   ?>
 * 
 * Output: 
 */
function property_exists(Variant $class_or_object, String $property) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the properties of the given object
 * Example:   
 *   <?php
 *   
 *   class foo {
 *       private $a;
 *       public $b = 1;
 *       public $c;
 *       private $d;
 *       static $e;
 *      
 *       public function test() {
 *           var_dump(get_object_vars($this));
 *       }
 *   }
 *   
 *   $test = new foo;
 *   var_dump(get_object_vars($test));
 *   
 *   $test->test();
 *   
 *   ?>
 * 
 * Output:   
 *   array(2) {
 *     ["b"]=>
 *     int(1)
 *     ["c"]=>
 *     NULL
 *   }
 *   array(4) {
 *     ["a"]=>
 *     NULL
 *     ["b"]=>
 *     int(1)
 *     ["c"]=>
 *     NULL
 *     ["d"]=>
 *     NULL
 *   }
 */
function get_object_vars(Object $object, Object &$this_object = null) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Call a user method given with an array of parameters [deprecated]
 * Example:   
 *   <?php
 *   call_user_func_array(array($obj, $method_name), $params);
 *   call_user_func_array(array(&$obj, $method_name), $params); // PHP 4
 *   ?>
 * 
 * Output: 
 */
function call_user_method_array(String $method_name, Object &$obj, VariantVec $paramarr) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Call a user method on an specific object [deprecated]
 * Example:   
 *   <?php
 *   call_user_func(array($obj, $method_name), $parameter /* , ...  * / );
 *   call_user_func(array(&$obj, $method_name), $parameter /* , ...  * / ); // PHP 4
 *   ?>
 * 
 * Output: 
 */
function call_user_method(String $method_name, Object &$obj) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
 $args = func_num_args(); // fake code to say variable #args
 
}

