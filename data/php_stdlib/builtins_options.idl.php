<?php
/*
 * Purpose: Set/get the various assert flags
 * Example:   
 *   <?php
 *   // This is our function to handle 
 *   // assert failures
 *   function assert_failure()
 *   {
 *       echo 'Assert failed';
 *   }
 *   
 *   // This is our test function
 *   function test_assert($parameter)
 *   {
 *       assert(is_bool($parameter));
 *   }
 *   
 *   // Set our assert options
 *   assert_options(ASSERT_ACTIVE,   true);
 *   assert_options(ASSERT_BAIL,     true);
 *   assert_options(ASSERT_WARNING,  false);
 *   assert_options(ASSERT_CALLBACK, 'assert_failure');
 *   
 *   // Make an assert that would fail
 *   test_assert(1);
 *   
 *   // This is never reached due to ASSERT_BAIL 
 *   // being true
 *   echo 'Never reached';
 *   ?>
 * 
 * Output: 
 */
function assert_options(Int32 $what, Variant $value = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Checks if assertion is &false;
 * Example:   
 *   <?php
 *   // Active assert and make it quiet
 *   assert_options(ASSERT_ACTIVE, 1);
 *   assert_options(ASSERT_WARNING, 0);
 *   assert_options(ASSERT_QUIET_EVAL, 1);
 *   
 *   // Create a handler function
 *   function my_assert_handler($file, $line, $code)
 *   {
 *       echo "<hr>Assertion Failed:
 *           File '$file'<br />
 *           Line '$line'<br />
 *           Code '$code'<br /><hr />";
 *   }
 *   
 *   // Set up the callback
 *   assert_options(ASSERT_CALLBACK, 'my_assert_handler');
 *   
 *   // Make an assertion that should fail
 *   assert('mysql_query("")');
 *   ?>
 * 
 * Output: 
 */
function assert(Variant $assertion) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Loads a PHP extension at runtime
 * Example:   
 *   <?php
 *   // Example loading an extension based on OS
 *   if (!extension_loaded('sqlite')) {
 *       if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
 *           dl('php_sqlite.dll');
 *       } else {
 *           dl('sqlite.so');
 *       }
 *   }
 *   
 *   // Or, the PHP_SHLIB_SUFFIX constant is available as of PHP 4.3.0
 *   if (!extension_loaded('sqlite')) {
 *       $prefix = (PHP_SHLIB_SUFFIX === 'dll') ? 'php_' : '';
 *       dl($prefix . 'sqlite.' . PHP_SHLIB_SUFFIX);
 *   }
 *   ?>
 * 
 * Output: 
 */
function dl(String $library) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Find out whether an extension is loaded
 * Example:   
 *   <?php
 *   if (!extension_loaded('gd')) {
 *       if (!dl('gd.so')) {
 *           exit;
 *       }
 *   }
 *   ?>
 * 
 * Output:   
 *   $ php -m
 *   [PHP Modules]
 *   xml
 *   tokenizer
 *   standard
 *   sockets
 *   session
 *   posix
 *   pcre
 *   overload
 *   mysql
 *   mbstring
 *   ctype
 *   
 *   [Zend Modules]
 */
function extension_loaded(String $name) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns an array with the names of all modules compiled and loaded
 * Example:   
 *   <?php
 *   print_r(get_loaded_extensions());
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *      [0] => xml
 *      [1] => wddx
 *      [2] => standard
 *      [3] => session
 *      [4] => posix
 *      [5] => pgsql
 *      [6] => pcre
 *      [7] => gd
 *      [8] => ftp
 *      [9] => db
 *      [10] => calendar
 *      [11] => bcmath
 *   )
 */
function get_loaded_extensions(Boolean $zend_extensions = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns an array with the names of the functions of a module
 * Example:   
 *   <?php
 *   print_r(get_extension_funcs("xml"));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [0] => xml_parser_create
 *       [1] => xml_parser_create_ns
 *       [2] => xml_set_object
 *       [3] => xml_set_element_handler
 *       [4] => xml_set_character_data_handler
 *       [5] => xml_set_processing_instruction_handler
 *       [6] => xml_set_default_handler
 *       [7] => xml_set_unparsed_entity_decl_handler
 *       [8] => xml_set_notation_decl_handler
 *       [9] => xml_set_external_entity_ref_handler
 *       [10] => xml_set_start_namespace_decl_handler
 *       [11] => xml_set_end_namespace_decl_handler
 *       [12] => xml_parse
 *       [13] => xml_parse_into_struct
 *       [14] => xml_get_error_code
 *       [15] => xml_error_string
 *       [16] => xml_get_current_line_number
 *       [17] => xml_get_current_column_number
 *       [18] => xml_get_current_byte_index
 *       [19] => xml_parser_free
 *       [20] => xml_parser_set_option
 *       [21] => xml_parser_get_option
 *       [22] => utf8_encode
 *       [23] => utf8_decode
 *   )
 */
function get_extension_funcs(String $module_name) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the value of a PHP configuration option
 * Example: 
 * 
 * Output: 
 */
function get_cfg_var(String $option) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the name of the owner of the current PHP script
 * Example:   
 *   <?php
 *   echo 'Current script owner: ' . get_current_user();
 *   ?>
 * 
 * Output:   
 *   Current script owner: SYSTEM
 */
function get_current_user() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns an associative array with the names of all the constants and their values
 * Example:   
 *   <?php
 *   define("MY_CONSTANT", 1);
 *   print_r(get_defined_constants(true));
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [Core] => Array
 *           (
 *               [E_ERROR] => 1
 *               [E_WARNING] => 2
 *               [E_PARSE] => 4
 *               [E_NOTICE] => 8
 *               [E_CORE_ERROR] => 16
 *               [E_CORE_WARNING] => 32
 *               [E_COMPILE_ERROR] => 64
 *               [E_COMPILE_WARNING] => 128
 *               [E_USER_ERROR] => 256
 *               [E_USER_WARNING] => 512
 *               [E_USER_NOTICE] => 1024
 *               [E_ALL] => 2047
 *               [TRUE] => 1
 *           )
 *   
 *       [pcre] => Array
 *           (
 *               [PREG_PATTERN_ORDER] => 1
 *               [PREG_SET_ORDER] => 2
 *               [PREG_OFFSET_CAPTURE] => 256
 *               [PREG_SPLIT_NO_EMPTY] => 1
 *               [PREG_SPLIT_DELIM_CAPTURE] => 2
 *               [PREG_SPLIT_OFFSET_CAPTURE] => 4
 *               [PREG_GREP_INVERT] => 1
 *           )
 *   
 *       [user] => Array
 *           (
 *               [MY_CONSTANT] => 1
 *           )
 *   
 *   )
 */
function get_defined_constants(Variant $categorize = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the current include_path configuration option
 * Example:   
 *   <?php
 *   // Works as of PHP 4.3.0
 *   echo get_include_path();
 *   
 *   // Works in all PHP versions
 *   echo ini_get('include_path');
 *   ?>
 * 
 * Output: 
 */
function get_include_path() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Restores the value of the include_path configuration option
 * Example:   
 *   <?php
 *   
 *   echo get_include_path();  // .:/usr/local/lib/php
 *   
 *   set_include_path('/inc');
 *   
 *   echo get_include_path();  // /inc
 *   
 *   // Works as of PHP 4.3.0
 *   restore_include_path();
 *   
 *   // Works in all PHP versions
 *   ini_restore('include_path');
 *   
 *   echo get_include_path();  // .:/usr/local/lib/php
 *   
 *   ?>
 * 
 * Output: 
 */
function restore_include_path() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets the include_path configuration option
 * Example:   
 *   <?php
 *   // Works as of PHP 4.3.0
 *   set_include_path('/inc');
 *   
 *   // Works in all PHP versions
 *   ini_set('include_path', '/inc');
 *   ?>
 * 
 * Output: 
 */
function set_include_path(String $new_include_path) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns an array with the names of included or required files
 * Example:   
 *   <?php
 *   // This file is abc.php
 *   
 *   include 'test1.php';
 *   include_once 'test2.php';
 *   require 'test3.php';
 *   require_once 'test4.php';
 *   
 *   $included_files = get_included_files();
 *   
 *   foreach ($included_files as $filename) {
 *       echo "$filename\n";
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   abc.php
 *   test1.php
 *   test2.php
 *   test3.php
 *   test4.php
 */
function get_included_files() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the current configuration setting of magic_quotes_gpc
 * Example:   
 *   <?php
 *   echo get_magic_quotes_gpc();         // 1
 *   echo $_POST['lastname'];             // O\'reilly
 *   echo addslashes($_POST['lastname']); // O\\\'reilly
 *   
 *   if (get_magic_quotes_gpc()) {
 *       $lastname = stripslashes($_POST['lastname']);
 *   }
 *   else {
 *       $lastname = $_POST['lastname'];
 *   }
 *   
 *   // If using MySQL
 *   $lastname = mysql_real_escape_string($lastname);
 *   
 *   echo $lastname; // O\'reilly
 *   $sql = "INSERT INTO lastnames (lastname) VALUES ('$lastname')";
 *   ?>
 * 
 * Output: 
 */
function get_magic_quotes_gpc() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the current active configuration setting of magic_quotes_runtime
 * Example:   
 *   <?php
 *   // Check if magic_quotes_runtime is active
 *   if(get_magic_quotes_runtime())
 *   {
 *       // Deactivate
 *       set_magic_quotes_runtime(false);
 *   }
 *   ?>
 * 
 * Output: 
 */
function get_magic_quotes_runtime() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>get_included_files</function>
 * Example: 
 * 
 * Output: 
 */
function get_required_files() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the value of an environment variable
 * Example:   
 *   <?php
 *   // Example use of getenv()
 *   $ip = getenv('REMOTE_ADDR');
 *   
 *   // Or simply use a Superglobal ($_SERVER or $_ENV)
 *   $ip = $_SERVER['REMOTE_ADDR'];
 *   ?>
 * 
 * Output: 
 */
function getenv(String $varname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets time of last page modification
 * Example:   
 *   <?php
 *   // outputs e.g. 'Last modified: March 04 1998 20:43:59.'
 *   echo "Last modified: " . date ("F d Y H:i:s.", getlastmod());
 *   ?>
 * 
 * Output: 
 */
function getlastmod() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Get PHP script owner's GID
 * Example: 
 * 
 * Output: 
 */
function getmygid() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the inode of the current script
 * Example: 
 * 
 * Output: 
 */
function getmyinode() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets PHP's process ID
 * Example: 
 * 
 * Output: 
 */
function getmypid() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets PHP script owner's UID
 * Example: 
 * 
 * Output: 
 */
function getmyuid() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets options from the command line argument list
 * Example:   
 *   <?php
 *   $options = getopt("f:hp:");
 *   var_dump($options);
 *   ?>
 * 
 * Output:   
 *   array(2) {
 *     ["f"]=>
 *     string(5) "value"
 *     ["h"]=>
 *     bool(false)
 *   }
 */
function getopt(String $options, Variant $longopts = null_variant) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the current resource usages
 * Example:   
 *   <?php
 *   $dat = getrusage();
 *   echo $dat["ru_nswap"];         // number of swaps
 *   echo $dat["ru_majflt"];        // number of page faults
 *   echo $dat["ru_utime.tv_sec"];  // user time used (seconds)
 *   echo $dat["ru_utime.tv_usec"]; // user time used (microseconds)
 *   ?>
 * 
 * Output: 
 */
function getrusage(Int32 $who = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function clock_getres(Int32 $clk_id, Int64 &$sec, Int64 &$nsec) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function clock_gettime(Int32 $clk_id, Int64 &$sec, Int64 &$nsec) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

function clock_settime(Int32 $clk_id, Int64 $sec, Int64 $nsec) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: &Alias;  <function>ini_set</function>
 * Example: 
 * 
 * Output: 
 */
function ini_alter(String $varname, String $newvalue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets all configuration options
 * Example:   
 *   <?php
 *   print_r(ini_get_all("pcre"));
 *   print_r(ini_get_all());
 *   ?>
 * 
 * Output:   
 *   Array
 *   (
 *       [pcre.backtrack_limit] => Array
 *           (
 *               [global_value] => 100000
 *               [local_value] => 100000
 *               [access] => 7
 *           )
 *   
 *       [pcre.recursion_limit] => Array
 *           (
 *               [global_value] => 100000
 *               [local_value] => 100000
 *               [access] => 7
 *           )
 *   
 *   )
 *   Array
 *   (
 *       [allow_call_time_pass_reference] => Array
 *           (
 *               [global_value] => 0
 *               [local_value] => 0
 *               [access] => 6
 *           )
 *   
 *       [allow_url_fopen] => Array
 *           (
 *               [global_value] => 1
 *               [local_value] => 1
 *               [access] => 4
 *           )
 *   
 *       ...
 *   
 *   )
 */
function ini_get_all(String $extension = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the value of a configuration option
 * Example:   
 *   <?php
 *   /*
 *   Our php.ini contains the following settings:
 *   
 *   display_errors = On
 *   register_globals = Off
 *   post_max_size = 8M
 *    * / 
 *   
 *   echo 'display_errors = ' . ini_get('display_errors') . "\n";
 *   echo 'register_globals = ' . ini_get('register_globals') . "\n";
 *   echo 'post_max_size = ' . ini_get('post_max_size') . "\n";
 *   echo 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . "\n";
 *   echo 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));
 *   
 *   function return_bytes($val) {
 *       $val = trim($val);
 *       $last = strtolower($val[strlen($val)-1]);
 *       switch($last) {
 *           // The 'G' modifier is available since PHP 5.1.0
 *           case 'g':
 *               $val *= 1024;
 *           case 'm':
 *               $val *= 1024;
 *           case 'k':
 *               $val *= 1024;
 *       }
 *   
 *       return $val;
 *   }
 *   
 *   ?>
 * 
 * Output:   
 *   
 *   display_errors = 1
 *   register_globals = 0
 *   post_max_size = 8M
 *   post_max_size+1 = 9
 *   post_max_size in bytes = 8388608
 *   
 */
function ini_get(String $varname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Restores the value of a configuration option
 * Example:   
 *   <?php
 *   $setting = 'y2k_compliance';
 *   
 *   echo 'Current value for \'' . $setting . '\': ' . ini_get($setting), PHP_EOL;
 *   
 *   ini_set($setting, ini_get($setting) ? 0 : 1);
 *   echo 'New value for \'' . $setting . '\': ' . ini_get($setting), PHP_EOL;
 *   
 *   ini_restore($setting);
 *   echo 'Original value for \'' . $setting . '\': ' . ini_get($setting), PHP_EOL;
 *   ?>
 * 
 * Output:   
 *   Current value for 'y2k_compliance': 1
 *   New value for 'y2k_compliance': 0
 *   Original value for 'y2k_compliance': 1
 */
function ini_restore(String $varname) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets the value of a configuration option
 * Example:   
 *   <?php
 *   echo ini_get('display_errors');
 *   
 *   if (!ini_get('display_errors')) {
 *       ini_set('display_errors', 1);
 *   }
 *   
 *   echo ini_get('display_errors');
 *   ?>
 * 
 * Output: 
 */
function ini_set(String $varname, String $newvalue) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the peak of memory allocated by PHP
 * Example: 
 * 
 * Output: 
 */
function memory_get_peak_usage(Boolean $real_usage = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the amount of memory allocated to PHP
 * Example:   
 *   <?php
 *   // This is only an example, the numbers below will
 *   // differ depending on your system
 *   
 *   echo memory_get_usage() . "\n"; // 36640
 *   
 *   $a = str_repeat("Hello", 4242);
 *   
 *   echo memory_get_usage() . "\n"; // 57960
 *   
 *   unset($a);
 *   
 *   echo memory_get_usage() . "\n"; // 36744
 *   
 *   ?>
 * 
 * Output: 
 */
function memory_get_usage(Boolean $real_usage = false) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Return a list of .ini files parsed from the additional ini dir
 * Example:   
 *   <?php
 *   if ($filelist = php_ini_scanned_files()) {
 *       if (strlen($filelist) > 0) {
 *           $files = explode(',', $filelist);
 *   
 *           foreach ($files as $file) {
 *               echo "<li>" . trim($file) . "</li>\n";
 *           }
 *       }
 *   }
 *   ?>
 * 
 * Output: 
 */
function php_ini_scanned_files() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the logo guid
 * Example:   
 *   <?php
 *   
 *   echo '<img src="' . $_SERVER['PHP_SELF'] .
 *        '?=' . php_logo_guid() . '" alt="PHP Logo !" />';
 *   
 *   ?>
 * 
 * Output: 
 */
function php_logo_guid() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns the type of interface between web server and PHP
 * Example:   
 *   <?php
 *   $sapi_type = php_sapi_name();
 *   if (substr($sapi_type, 0, 3) == 'cgi') {
 *       echo "You are using CGI PHP\n";
 *   } else {
 *       echo "You are not using CGI PHP\n";
 *   }
 *   ?>
 * 
 * Output: 
 */
function php_sapi_name() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns information about the operating system PHP is running on
 * Example:   
 *   <?php
 *   echo php_uname();
 *   echo PHP_OS;
 *   
 *   /* Some possible outputs:
 *   Linux localhost 2.4.21-0.13mdk #1 Fri Mar 14 15:08:06 EST 2003 i686
 *   Linux
 *   
 *   FreeBSD localhost 3.2-RELEASE #15: Mon Dec 17 08:46:02 GMT 2001
 *   FreeBSD
 *   
 *   Windows NT XN1 5.1 build 2600
 *   WINNT
 *    * / 
 *   
 *   if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
 *       echo 'This is a server using Windows!';
 *   } else {
 *       echo 'This is a server not using Windows!';
 *   }
 *   
 *   ?>
 * 
 * Output: 
 */
function php_uname(String $mode = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Prints out the credits for PHP
 * Example:   
 *   <?php
 *   phpcredits(CREDITS_GENERAL);
 *   ?>
 * 
 * Output: 
 */
function phpcredits(Int32 $flag = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Outputs information about PHP's configuration
 * Example:   
 *   <?php
 *   
 *   // Show all information, defaults to INFO_ALL
 *   phpinfo();
 *   
 *   // Show just the module information.
 *   // phpinfo(8) yields identical results.
 *   phpinfo(INFO_MODULES);
 *   
 *   ?>
 * 
 * Output: 
 */
function phpinfo(Int32 $what = 0) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the current PHP version
 * Example:   
 *   <?php
 *   // prints e.g. 'Current PHP version: 4.1.1'
 *   echo 'Current PHP version: ' . phpversion();
 *   
 *   // prints e.g. '2.0' or nothing if the extension isn't enabled
 *   echo phpversion('tidy');
 *   ?>
 * 
 * Output: 
 */
function phpversion(String $extension = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets the value of an environment variable
 * Example:   
 *   <?php
 *   putenv("UNIQID=$uniqid");
 *   ?>
 * 
 * Output: 
 */
function putenv(String $setting) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Sets the current active configuration setting of magic_quotes_runtime
 * Example:   
 *   <?php
 *   // Create a temporary file pointer
 *   $fp = tmpfile();
 *   
 *   // Write some data to the pointer
 *   fwrite($fp, '\'PHP\' is a Recursive acronym');
 *   
 *   // Without magic_quotes_runtime
 *   rewind($fp);
 *   set_magic_quotes_runtime(false);
 *   
 *   echo 'Without magic_quotes_runtime: ' . fread($fp, 64), PHP_EOL;
 *   
 *   // With magic_quotes_runtime
 *   rewind($fp);
 *   set_magic_quotes_runtime(true);
 *   
 *   echo 'With magic_quotes_runtime: ' . fread($fp, 64), PHP_EOL;
 *   
 *   // Clean up
 *   fclose($fp);
 *   ?>
 * 
 * Output:   
 *   Without magic_quotes_runtime: 'PHP' is a Recursive acronym
 *   With magic_quotes_runtime: \'PHP\' is a Recursive acronym
 */
function set_magic_quotes_runtime(Int32 $new_setting) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Limits the maximum execution time
 * Example: 
 * 
 * Output: 
 */
function set_time_limit(Int32 $seconds) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns directory path used for temporary files
 * Example:   
 *   <?php
 *   // Create a temporary file in the temporary 
 *   // files directory using sys_get_temp_dir()
 *   $temp_file = tempnam(sys_get_temp_dir(), 'Tux');
 *   
 *   echo $temp_file;
 *   ?>
 * 
 * Output:   
 *   C:\Windows\Temp\TuxA318.tmp
 */
function sys_get_temp_dir() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Compares two "PHP-standardized" version number strings
 * Example:   
 *   <?php
 *   if (version_compare(PHP_VERSION, '6.0.0') >= 0) {
 *       echo 'I am at least PHP version 6.0.0, my version: ' . PHP_VERSION . "\n";
 *   }
 *   
 *   if (version_compare(PHP_VERSION, '5.3.0') >= 0) {
 *       echo 'I am at least PHP version 5.3.0, my version: ' . PHP_VERSION . "\n";
 *   }
 *   
 *   if (version_compare(PHP_VERSION, '5.0.0', '>=')) {
 *       echo 'I am using PHP 5, my version: ' . PHP_VERSION . "\n";
 *   }
 *   
 *   if (version_compare(PHP_VERSION, '5.0.0', '<')) {
 *       echo 'I am using PHP 4, my version: ' . PHP_VERSION . "\n";
 *   }
 *   ?>
 * 
 * Output: 
 */
function version_compare(String $version1, String $version2, String $sop = null_string) {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the Zend guid
 * Example:   
 *   <?php
 *   
 *   echo '<img src="' . $_SERVER['PHP_SELF'] .
 *        '?=' . zend_logo_guid() . '" alt="Zend Logo !" />';
 *   
 *   ?>
 * 
 * Output: 
 */
function zend_logo_guid() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Returns a unique identifier for the current thread
 * Example:   
 *   <?php
 *   $thread_id = zend_thread_id();
 *   
 *   echo 'Current thread id is: ' . $thread_id;
 *   ?>
 * 
 * Output:   
 *   Current thread id is: 7864
 */
function zend_thread_id() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

/*
 * Purpose: Gets the version of the current Zend engine
 * Example:   
 *   <?php
 *   echo "Zend engine version: " . zend_version();
 *   ?>
 * 
 * Output:   
 *   Zend engine version: 2.2.0
 */
function zend_version() {
 // THIS IS AUTOGENERATED BY builtins_php.ml
  
}

